
StepMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003914  08003914  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003914  08003914  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003914  08003914  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800391c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000006c  08003988  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003988  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6da  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020de  00000000  00000000  0002a76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002d1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e81e  00000000  00000000  0002da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082b1  00000000  00000000  0003c2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00047b5d  00000000  00000000  00044557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008c0b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002100  00000000  00000000  0008c108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003854 	.word	0x08003854

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08003854 	.word	0x08003854

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6a1a      	ldr	r2, [r3, #32]
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	431a      	orrs	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	621a      	str	r2, [r3, #32]
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b002      	add	sp, #8
 8000410:	bd80      	pop	{r7, pc}

08000412 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	43d2      	mvns	r2, r2
 8000424:	401a      	ands	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	621a      	str	r2, [r3, #32]
}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b002      	add	sp, #8
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d01e      	beq.n	8000482 <LL_TIM_OC_EnablePreload+0x4e>
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	2b04      	cmp	r3, #4
 8000448:	d019      	beq.n	800047e <LL_TIM_OC_EnablePreload+0x4a>
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	2b10      	cmp	r3, #16
 800044e:	d014      	beq.n	800047a <LL_TIM_OC_EnablePreload+0x46>
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	2b40      	cmp	r3, #64	; 0x40
 8000454:	d00f      	beq.n	8000476 <LL_TIM_OC_EnablePreload+0x42>
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	429a      	cmp	r2, r3
 800045e:	d008      	beq.n	8000472 <LL_TIM_OC_EnablePreload+0x3e>
 8000460:	683a      	ldr	r2, [r7, #0]
 8000462:	2380      	movs	r3, #128	; 0x80
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	429a      	cmp	r2, r3
 8000468:	d101      	bne.n	800046e <LL_TIM_OC_EnablePreload+0x3a>
 800046a:	2305      	movs	r3, #5
 800046c:	e00a      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 800046e:	2306      	movs	r3, #6
 8000470:	e008      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 8000472:	2304      	movs	r3, #4
 8000474:	e006      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 8000476:	2303      	movs	r3, #3
 8000478:	e004      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 800047a:	2302      	movs	r3, #2
 800047c:	e002      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 800047e:	2301      	movs	r3, #1
 8000480:	e000      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 8000482:	2300      	movs	r3, #0
 8000484:	200f      	movs	r0, #15
 8000486:	183a      	adds	r2, r7, r0
 8000488:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	3318      	adds	r3, #24
 800048e:	0019      	movs	r1, r3
 8000490:	183b      	adds	r3, r7, r0
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4a09      	ldr	r2, [pc, #36]	; (80004bc <LL_TIM_OC_EnablePreload+0x88>)
 8000496:	5cd3      	ldrb	r3, [r2, r3]
 8000498:	18cb      	adds	r3, r1, r3
 800049a:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	183b      	adds	r3, r7, r0
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4906      	ldr	r1, [pc, #24]	; (80004c0 <LL_TIM_OC_EnablePreload+0x8c>)
 80004a6:	5ccb      	ldrb	r3, [r1, r3]
 80004a8:	0019      	movs	r1, r3
 80004aa:	2308      	movs	r3, #8
 80004ac:	408b      	lsls	r3, r1
 80004ae:	431a      	orrs	r2, r3
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	601a      	str	r2, [r3, #0]
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b004      	add	sp, #16
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	080038cc 	.word	0x080038cc
 80004c0:	080038d4 	.word	0x080038d4

080004c4 <LL_TIM_OC_DisablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d01e      	beq.n	8000512 <LL_TIM_OC_DisablePreload+0x4e>
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d019      	beq.n	800050e <LL_TIM_OC_DisablePreload+0x4a>
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2b10      	cmp	r3, #16
 80004de:	d014      	beq.n	800050a <LL_TIM_OC_DisablePreload+0x46>
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2b40      	cmp	r3, #64	; 0x40
 80004e4:	d00f      	beq.n	8000506 <LL_TIM_OC_DisablePreload+0x42>
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d008      	beq.n	8000502 <LL_TIM_OC_DisablePreload+0x3e>
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d101      	bne.n	80004fe <LL_TIM_OC_DisablePreload+0x3a>
 80004fa:	2305      	movs	r3, #5
 80004fc:	e00a      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 80004fe:	2306      	movs	r3, #6
 8000500:	e008      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 8000502:	2304      	movs	r3, #4
 8000504:	e006      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 8000506:	2303      	movs	r3, #3
 8000508:	e004      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 800050a:	2302      	movs	r3, #2
 800050c:	e002      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 800050e:	2301      	movs	r3, #1
 8000510:	e000      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 8000512:	2300      	movs	r3, #0
 8000514:	200f      	movs	r0, #15
 8000516:	183a      	adds	r2, r7, r0
 8000518:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3318      	adds	r3, #24
 800051e:	0019      	movs	r1, r3
 8000520:	183b      	adds	r3, r7, r0
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <LL_TIM_OC_DisablePreload+0x8c>)
 8000526:	5cd3      	ldrb	r3, [r2, r3]
 8000528:	18cb      	adds	r3, r1, r3
 800052a:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	183a      	adds	r2, r7, r0
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	4907      	ldr	r1, [pc, #28]	; (8000554 <LL_TIM_OC_DisablePreload+0x90>)
 8000536:	5c8a      	ldrb	r2, [r1, r2]
 8000538:	0011      	movs	r1, r2
 800053a:	2208      	movs	r2, #8
 800053c:	408a      	lsls	r2, r1
 800053e:	43d2      	mvns	r2, r2
 8000540:	401a      	ands	r2, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	601a      	str	r2, [r3, #0]
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	080038cc 	.word	0x080038cc
 8000554:	080038d4 	.word	0x080038d4

08000558 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b002      	add	sp, #8
 800056e:	bd80      	pop	{r7, pc}

08000570 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}

08000588 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b002      	add	sp, #8
 800059e:	bd80      	pop	{r7, pc}

080005a0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	619a      	str	r2, [r3, #24]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b002      	add	sp, #8
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <SM_Wire_Verificator>:

// ==================================\\
// Verifiers of the above structures  --------------------------------------------------------
// ==================================//

__STATIC_INLINE int SM_Wire_Verificator (wire_t* wire) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    return wire       != NULL &&
           wire->port != NULL &&
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d00b      	beq.n	80005f6 <SM_Wire_Verificator+0x26>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
    return wire       != NULL &&
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d007      	beq.n	80005f6 <SM_Wire_Verificator+0x26>
           wire->pin  <= LL_GPIO_PIN_ALL;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
           wire->port != NULL &&
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	025b      	lsls	r3, r3, #9
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d201      	bcs.n	80005f6 <SM_Wire_Verificator+0x26>
 80005f2:	2301      	movs	r3, #1
 80005f4:	e000      	b.n	80005f8 <SM_Wire_Verificator+0x28>
 80005f6:	2300      	movs	r3, #0
} 
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}

08000600 <SM_Timer_Channel_Verificator>:
__STATIC_INLINE int SM_Timer_Channel_Verificator (timer_channel_t* timer_channel) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    return timer_channel              != NULL &&
           timer_channel->TIMx        != NULL &&
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00b      	beq.n	8000626 <SM_Timer_Channel_Verificator+0x26>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
    return timer_channel              != NULL &&
 8000612:	2b00      	cmp	r3, #0
 8000614:	d007      	beq.n	8000626 <SM_Timer_Channel_Verificator+0x26>
           timer_channel->CHANNEL_CHx <= LL_TIM_CHANNEL_CH4;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	685a      	ldr	r2, [r3, #4]
           timer_channel->TIMx        != NULL &&
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	015b      	lsls	r3, r3, #5
 800061e:	429a      	cmp	r2, r3
 8000620:	d801      	bhi.n	8000626 <SM_Timer_Channel_Verificator+0x26>
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <SM_Timer_Channel_Verificator+0x28>
 8000626:	2300      	movs	r3, #0
}
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b002      	add	sp, #8
 800062e:	bd80      	pop	{r7, pc}

08000630 <SM_Step_Motor_Verificator>:
__STATIC_INLINE int SM_Step_Motor_Verificator (step_motor_t* step_motor) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    return (SM_Timer_Channel_Verificator (&step_motor->timer_channel) == -1) &&
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ffe0 	bl	8000600 <SM_Timer_Channel_Verificator>
 8000640:	0003      	movs	r3, r0
           (SM_Wire_Verificator          (&step_motor->dir)           == -1) &&
 8000642:	3301      	adds	r3, #1
 8000644:	d111      	bne.n	800066a <SM_Step_Motor_Verificator+0x3a>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3308      	adds	r3, #8
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ffc0 	bl	80005d0 <SM_Wire_Verificator>
 8000650:	0003      	movs	r3, r0
    return (SM_Timer_Channel_Verificator (&step_motor->timer_channel) == -1) &&
 8000652:	3301      	adds	r3, #1
 8000654:	d109      	bne.n	800066a <SM_Step_Motor_Verificator+0x3a>
           (SM_Wire_Verificator          (&step_motor->enable)        == -1);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3310      	adds	r3, #16
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff ffb8 	bl	80005d0 <SM_Wire_Verificator>
 8000660:	0003      	movs	r3, r0
           (SM_Wire_Verificator          (&step_motor->dir)           == -1) &&
 8000662:	3301      	adds	r3, #1
 8000664:	d101      	bne.n	800066a <SM_Step_Motor_Verificator+0x3a>
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <SM_Step_Motor_Verificator+0x3c>
 800066a:	2300      	movs	r3, #0
}
 800066c:	0018      	movs	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}

08000674 <SM_Enable>:
// Enable/Disable and Direction functions ----------------------------------------------------
// ======================================//

// !!! This functions don't check on NULL pointer

__STATIC_INLINE void SM_Enable  (const step_motor_t* stepMotor) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    LL_GPIO_ResetOutputPin (stepMotor->enable.port, stepMotor->enable.pin);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	691a      	ldr	r2, [r3, #16]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	0019      	movs	r1, r3
 8000686:	0010      	movs	r0, r2
 8000688:	f7ff ff96 	bl	80005b8 <LL_GPIO_ResetOutputPin>
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b002      	add	sp, #8
 8000692:	bd80      	pop	{r7, pc}

08000694 <SM_Set_Dir_ClockWise>:
__STATIC_INLINE void SM_Disable (const step_motor_t* stepMotor) {
    LL_GPIO_SetOutputPin (stepMotor->enable.port, stepMotor->enable.pin);
}

__STATIC_INLINE void SM_Set_Dir_ClockWise        (const step_motor_t* stepMotor) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    LL_GPIO_SetOutputPin (stepMotor->dir.port, stepMotor->dir.pin);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	0019      	movs	r1, r3
 80006a6:	0010      	movs	r0, r2
 80006a8:	f7ff ff7a 	bl	80005a0 <LL_GPIO_SetOutputPin>
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SM_Set_Dir_CounterClockWise>:
__STATIC_INLINE void SM_Set_Dir_CounterClockWise (const step_motor_t* stepMotor) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    LL_GPIO_ResetOutputPin (stepMotor->dir.port, stepMotor->dir.pin);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0019      	movs	r1, r3
 80006c6:	0010      	movs	r0, r2
 80006c8:	f7ff ff76 	bl	80005b8 <LL_GPIO_ResetOutputPin>
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SM_Set_Direction>:
__STATIC_INLINE void SM_Set_Direction            (const step_motor_t* stepMotor, uint8_t direction) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	000a      	movs	r2, r1
 80006de:	1cfb      	adds	r3, r7, #3
 80006e0:	701a      	strb	r2, [r3, #0]
    if (direction > 0)
 80006e2:	1cfb      	adds	r3, r7, #3
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d004      	beq.n	80006f4 <SM_Set_Direction+0x20>
        SM_Set_Dir_ClockWise (stepMotor);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff ffd1 	bl	8000694 <SM_Set_Dir_ClockWise>
    else
        SM_Set_Dir_CounterClockWise (stepMotor);
}
 80006f2:	e003      	b.n	80006fc <SM_Set_Direction+0x28>
        SM_Set_Dir_CounterClockWise (stepMotor);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ffdc 	bl	80006b4 <SM_Set_Dir_CounterClockWise>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b002      	add	sp, #8
 8000702:	bd80      	pop	{r7, pc}

08000704 <SM_Disable_TIM_Channel>:

void SM_Enable_TIM_Channel (timer_channel_t timer_channel) {
    LL_TIM_CC_EnableChannel (timer_channel.TIMx, timer_channel.CHANNEL_CHx);
}

void SM_Disable_TIM_Channel (timer_channel_t timer_channel) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	003b      	movs	r3, r7
 800070c:	6018      	str	r0, [r3, #0]
 800070e:	6059      	str	r1, [r3, #4]
    LL_TIM_CC_DisableChannel (timer_channel.TIMx, timer_channel.CHANNEL_CHx);
 8000710:	003b      	movs	r3, r7
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	003b      	movs	r3, r7
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	0019      	movs	r1, r3
 800071a:	0010      	movs	r0, r2
 800071c:	f7ff fe79 	bl	8000412 <LL_TIM_CC_DisableChannel>
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}

08000728 <ST_Step_Driver>:

// Только для одного таймера
void ST_Step_Driver () {
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b092      	sub	sp, #72	; 0x48
 800072c:	af00      	add	r7, sp, #0
        LL_TIM_OC_DisablePreload (SM_PULSE_TIMER, LL_TIM_CHANNEL_CH##num_channel);
    
    #define SET_COMPARE_CHx(num_channel)\
        LL_TIM_OC_SetCompareCH##num_channel (SM_PULSE_TIMER, 0);

    if (channels_is_active) {
 800072e:	4b87      	ldr	r3, [pc, #540]	; (800094c <ST_Step_Driver+0x224>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d028      	beq.n	8000788 <ST_Step_Driver+0x60>
        #if NUMBER_STEP_MOTORS >= (1)
            DISABLE_PRELOAD_CHx   (1)
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	2101      	movs	r1, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fec1 	bl	80004c4 <LL_TIM_OC_DisablePreload>
            SET_COMPARE_CHx       (1)
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2100      	movs	r1, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff ff05 	bl	8000558 <LL_TIM_OC_SetCompareCH1>
        #endif
        #if NUMBER_STEP_MOTORS >= (2)
            DISABLE_PRELOAD_CHx   (2)
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	2110      	movs	r1, #16
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff feb5 	bl	80004c4 <LL_TIM_OC_DisablePreload>
            SET_COMPARE_CHx       (2)
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ff05 	bl	8000570 <LL_TIM_OC_SetCompareCH2>
        #endif
        #if NUMBER_STEP_MOTORS >= (3)
            DISABLE_PRELOAD_CHx   (3)
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	005a      	lsls	r2, r3, #1
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fea7 	bl	80004c4 <LL_TIM_OC_DisablePreload>
            SET_COMPARE_CHx       (3)
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2100      	movs	r1, #0
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff ff03 	bl	8000588 <LL_TIM_OC_SetCompareCH3>
        #if NUMBER_STEP_MOTORS >= (4)
            DISABLE_PRELOAD_CHx   (4)
            SET_COMPARE_CHx       (4)
        #endif
        
        channels_is_active = 0;
 8000782:	4b72      	ldr	r3, [pc, #456]	; (800094c <ST_Step_Driver+0x224>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
    }
    
    #undef SET_COMPARE_CHx
    #undef DISABLE_PRELOAD_CHx

    for (uint32_t num_sm = 0; num_sm < NUMBER_STEP_MOTORS; ++num_sm) {
 8000788:	2300      	movs	r3, #0
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
 800078c:	e0d5      	b.n	800093a <ST_Step_Driver+0x212>
        uint16_t* number_steps = &(drimem.unit_task[num_sm].number_steps);
 800078e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000790:	0013      	movs	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	189b      	adds	r3, r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	3348      	adds	r3, #72	; 0x48
 800079a:	001a      	movs	r2, r3
 800079c:	4b6c      	ldr	r3, [pc, #432]	; (8000950 <ST_Step_Driver+0x228>)
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40

        if (*number_steps) {      
 80007a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <ST_Step_Driver+0x84>
 80007aa:	e0c3      	b.n	8000934 <ST_Step_Driver+0x20c>
            sm_unit_task_t unit_task = drimem.unit_task[num_sm];
 80007ac:	2508      	movs	r5, #8
 80007ae:	197c      	adds	r4, r7, r5
 80007b0:	4967      	ldr	r1, [pc, #412]	; (8000950 <ST_Step_Driver+0x228>)
 80007b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007b4:	2048      	movs	r0, #72	; 0x48
 80007b6:	0013      	movs	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	189b      	adds	r3, r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	18cb      	adds	r3, r1, r3
 80007c0:	181b      	adds	r3, r3, r0
 80007c2:	0020      	movs	r0, r4
 80007c4:	0019      	movs	r1, r3
 80007c6:	2306      	movs	r3, #6
 80007c8:	001a      	movs	r2, r3
 80007ca:	f003 f831 	bl	8003830 <memcpy>
            uint32_t counter = ++(drimem.counters[num_sm]);
 80007ce:	4a60      	ldr	r2, [pc, #384]	; (8000950 <ST_Step_Driver+0x228>)
 80007d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007d2:	3316      	adds	r3, #22
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	18d3      	adds	r3, r2, r3
 80007d8:	3304      	adds	r3, #4
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	495c      	ldr	r1, [pc, #368]	; (8000950 <ST_Step_Driver+0x228>)
 80007e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007e2:	3316      	adds	r3, #22
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	18cb      	adds	r3, r1, r3
 80007e8:	3304      	adds	r3, #4
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	4a58      	ldr	r2, [pc, #352]	; (8000950 <ST_Step_Driver+0x228>)
 80007ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007f0:	3316      	adds	r3, #22
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	3304      	adds	r3, #4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (counter == unit_task.timer_counter || counter == 0) {
 80007fc:	197b      	adds	r3, r7, r5
 80007fe:	885b      	ldrh	r3, [r3, #2]
 8000800:	001a      	movs	r2, r3
 8000802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000804:	4293      	cmp	r3, r2
 8000806:	d003      	beq.n	8000810 <ST_Step_Driver+0xe8>
 8000808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800080a:	2b00      	cmp	r3, #0
 800080c:	d000      	beq.n	8000810 <ST_Step_Driver+0xe8>
 800080e:	e091      	b.n	8000934 <ST_Step_Driver+0x20c>
                drimem.counters[num_sm] = 0;
 8000810:	4a4f      	ldr	r2, [pc, #316]	; (8000950 <ST_Step_Driver+0x228>)
 8000812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000814:	3316      	adds	r3, #22
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	18d3      	adds	r3, r2, r3
 800081a:	3304      	adds	r3, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
                
                (*number_steps)--;
 8000820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	3b01      	subs	r3, #1
 8000826:	b29a      	uxth	r2, r3
 8000828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800082a:	801a      	strh	r2, [r3, #0]

                channels_is_active = 1;
 800082c:	4b47      	ldr	r3, [pc, #284]	; (800094c <ST_Step_Driver+0x224>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
                const timer_channel_t timer_channel = drimem.step_motor[num_sm].timer_channel;
 8000832:	0038      	movs	r0, r7
 8000834:	4946      	ldr	r1, [pc, #280]	; (8000950 <ST_Step_Driver+0x228>)
 8000836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000838:	0013      	movs	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	189b      	adds	r3, r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	0002      	movs	r2, r0
 8000842:	18cb      	adds	r3, r1, r3
 8000844:	cb03      	ldmia	r3!, {r0, r1}
 8000846:	c203      	stmia	r2!, {r0, r1}

                TIM_TypeDef* TIMx = timer_channel.TIMx;
 8000848:	003b      	movs	r3, r7
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38
                uint32_t TIM_CHANNEL_CHx = timer_channel.CHANNEL_CHx;
 800084e:	003b      	movs	r3, r7
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
                #define CASE_PREPARE_PULSECHx(x)                                            \
                case ((x) - 1):                                                             \
                    Prepeare_PulseCH##x (TIMx, TIM_CHANNEL_CHx, PULSE_TIMER_COMPARE_VALUE); \
                    break;

                switch (num_sm) {
 8000854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000856:	2b02      	cmp	r3, #2
 8000858:	d047      	beq.n	80008ea <ST_Step_Driver+0x1c2>
 800085a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800085c:	2b02      	cmp	r3, #2
 800085e:	d863      	bhi.n	8000928 <ST_Step_Driver+0x200>
 8000860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000862:	2b00      	cmp	r3, #0
 8000864:	d003      	beq.n	800086e <ST_Step_Driver+0x146>
 8000866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000868:	2b01      	cmp	r3, #1
 800086a:	d01f      	beq.n	80008ac <ST_Step_Driver+0x184>
 800086c:	e05c      	b.n	8000928 <ST_Step_Driver+0x200>
 800086e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
 8000872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000876:	2309      	movs	r3, #9
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
    TEMPLATE_Prepeare_PulseCHx (1)
 800087a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800087c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff fe1f 	bl	80004c4 <LL_TIM_OC_DisablePreload>
 8000886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff fe63 	bl	8000558 <LL_TIM_OC_SetCompareCH1>
 8000892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff fdcb 	bl	8000434 <LL_TIM_OC_EnablePreload>
 800089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff fe58 	bl	8000558 <LL_TIM_OC_SetCompareCH1>
 80008a8:	46c0      	nop			; (mov r8, r8)
                    #if (NUMBER_STEP_MOTORS) >= (1)
                        CASE_PREPARE_PULSECHx   (1);
 80008aa:	e03d      	b.n	8000928 <ST_Step_Driver+0x200>
 80008ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
 80008b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b2:	623b      	str	r3, [r7, #32]
 80008b4:	2309      	movs	r3, #9
 80008b6:	61fb      	str	r3, [r7, #28]
    TEMPLATE_Prepeare_PulseCHx (2)
 80008b8:	6a3a      	ldr	r2, [r7, #32]
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff fe00 	bl	80004c4 <LL_TIM_OC_DisablePreload>
 80008c4:	69fa      	ldr	r2, [r7, #28]
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fe50 	bl	8000570 <LL_TIM_OC_SetCompareCH2>
 80008d0:	6a3a      	ldr	r2, [r7, #32]
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fdac 	bl	8000434 <LL_TIM_OC_EnablePreload>
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	2100      	movs	r1, #0
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff fe45 	bl	8000570 <LL_TIM_OC_SetCompareCH2>
 80008e6:	46c0      	nop			; (mov r8, r8)
                    #endif
                    #if (NUMBER_STEP_MOTORS) >= (2)
                        CASE_PREPARE_PULSECHx   (2);
 80008e8:	e01e      	b.n	8000928 <ST_Step_Driver+0x200>
 80008ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	2309      	movs	r3, #9
 80008f4:	613b      	str	r3, [r7, #16]
    TEMPLATE_Prepeare_PulseCHx (3)
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fde1 	bl	80004c4 <LL_TIM_OC_DisablePreload>
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff fe3d 	bl	8000588 <LL_TIM_OC_SetCompareCH3>
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f7ff fd8d 	bl	8000434 <LL_TIM_OC_EnablePreload>
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	2100      	movs	r1, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fe32 	bl	8000588 <LL_TIM_OC_SetCompareCH3>
 8000924:	46c0      	nop			; (mov r8, r8)
                    #endif
                    #if (NUMBER_STEP_MOTORS) >= (3)
                        CASE_PREPARE_PULSECHx   (3);
 8000926:	46c0      	nop			; (mov r8, r8)
                    #endif
                }

                #undef CASE_PREPARE_PULSECHx

                LL_TIM_CC_EnableChannel (TIMx, TIM_CHANNEL_CHx);
 8000928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800092a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800092c:	0011      	movs	r1, r2
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff fd60 	bl	80003f4 <LL_TIM_CC_EnableChannel>
    for (uint32_t num_sm = 0; num_sm < NUMBER_STEP_MOTORS; ++num_sm) {
 8000934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000936:	3301      	adds	r3, #1
 8000938:	647b      	str	r3, [r7, #68]	; 0x44
 800093a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800093c:	2b02      	cmp	r3, #2
 800093e:	d800      	bhi.n	8000942 <ST_Step_Driver+0x21a>
 8000940:	e725      	b.n	800078e <ST_Step_Driver+0x66>
            }
        }
    }
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b012      	add	sp, #72	; 0x48
 800094a:	bdb0      	pop	{r4, r5, r7, pc}
 800094c:	200000f0 	.word	0x200000f0
 8000950:	20000088 	.word	0x20000088

08000954 <SM_Driver_Reset_Step_Motors>:


// Step motor driver memory ---------------------------------

void SM_Driver_Reset_Step_Motors () {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
    bzero (&drimem.step_motor, sizeof (drimem.step_motor));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <SM_Driver_Reset_Step_Motors+0x18>)
 800095a:	0018      	movs	r0, r3
 800095c:	2348      	movs	r3, #72	; 0x48
 800095e:	001a      	movs	r2, r3
 8000960:	2100      	movs	r1, #0
 8000962:	f002 ff6e 	bl	8003842 <memset>
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000088 	.word	0x20000088

08000970 <SM_Driver_Reset_Unit_Tasks>:
void SM_Driver_Reset_Unit_Tasks () {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    bzero (&drimem.unit_task, sizeof (drimem.unit_task));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SM_Driver_Reset_Unit_Tasks+0x18>)
 8000976:	0018      	movs	r0, r3
 8000978:	2312      	movs	r3, #18
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f002 ff60 	bl	8003842 <memset>
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200000d0 	.word	0x200000d0

0800098c <SM_Driver_Reset_Counters>:
void SM_Driver_Reset_Counters () {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUMBER_STEP_MOTORS; ++i)
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	e00b      	b.n	80009b0 <SM_Driver_Reset_Counters+0x24>
        drimem.counters[i] = -1;
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <SM_Driver_Reset_Counters+0x34>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3316      	adds	r3, #22
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	3304      	adds	r3, #4
 80009a4:	2201      	movs	r2, #1
 80009a6:	4252      	negs	r2, r2
 80009a8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUMBER_STEP_MOTORS; ++i)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3301      	adds	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	ddf0      	ble.n	8000998 <SM_Driver_Reset_Counters+0xc>
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000088 	.word	0x20000088

080009c4 <SM_Driver_Reset_All>:
void SM_Driver_Reset_All () {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
    SM_Driver_Reset_Step_Motors ();
 80009c8:	f7ff ffc4 	bl	8000954 <SM_Driver_Reset_Step_Motors>
    SM_Driver_Reset_Unit_Tasks  ();
 80009cc:	f7ff ffd0 	bl	8000970 <SM_Driver_Reset_Unit_Tasks>
    SM_Driver_Reset_Counters    ();
 80009d0:	f7ff ffdc 	bl	800098c <SM_Driver_Reset_Counters>
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <SM_Driver_Init_Step_Motor>:

int SM_Driver_Init_Step_Motor (uint8_t number_step_motor, step_motor_t* step_motor) {
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	701a      	strb	r2, [r3, #0]
    if (number_step_motor >= NUMBER_STEP_MOTORS) {
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d907      	bls.n	8000a02 <SM_Driver_Init_Step_Motor+0x26>
        errno = ERANGE;
 80009f2:	f002 fef3 	bl	80037dc <__errno>
 80009f6:	0003      	movs	r3, r0
 80009f8:	2222      	movs	r2, #34	; 0x22
 80009fa:	601a      	str	r2, [r3, #0]
        return -1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	425b      	negs	r3, r3
 8000a00:	e018      	b.n	8000a34 <SM_Driver_Init_Step_Motor+0x58>
    } else if (step_motor == NULL) {
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d107      	bne.n	8000a18 <SM_Driver_Init_Step_Motor+0x3c>
        errno = EINVAL;
 8000a08:	f002 fee8 	bl	80037dc <__errno>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	2216      	movs	r2, #22
 8000a10:	601a      	str	r2, [r3, #0]
        return -1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	425b      	negs	r3, r3
 8000a16:	e00d      	b.n	8000a34 <SM_Driver_Init_Step_Motor+0x58>
    }

    drimem.step_motor[number_step_motor] = *step_motor;
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	4907      	ldr	r1, [pc, #28]	; (8000a3c <SM_Driver_Init_Step_Motor+0x60>)
 8000a1e:	0013      	movs	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	189b      	adds	r3, r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	18cb      	adds	r3, r1, r3
 8000a2a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a2c:	c313      	stmia	r3!, {r0, r1, r4}
 8000a2e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a30:	c313      	stmia	r3!, {r0, r1, r4}

    return 0;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	20000088 	.word	0x20000088

08000a40 <SM_Driver_Verifier>:

int SM_Driver_Verifier () {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUMBER_STEP_MOTORS; ++i)
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	e012      	b.n	8000a72 <SM_Driver_Verifier+0x32>
        if (SM_Step_Motor_Verificator (&drimem.step_motor[i]) == -1)
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	0013      	movs	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	189b      	adds	r3, r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <SM_Driver_Verifier+0x44>)
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff fde8 	bl	8000630 <SM_Step_Motor_Verificator>
 8000a60:	0003      	movs	r3, r0
 8000a62:	3301      	adds	r3, #1
 8000a64:	d102      	bne.n	8000a6c <SM_Driver_Verifier+0x2c>
            return -1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	425b      	negs	r3, r3
 8000a6a:	e006      	b.n	8000a7a <SM_Driver_Verifier+0x3a>
    for (int i = 0; i < NUMBER_STEP_MOTORS; ++i)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	dde9      	ble.n	8000a4c <SM_Driver_Verifier+0xc>

    return 0;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	20000088 	.word	0x20000088

08000a88 <SM_Driver_Set_Direction>:

void SM_Driver_Set_Direction (uint16_t number_step_motor, uint8_t direction) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	1dbb      	adds	r3, r7, #6
 8000a92:	801a      	strh	r2, [r3, #0]
 8000a94:	1d7b      	adds	r3, r7, #5
 8000a96:	1c0a      	adds	r2, r1, #0
 8000a98:	701a      	strb	r2, [r3, #0]
    SM_Set_Direction (&drimem.step_motor[number_step_motor], direction);
 8000a9a:	1dbb      	adds	r3, r7, #6
 8000a9c:	881a      	ldrh	r2, [r3, #0]
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	189b      	adds	r3, r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <SM_Driver_Set_Direction+0x38>)
 8000aa8:	189a      	adds	r2, r3, r2
 8000aaa:	1d7b      	adds	r3, r7, #5
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0019      	movs	r1, r3
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	f7ff fe0f 	bl	80006d4 <SM_Set_Direction>
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000088 	.word	0x20000088

08000ac4 <SM_Driver_Enable_Step_Motors>:

void SM_Driver_Enable_Step_Motors () {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    SM_Enable (drimem.step_motor);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <SM_Driver_Enable_Step_Motors+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fdd2 	bl	8000674 <SM_Enable>
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000088 	.word	0x20000088

08000adc <SM_Driver_Set_Task>:
void SM_Driver_Disable_Step_Motors () {
    for (int i = 0; i < NUMBER_STEP_MOTORS; ++i)
        SM_Disable (&drimem.step_motor[i]);
}

void SM_Driver_Set_Task (uint16_t number_step_motor, const sm_unit_task_t* unit_task) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	1dbb      	adds	r3, r7, #6
 8000ae8:	801a      	strh	r2, [r3, #0]
    drimem.unit_task[number_step_motor] = *unit_task;
 8000aea:	1dbb      	adds	r3, r7, #6
 8000aec:	881a      	ldrh	r2, [r3, #0]
 8000aee:	4914      	ldr	r1, [pc, #80]	; (8000b40 <SM_Driver_Set_Task+0x64>)
 8000af0:	2048      	movs	r0, #72	; 0x48
 8000af2:	0013      	movs	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	189b      	adds	r3, r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	18cb      	adds	r3, r1, r3
 8000afc:	181a      	adds	r2, r3, r0
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	0010      	movs	r0, r2
 8000b02:	0019      	movs	r1, r3
 8000b04:	2306      	movs	r3, #6
 8000b06:	001a      	movs	r2, r3
 8000b08:	f002 fe92 	bl	8003830 <memcpy>

    SM_Driver_Set_Direction (number_step_motor, unit_task->direction);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	791b      	ldrb	r3, [r3, #4]
 8000b10:	07db      	lsls	r3, r3, #31
 8000b12:	0fdb      	lsrs	r3, r3, #31
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	001a      	movs	r2, r3
 8000b18:	1dbb      	adds	r3, r7, #6
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff ffb2 	bl	8000a88 <SM_Driver_Set_Direction>
    drimem.counters[number_step_motor] = -1;
 8000b24:	1dbb      	adds	r3, r7, #6
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <SM_Driver_Set_Task+0x64>)
 8000b2a:	3316      	adds	r3, #22
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	18d3      	adds	r3, r2, r3
 8000b30:	3304      	adds	r3, #4
 8000b32:	2201      	movs	r2, #1
 8000b34:	4252      	negs	r2, r2
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000088 	.word	0x20000088

08000b44 <LL_TIM_DisableCounter>:
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2201      	movs	r2, #1
 8000b52:	4393      	bics	r3, r2
 8000b54:	001a      	movs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <InitializeDriverStepMotors>:
#include "StepMotorParams.h"
#include "StepMotorDriver.h"
#include "main.h"

int InitializeDriverStepMotors () {
 8000b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b66:	b099      	sub	sp, #100	; 0x64
 8000b68:	af00      	add	r7, sp, #0
    SM_Driver_Reset_All ();
 8000b6a:	f7ff ff2b 	bl	80009c4 <SM_Driver_Reset_All>

    step_motor_t step_motor_0 = {
 8000b6e:	2148      	movs	r1, #72	; 0x48
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <InitializeDriverStepMotors+0xcc>)
 8000b74:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000b76:	c331      	stmia	r3!, {r0, r4, r5}
 8000b78:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000b7a:	c331      	stmia	r3!, {r0, r4, r5}
            .pin  = DIR_0_Pin,
            .port = DIR_0_GPIO_Port
        }
    };

    step_motor_t step_motor_1 = {
 8000b7c:	2430      	movs	r4, #48	; 0x30
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	4a2c      	ldr	r2, [pc, #176]	; (8000c34 <InitializeDriverStepMotors+0xd0>)
 8000b82:	ca61      	ldmia	r2!, {r0, r5, r6}
 8000b84:	c361      	stmia	r3!, {r0, r5, r6}
 8000b86:	ca61      	ldmia	r2!, {r0, r5, r6}
 8000b88:	c361      	stmia	r3!, {r0, r5, r6}
            .pin  = DIR_1_Pin,
            .port = DIR_1_GPIO_Port
        }
    };

    step_motor_t step_motor_2 = {
 8000b8a:	2518      	movs	r5, #24
 8000b8c:	197b      	adds	r3, r7, r5
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <InitializeDriverStepMotors+0xd4>)
 8000b90:	ca43      	ldmia	r2!, {r0, r1, r6}
 8000b92:	c343      	stmia	r3!, {r0, r1, r6}
 8000b94:	ca43      	ldmia	r2!, {r0, r1, r6}
 8000b96:	c343      	stmia	r3!, {r0, r1, r6}
            .pin  = DIR_2_Pin,
            .port = DIR_2_GPIO_Port 
        }
    };

    if (SM_Driver_Init_Step_Motor (0, &step_motor_0) == -1 ||
 8000b98:	2148      	movs	r1, #72	; 0x48
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff ff1c 	bl	80009dc <SM_Driver_Init_Step_Motor>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	d00f      	beq.n	8000bca <InitializeDriverStepMotors+0x66>
        SM_Driver_Init_Step_Motor (1, &step_motor_1) == -1 ||
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	0019      	movs	r1, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff ff14 	bl	80009dc <SM_Driver_Init_Step_Motor>
 8000bb4:	0003      	movs	r3, r0
    if (SM_Driver_Init_Step_Motor (0, &step_motor_0) == -1 ||
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	d007      	beq.n	8000bca <InitializeDriverStepMotors+0x66>
        SM_Driver_Init_Step_Motor (2, &step_motor_2) == -1)
 8000bba:	197b      	adds	r3, r7, r5
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff ff0c 	bl	80009dc <SM_Driver_Init_Step_Motor>
 8000bc4:	0003      	movs	r3, r0
        SM_Driver_Init_Step_Motor (1, &step_motor_1) == -1 ||
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	d102      	bne.n	8000bd0 <InitializeDriverStepMotors+0x6c>
        return -1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	425b      	negs	r3, r3
 8000bce:	e02a      	b.n	8000c26 <InitializeDriverStepMotors+0xc2>

    if (SM_Driver_Verifier () == -1)
 8000bd0:	f7ff ff36 	bl	8000a40 <SM_Driver_Verifier>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	d102      	bne.n	8000be0 <InitializeDriverStepMotors+0x7c>
        return -1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	e022      	b.n	8000c26 <InitializeDriverStepMotors+0xc2>

    SM_Disable_TIM_Channel ((timer_channel_t) {
 8000be0:	2110      	movs	r1, #16
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <InitializeDriverStepMotors+0xd8>)
 8000be6:	ca11      	ldmia	r2!, {r0, r4}
 8000be8:	c311      	stmia	r3!, {r0, r4}
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	6859      	ldr	r1, [r3, #4]
 8000bf0:	f7ff fd88 	bl	8000704 <SM_Disable_TIM_Channel>
        .TIMx = TIM2,
        .CHANNEL_CHx = SM_0_TIM_CHANNEL
    });

    SM_Disable_TIM_Channel ((timer_channel_t) {
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <InitializeDriverStepMotors+0xdc>)
 8000bfa:	ca11      	ldmia	r2!, {r0, r4}
 8000bfc:	c311      	stmia	r3!, {r0, r4}
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	6859      	ldr	r1, [r3, #4]
 8000c04:	f7ff fd7e 	bl	8000704 <SM_Disable_TIM_Channel>
        .TIMx = TIM2,
        .CHANNEL_CHx = SM_1_TIM_CHANNEL
    });

    SM_Disable_TIM_Channel ((timer_channel_t) {
 8000c08:	003b      	movs	r3, r7
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <InitializeDriverStepMotors+0xe0>)
 8000c0c:	ca03      	ldmia	r2!, {r0, r1}
 8000c0e:	c303      	stmia	r3!, {r0, r1}
 8000c10:	003b      	movs	r3, r7
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	6859      	ldr	r1, [r3, #4]
 8000c16:	f7ff fd75 	bl	8000704 <SM_Disable_TIM_Channel>
        .TIMx = TIM2,
        .CHANNEL_CHx = SM_2_TIM_CHANNEL
    });

    LL_TIM_DisableCounter (TIM2);
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff ff90 	bl	8000b44 <LL_TIM_DisableCounter>

    return 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b019      	add	sp, #100	; 0x64
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	0800386c 	.word	0x0800386c
 8000c34:	08003884 	.word	0x08003884
 8000c38:	0800389c 	.word	0x0800389c
 8000c3c:	080038b4 	.word	0x080038b4
 8000c40:	080038bc 	.word	0x080038bc
 8000c44:	080038c4 	.word	0x080038c4

08000c48 <LL_TIM_EnableCounter>:
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b002      	add	sp, #8
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <DeltaTime2TimerTick>:
#include <stdlib.h>
#include <stdint.h>

// All usec and urad

__STATIC_INLINE uint32_t DeltaTime2TimerTick (uint32_t delta_time) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    return (delta_time * FREQ_TIMER) / 1000000;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <DeltaTime2TimerTick+0x20>)
 8000c70:	4353      	muls	r3, r2
 8000c72:	4905      	ldr	r1, [pc, #20]	; (8000c88 <DeltaTime2TimerTick+0x24>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff fa47 	bl	8000108 <__udivsi3>
 8000c7a:	0003      	movs	r3, r0
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b002      	add	sp, #8
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	00002710 	.word	0x00002710
 8000c88:	000f4240 	.word	0x000f4240

08000c8c <AxisRotate>:

int AxisRotate (uint16_t number_step_motor, int urad, int usec) {
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	250e      	movs	r5, #14
 8000c98:	197b      	adds	r3, r7, r5
 8000c9a:	1c02      	adds	r2, r0, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
    const uint32_t number_steps = abs (urad) / STEP_ANGLE;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	17da      	asrs	r2, r3, #31
 8000ca2:	189b      	adds	r3, r3, r2
 8000ca4:	4053      	eors	r3, r2
 8000ca6:	491d      	ldr	r1, [pc, #116]	; (8000d1c <AxisRotate+0x90>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fab7 	bl	800021c <__divsi3>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	61fb      	str	r3, [r7, #28]
    const uint32_t delta_time   = usec / number_steps;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69f9      	ldr	r1, [r7, #28]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff fa26 	bl	8000108 <__udivsi3>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	61bb      	str	r3, [r7, #24]

    sm_unit_task_t unit_task = {
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	2410      	movs	r4, #16
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	801a      	strh	r2, [r3, #0]
        .number_steps  = number_steps,
        .timer_counter = DeltaTime2TimerTick (delta_time),
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ffc9 	bl	8000c64 <DeltaTime2TimerTick>
 8000cd2:	0003      	movs	r3, r0
    sm_unit_task_t unit_task = {
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	805a      	strh	r2, [r3, #2]
        .direction     = urad > 0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	17da      	asrs	r2, r3, #31
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	0fdb      	lsrs	r3, r3, #31
 8000ce2:	b2da      	uxtb	r2, r3
    sm_unit_task_t unit_task = {
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	400a      	ands	r2, r1
 8000cea:	0010      	movs	r0, r2
 8000cec:	791a      	ldrb	r2, [r3, #4]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	438a      	bics	r2, r1
 8000cf2:	1c11      	adds	r1, r2, #0
 8000cf4:	1c02      	adds	r2, r0, #0
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	711a      	strb	r2, [r3, #4]
    };
    
    SM_Driver_Set_Task (number_step_motor, &unit_task);
 8000cfa:	193a      	adds	r2, r7, r4
 8000cfc:	197b      	adds	r3, r7, r5
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff feea 	bl	8000adc <SM_Driver_Set_Task>

    LL_TIM_EnableCounter (SM_DRIVER_TIMER);
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <AxisRotate+0x94>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff ff9c 	bl	8000c48 <LL_TIM_EnableCounter>
    
    return 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b008      	add	sp, #32
 8000d18:	bdb0      	pop	{r4, r5, r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	00003d5b 	.word	0x00003d5b
 8000d20:	40001000 	.word	0x40001000

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b7f      	cmp	r3, #127	; 0x7f
 8000d36:	d809      	bhi.n	8000d4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	231f      	movs	r3, #31
 8000d40:	401a      	ands	r2, r3
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_EnableIRQ+0x30>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
  }
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6c:	d828      	bhi.n	8000dc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <__NVIC_SetPriority+0xd4>)
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	33c0      	adds	r3, #192	; 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	589b      	ldr	r3, [r3, r2]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	; 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	481f      	ldr	r0, [pc, #124]	; (8000e2c <__NVIC_SetPriority+0xd4>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	430a      	orrs	r2, r1
 8000db8:	33c0      	adds	r3, #192	; 0xc0
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dbe:	e031      	b.n	8000e24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <__NVIC_SetPriority+0xd8>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	230f      	movs	r3, #15
 8000dca:	400b      	ands	r3, r1
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3306      	adds	r3, #6
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	; 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	; 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001c      	movs	r4, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	4023      	ands	r3, r4
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	18c3      	adds	r3, r0, r3
 8000e20:	3304      	adds	r3, #4
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e3e:	6959      	ldr	r1, [r3, #20]
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b004      	add	sp, #16
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000

08000e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff ffe5 	bl	8000e34 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f7ff ff73 	bl	8000d58 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000e72:	200a      	movs	r0, #10
 8000e74:	f7ff ff56 	bl	8000d24 <__NVIC_EnableIRQ>

}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <LL_AHB1_GRP1_EnableClock>:
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e8a:	6959      	ldr	r1, [r3, #20]
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b004      	add	sp, #16
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000

08000eac <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <LL_SYSCFG_SetEXTISource+0x48>)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	21ff      	movs	r1, #255	; 0xff
 8000ebc:	400b      	ands	r3, r1
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	589b      	ldr	r3, [r3, r2]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	0c12      	lsrs	r2, r2, #16
 8000ec8:	210f      	movs	r1, #15
 8000eca:	4091      	lsls	r1, r2
 8000ecc:	000a      	movs	r2, r1
 8000ece:	43d2      	mvns	r2, r2
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	0011      	movs	r1, r2
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	0c1b      	lsrs	r3, r3, #16
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	409a      	lsls	r2, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <LL_SYSCFG_SetEXTISource+0x48>)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	24ff      	movs	r4, #255	; 0xff
 8000ee2:	4023      	ands	r3, r4
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	501a      	str	r2, [r3, r0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b003      	add	sp, #12
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	40010000 	.word	0x40010000

08000ef8 <LL_GPIO_SetPinMode>:
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6819      	ldr	r1, [r3, #0]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	435b      	muls	r3, r3
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	189b      	adds	r3, r3, r2
 8000f14:	43db      	mvns	r3, r3
 8000f16:	400b      	ands	r3, r1
 8000f18:	001a      	movs	r2, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	435b      	muls	r3, r3
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	434b      	muls	r3, r1
 8000f22:	431a      	orrs	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b004      	add	sp, #16
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <LL_GPIO_SetPinPull>:
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68d9      	ldr	r1, [r3, #12]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	435b      	muls	r3, r3
 8000f44:	001a      	movs	r2, r3
 8000f46:	0013      	movs	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	189b      	adds	r3, r3, r2
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	400b      	ands	r3, r1
 8000f50:	001a      	movs	r2, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	435b      	muls	r3, r3
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	434b      	muls	r3, r1
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	60da      	str	r2, [r3, #12]
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <LL_GPIO_SetOutputPin>:
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	619a      	str	r2, [r3, #24]
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LL_GPIO_ResetOutputPin>:
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f9e:	2418      	movs	r4, #24
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	001a      	movs	r2, r3
 8000fa8:	2100      	movs	r1, #0
 8000faa:	f002 fc4a 	bl	8003842 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	003b      	movs	r3, r7
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	2318      	movs	r3, #24
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	f002 fc43 	bl	8003842 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	031b      	lsls	r3, r3, #12
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	029b      	lsls	r3, r3, #10
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff ff58 	bl	8000e80 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(ENABLE_GPIO_Port, ENABLE_Pin);
 8000fd0:	4b64      	ldr	r3, [pc, #400]	; (8001164 <MX_GPIO_Init+0x1cc>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff ffc7 	bl	8000f68 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DIR_0_GPIO_Port, DIR_0_Pin);
 8000fda:	4b62      	ldr	r3, [pc, #392]	; (8001164 <MX_GPIO_Init+0x1cc>)
 8000fdc:	2102      	movs	r1, #2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff ffce 	bl	8000f80 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);
 8000fe4:	4b5f      	ldr	r3, [pc, #380]	; (8001164 <MX_GPIO_Init+0x1cc>)
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff ffc9 	bl	8000f80 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DIR_2_GPIO_Port, DIR_2_Pin);
 8000fee:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <MX_GPIO_Init+0x1cc>)
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff ffc4 	bl	8000f80 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD4_GPIO_Port, LD4_Pin);
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4a59      	ldr	r2, [pc, #356]	; (8001164 <MX_GPIO_Init+0x1cc>)
 8000ffe:	0019      	movs	r1, r3
 8001000:	0010      	movs	r0, r2
 8001002:	f7ff ffbd 	bl	8000f80 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <MX_GPIO_Init+0x1cc>)
 800100c:	0019      	movs	r1, r3
 800100e:	0010      	movs	r0, r2
 8001010:	f7ff ffb6 	bl	8000f80 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001014:	003b      	movs	r3, r7
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800101a:	003b      	movs	r3, r7
 800101c:	2201      	movs	r2, #1
 800101e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001020:	003b      	movs	r3, r7
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001026:	003b      	movs	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800102c:	003b      	movs	r3, r7
 800102e:	2201      	movs	r2, #1
 8001030:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001032:	003b      	movs	r3, r7
 8001034:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <MX_GPIO_Init+0x1cc>)
 8001036:	0019      	movs	r1, r3
 8001038:	0010      	movs	r0, r2
 800103a:	f001 fd8f 	bl	8002b5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DIR_0_Pin;
 800103e:	003b      	movs	r3, r7
 8001040:	2202      	movs	r2, #2
 8001042:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001044:	003b      	movs	r3, r7
 8001046:	2201      	movs	r2, #1
 8001048:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800104a:	003b      	movs	r3, r7
 800104c:	2203      	movs	r2, #3
 800104e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001050:	003b      	movs	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001056:	003b      	movs	r3, r7
 8001058:	2202      	movs	r2, #2
 800105a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DIR_0_GPIO_Port, &GPIO_InitStruct);
 800105c:	003b      	movs	r3, r7
 800105e:	4a41      	ldr	r2, [pc, #260]	; (8001164 <MX_GPIO_Init+0x1cc>)
 8001060:	0019      	movs	r1, r3
 8001062:	0010      	movs	r0, r2
 8001064:	f001 fd7a 	bl	8002b5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DIR_1_Pin;
 8001068:	003b      	movs	r3, r7
 800106a:	2204      	movs	r2, #4
 800106c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800106e:	003b      	movs	r3, r7
 8001070:	2201      	movs	r2, #1
 8001072:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001074:	003b      	movs	r3, r7
 8001076:	2203      	movs	r2, #3
 8001078:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800107a:	003b      	movs	r3, r7
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001080:	003b      	movs	r3, r7
 8001082:	2202      	movs	r2, #2
 8001084:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 8001086:	003b      	movs	r3, r7
 8001088:	4a36      	ldr	r2, [pc, #216]	; (8001164 <MX_GPIO_Init+0x1cc>)
 800108a:	0019      	movs	r1, r3
 800108c:	0010      	movs	r0, r2
 800108e:	f001 fd65 	bl	8002b5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DIR_2_Pin;
 8001092:	003b      	movs	r3, r7
 8001094:	2208      	movs	r2, #8
 8001096:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001098:	003b      	movs	r3, r7
 800109a:	2201      	movs	r2, #1
 800109c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800109e:	003b      	movs	r3, r7
 80010a0:	2203      	movs	r2, #3
 80010a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010a4:	003b      	movs	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80010aa:	003b      	movs	r3, r7
 80010ac:	2202      	movs	r2, #2
 80010ae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DIR_2_GPIO_Port, &GPIO_InitStruct);
 80010b0:	003b      	movs	r3, r7
 80010b2:	4a2c      	ldr	r2, [pc, #176]	; (8001164 <MX_GPIO_Init+0x1cc>)
 80010b4:	0019      	movs	r1, r3
 80010b6:	0010      	movs	r0, r2
 80010b8:	f001 fd50 	bl	8002b5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin;
 80010bc:	003b      	movs	r3, r7
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	0052      	lsls	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010c4:	003b      	movs	r3, r7
 80010c6:	2201      	movs	r2, #1
 80010c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010ca:	003b      	movs	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010d0:	003b      	movs	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010d6:	003b      	movs	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80010dc:	003b      	movs	r3, r7
 80010de:	4a21      	ldr	r2, [pc, #132]	; (8001164 <MX_GPIO_Init+0x1cc>)
 80010e0:	0019      	movs	r1, r3
 80010e2:	0010      	movs	r0, r2
 80010e4:	f001 fd3a 	bl	8002b5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 80010e8:	003b      	movs	r3, r7
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010f0:	003b      	movs	r3, r7
 80010f2:	2201      	movs	r2, #1
 80010f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010f6:	003b      	movs	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fc:	003b      	movs	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001102:	003b      	movs	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001108:	003b      	movs	r3, r7
 800110a:	4a16      	ldr	r2, [pc, #88]	; (8001164 <MX_GPIO_Init+0x1cc>)
 800110c:	0019      	movs	r1, r3
 800110e:	0010      	movs	r0, r2
 8001110:	f001 fd24 	bl	8002b5c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8001114:	2100      	movs	r1, #0
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fec8 	bl	8000eac <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800111c:	2390      	movs	r3, #144	; 0x90
 800111e:	05db      	lsls	r3, r3, #23
 8001120:	2200      	movs	r2, #0
 8001122:	2101      	movs	r1, #1
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff ff03 	bl	8000f30 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800112a:	2390      	movs	r3, #144	; 0x90
 800112c:	05db      	lsls	r3, r3, #23
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	0018      	movs	r0, r3
 8001134:	f7ff fee0 	bl	8000ef8 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001138:	0021      	movs	r1, r4
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2201      	movs	r2, #1
 8001144:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2201      	movs	r2, #1
 800114a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2201      	movs	r2, #1
 8001150:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001152:	187b      	adds	r3, r7, r1
 8001154:	0018      	movs	r0, r3
 8001156:	f001 fbbf 	bl	80028d8 <LL_EXTI_Init>

}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b009      	add	sp, #36	; 0x24
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	48000800 	.word	0x48000800

08001168 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <LL_RCC_HSI_Enable+0x18>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <LL_RCC_HSI_Enable+0x18>)
 8001172:	2101      	movs	r1, #1
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	40021000 	.word	0x40021000

08001184 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <LL_RCC_HSI_IsReady+0x1c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2202      	movs	r2, #2
 800118e:	4013      	ands	r3, r2
 8001190:	3b02      	subs	r3, #2
 8001192:	425a      	negs	r2, r3
 8001194:	4153      	adcs	r3, r2
 8001196:	b2db      	uxtb	r3, r3
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	40021000 	.word	0x40021000

080011a4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	22f8      	movs	r2, #248	; 0xf8
 80011b2:	4393      	bics	r3, r2
 80011b4:	0019      	movs	r1, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	00da      	lsls	r2, r3, #3
 80011ba:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000

080011cc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <LL_RCC_SetSysClkSource+0x24>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2203      	movs	r2, #3
 80011da:	4393      	bics	r3, r2
 80011dc:	0019      	movs	r1, r3
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <LL_RCC_SetSysClkSource+0x24>)
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	605a      	str	r2, [r3, #4]
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	40021000 	.word	0x40021000

080011f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <LL_RCC_GetSysClkSource+0x14>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	220c      	movs	r2, #12
 80011fe:	4013      	ands	r3, r2
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	40021000 	.word	0x40021000

0800120c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <LL_RCC_SetAHBPrescaler+0x24>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	22f0      	movs	r2, #240	; 0xf0
 800121a:	4393      	bics	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <LL_RCC_SetAHBPrescaler+0x24>)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	430a      	orrs	r2, r1
 8001224:	605a      	str	r2, [r3, #4]
}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	40021000 	.word	0x40021000

08001234 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <LL_RCC_SetAPB1Prescaler+0x24>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <LL_RCC_SetAPB1Prescaler+0x28>)
 8001242:	4013      	ands	r3, r2
 8001244:	0019      	movs	r1, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	430a      	orrs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	b002      	add	sp, #8
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	40021000 	.word	0x40021000
 800125c:	fffff8ff 	.word	0xfffff8ff

08001260 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <LL_RCC_SetUSARTClockSource+0x30>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	0e12      	lsrs	r2, r2, #24
 8001270:	2103      	movs	r1, #3
 8001272:	4091      	lsls	r1, r2
 8001274:	000a      	movs	r2, r1
 8001276:	43d2      	mvns	r2, r2
 8001278:	401a      	ands	r2, r3
 800127a:	0011      	movs	r1, r2
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	0a1a      	lsrs	r2, r3, #8
 8001282:	4b03      	ldr	r3, [pc, #12]	; (8001290 <LL_RCC_SetUSARTClockSource+0x30>)
 8001284:	430a      	orrs	r2, r1
 8001286:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000

08001294 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <LL_RCC_PLL_Enable+0x18>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <LL_RCC_PLL_Enable+0x18>)
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	0449      	lsls	r1, r1, #17
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000

080012b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <LL_RCC_PLL_IsReady+0x24>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	049b      	lsls	r3, r3, #18
 80012bc:	4013      	ands	r3, r2
 80012be:	22fe      	movs	r2, #254	; 0xfe
 80012c0:	0612      	lsls	r2, r2, #24
 80012c2:	4694      	mov	ip, r2
 80012c4:	4463      	add	r3, ip
 80012c6:	425a      	negs	r2, r3
 80012c8:	4153      	adcs	r3, r2
 80012ca:	b2db      	uxtb	r3, r3
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	40021000 	.word	0x40021000

080012d8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	0019      	movs	r1, r3
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	401a      	ands	r2, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	220f      	movs	r2, #15
 8001304:	4393      	bics	r3, r2
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	220f      	movs	r2, #15
 800130c:	401a      	ands	r2, r3
 800130e:	4b03      	ldr	r3, [pc, #12]	; (800131c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001310:	430a      	orrs	r2, r1
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b002      	add	sp, #8
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	ffc2ffff 	.word	0xffc2ffff

08001324 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <LL_APB1_GRP1_EnableClock+0x28>)
 800132e:	69d9      	ldr	r1, [r3, #28]
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <LL_APB1_GRP1_EnableClock+0x28>)
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	430a      	orrs	r2, r1
 8001336:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <LL_APB1_GRP1_EnableClock+0x28>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4013      	ands	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b004      	add	sp, #16
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000

08001350 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <LL_APB1_GRP2_EnableClock+0x28>)
 800135a:	6999      	ldr	r1, [r3, #24]
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <LL_APB1_GRP2_EnableClock+0x28>)
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	430a      	orrs	r2, r1
 8001362:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <LL_APB1_GRP2_EnableClock+0x28>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000

0800137c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <LL_FLASH_SetLatency+0x24>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2201      	movs	r2, #1
 800138a:	4393      	bics	r3, r2
 800138c:	0019      	movs	r1, r3
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <LL_FLASH_SetLatency+0x24>)
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	40022000 	.word	0x40022000

080013a4 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <LL_FLASH_GetLatency+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4013      	ands	r3, r2
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	40022000 	.word	0x40022000

080013bc <LL_TIM_DisableCounter>:
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4393      	bics	r3, r2
 80013cc:	001a      	movs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	601a      	str	r2, [r3, #0]
}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}

080013da <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2202      	movs	r2, #2
 80013e6:	4252      	negs	r2, r2
 80013e8:	611a      	str	r2, [r3, #16]
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2201      	movs	r2, #1
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60da      	str	r2, [r3, #12]
}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}

0800140e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2220      	movs	r2, #32
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b002      	add	sp, #8
 8001428:	bd80      	pop	{r7, pc}

0800142a <LL_GPIO_SetOutputPin>:
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}

08001442 <LL_GPIO_ResetOutputPin>:
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <ErrorActions>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ErrorActions () {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  LL_GPIO_ResetOutputPin (LD3_GPIO_Port, LD3_Pin);
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <ErrorActions+0x68>)
 8001466:	0019      	movs	r1, r3
 8001468:	0010      	movs	r0, r2
 800146a:	f7ff ffea 	bl	8001442 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin (LD4_GPIO_Port, LD4_Pin);
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <ErrorActions+0x68>)
 8001474:	0019      	movs	r1, r3
 8001476:	0010      	movs	r0, r2
 8001478:	f7ff ffe3 	bl	8001442 <LL_GPIO_ResetOutputPin>

  while (1) {  
    LL_GPIO_SetOutputPin (LD3_GPIO_Port, LD3_Pin);
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <ErrorActions+0x68>)
 8001482:	0019      	movs	r1, r3
 8001484:	0010      	movs	r0, r2
 8001486:	f7ff ffd0 	bl	800142a <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin (LD4_GPIO_Port, LD4_Pin);
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <ErrorActions+0x68>)
 8001490:	0019      	movs	r1, r3
 8001492:	0010      	movs	r0, r2
 8001494:	f7ff ffc9 	bl	800142a <LL_GPIO_SetOutputPin>
    LL_mDelay (200);
 8001498:	20c8      	movs	r0, #200	; 0xc8
 800149a:	f002 f96f 	bl	800377c <LL_mDelay>

    LL_GPIO_ResetOutputPin (LD3_GPIO_Port, LD3_Pin);
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <ErrorActions+0x68>)
 80014a4:	0019      	movs	r1, r3
 80014a6:	0010      	movs	r0, r2
 80014a8:	f7ff ffcb 	bl	8001442 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin (LD4_GPIO_Port, LD4_Pin);
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <ErrorActions+0x68>)
 80014b2:	0019      	movs	r1, r3
 80014b4:	0010      	movs	r0, r2
 80014b6:	f7ff ffc4 	bl	8001442 <LL_GPIO_ResetOutputPin>
    LL_mDelay (200);
 80014ba:	20c8      	movs	r0, #200	; 0xc8
 80014bc:	f002 f95e 	bl	800377c <LL_mDelay>
    LL_GPIO_SetOutputPin (LD3_GPIO_Port, LD3_Pin);
 80014c0:	e7dc      	b.n	800147c <ErrorActions+0x20>
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	48000800 	.word	0x48000800

080014c8 <PrepareTimes>:
  }
}

void PrepareTimes () {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  LL_TIM_DisableCounter (SM_DRIVER_TIMER);
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <PrepareTimes+0x38>)
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff ff74 	bl	80013bc <LL_TIM_DisableCounter>
  LL_TIM_DisableCounter (TIM2);
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	05db      	lsls	r3, r3, #23
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff ff6f 	bl	80013bc <LL_TIM_DisableCounter>
  
  LL_TIM_ClearFlag_UPDATE (SM_DRIVER_TIMER);
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <PrepareTimes+0x38>)
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ff7a 	bl	80013da <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_ClearFlag_UPDATE (TIM2);
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff ff75 	bl	80013da <LL_TIM_ClearFlag_UPDATE>

  LL_TIM_EnableIT_UPDATE (SM_DRIVER_TIMER);
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <PrepareTimes+0x38>)
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff ff7d 	bl	80013f2 <LL_TIM_EnableIT_UPDATE>
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	40001000 	.word	0x40001000

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff ff20 	bl	8001350 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	055b      	lsls	r3, r3, #21
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff ff05 	bl	8001324 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f865 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f7ff fd3b 	bl	8000f98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001522:	f7ff fc9d 	bl	8000e60 <MX_DMA_Init>
  MX_TIM6_Init();
 8001526:	f000 fcab 	bl	8001e80 <MX_TIM6_Init>
  MX_TIM2_Init();
 800152a:	f000 fbae 	bl	8001c8a <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800152e:	f001 f83b 	bl	80025a8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LL_USART_EnableIT_RXNE(USART1);
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <main+0xc8>)
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff ff6a 	bl	800140e <LL_USART_EnableIT_RXNE>
  
  if (InitializeDriverStepMotors () == -1)
 800153a:	f7ff fb13 	bl	8000b64 <InitializeDriverStepMotors>
 800153e:	0003      	movs	r3, r0
 8001540:	3301      	adds	r3, #1
 8001542:	d101      	bne.n	8001548 <main+0x44>
    ErrorActions ();
 8001544:	f7ff ff8a 	bl	800145c <ErrorActions>

  PrepareTimes ();
 8001548:	f7ff ffbe 	bl	80014c8 <PrepareTimes>

  SM_Driver_Enable_Step_Motors ();
 800154c:	f7ff faba 	bl	8000ac4 <SM_Driver_Enable_Step_Motors>
  for (int i = 0; i < 3*0; ++i) {
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	e019      	b.n	800158a <main+0x86>
    AxisRotate (0, +PI_HALF_URAD, 1000 * 500);
 8001556:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <main+0xcc>)
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <main+0xd0>)
 800155a:	0019      	movs	r1, r3
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff fb95 	bl	8000c8c <AxisRotate>
    AxisRotate (1, -PI_HALF_URAD / 8, 1000 * 500);
 8001562:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <main+0xcc>)
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <main+0xd4>)
 8001566:	0019      	movs	r1, r3
 8001568:	2001      	movs	r0, #1
 800156a:	f7ff fb8f 	bl	8000c8c <AxisRotate>
    LL_mDelay (1000);
 800156e:	23fa      	movs	r3, #250	; 0xfa
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	0018      	movs	r0, r3
 8001574:	f002 f902 	bl	800377c <LL_mDelay>
    AxisRotate (2, PI_HALF_URAD / 4, 1000 * 500);
 8001578:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <main+0xcc>)
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <main+0xd8>)
 800157c:	0019      	movs	r1, r3
 800157e:	2002      	movs	r0, #2
 8001580:	f7ff fb84 	bl	8000c8c <AxisRotate>
  for (int i = 0; i < 3*0; ++i) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3301      	adds	r3, #1
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	dbe2      	blt.n	8001556 <main+0x52>
  }
  AxisRotate (1, PI_HALF_URAD, 1000 * 500);
 8001590:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <main+0xcc>)
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <main+0xd0>)
 8001594:	0019      	movs	r1, r3
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff fb78 	bl	8000c8c <AxisRotate>
  	//UART_RX(rx_buff, RX_BUFF_SIZE);

    //UART_TX(tx_buff, TX_BUFF_SIZE);


    LL_GPIO_SetOutputPin (LD4_GPIO_Port, LD4_Pin);
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <main+0xdc>)
 80015a2:	0019      	movs	r1, r3
 80015a4:	0010      	movs	r0, r2
 80015a6:	f7ff ff40 	bl	800142a <LL_GPIO_SetOutputPin>
    LL_mDelay (1500);
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <main+0xe0>)
 80015ac:	0018      	movs	r0, r3
 80015ae:	f002 f8e5 	bl	800377c <LL_mDelay>

    //AxisRotate (0, +PI_HALF_URAD, 1000 * 1000);
    //AxisRotate (1, +PI_HALF_URAD, 1000 * 1000);

    LL_GPIO_ResetOutputPin (LD4_GPIO_Port, LD4_Pin);
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <main+0xdc>)
 80015b8:	0019      	movs	r1, r3
 80015ba:	0010      	movs	r0, r2
 80015bc:	f7ff ff41 	bl	8001442 <LL_GPIO_ResetOutputPin>
    LL_mDelay (1500);
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <main+0xe0>)
 80015c2:	0018      	movs	r0, r3
 80015c4:	f002 f8da 	bl	800377c <LL_mDelay>
    LL_GPIO_SetOutputPin (LD4_GPIO_Port, LD4_Pin);
 80015c8:	e7e8      	b.n	800159c <main+0x98>
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	40013800 	.word	0x40013800
 80015d0:	0007a120 	.word	0x0007a120
 80015d4:	0017f7ec 	.word	0x0017f7ec
 80015d8:	fffd0103 	.word	0xfffd0103
 80015dc:	0005fdfb 	.word	0x0005fdfb
 80015e0:	48000800 	.word	0x48000800
 80015e4:	000005dc 	.word	0x000005dc

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff fec5 	bl	800137c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	f7ff fed6 	bl	80013a4 <LL_FLASH_GetLatency>
 80015f8:	0003      	movs	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d1fa      	bne.n	80015f4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80015fe:	f7ff fdb3 	bl	8001168 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	f7ff fdbe 	bl	8001184 <LL_RCC_HSI_IsReady>
 8001608:	0003      	movs	r3, r0
 800160a:	2b01      	cmp	r3, #1
 800160c:	d1fa      	bne.n	8001604 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800160e:	2010      	movs	r0, #16
 8001610:	f7ff fdc8 	bl	80011a4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
 8001614:	23a0      	movs	r3, #160	; 0xa0
 8001616:	039b      	lsls	r3, r3, #14
 8001618:	0019      	movs	r1, r3
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff fe5c 	bl	80012d8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001620:	f7ff fe38 	bl	8001294 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	f7ff fe43 	bl	80012b0 <LL_RCC_PLL_IsReady>
 800162a:	0003      	movs	r3, r0
 800162c:	2b01      	cmp	r3, #1
 800162e:	d1fa      	bne.n	8001626 <SystemClock_Config+0x3e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fdeb 	bl	800120c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fdfc 	bl	8001234 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff fdc5 	bl	80011cc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	f7ff fdd6 	bl	80011f4 <LL_RCC_GetSysClkSource>
 8001648:	0003      	movs	r3, r0
 800164a:	2b08      	cmp	r3, #8
 800164c:	d1fa      	bne.n	8001644 <SystemClock_Config+0x5c>
  {

  }
  LL_Init1msTick(48000000);
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <SystemClock_Config+0x84>)
 8001650:	0018      	movs	r0, r3
 8001652:	f002 f883 	bl	800375c <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <SystemClock_Config+0x84>)
 8001658:	0018      	movs	r0, r3
 800165a:	f002 f8b1 	bl	80037c0 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fdfe 	bl	8001260 <LL_RCC_SetUSARTClockSource>
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	02dc6c00 	.word	0x02dc6c00

08001670 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <LL_DMA_DisableChannel+0x38>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	001a      	movs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	18d3      	adds	r3, r2, r3
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	3b01      	subs	r3, #1
 800168e:	4906      	ldr	r1, [pc, #24]	; (80016a8 <LL_DMA_DisableChannel+0x38>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	0019      	movs	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	18cb      	adds	r3, r1, r3
 8001698:	2101      	movs	r1, #1
 800169a:	438a      	bics	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	080038dc 	.word	0x080038dc

080016ac <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2220      	movs	r2, #32
 80016ba:	4013      	ands	r3, r2
 80016bc:	3b20      	subs	r3, #32
 80016be:	425a      	negs	r2, r3
 80016c0:	4153      	adcs	r3, r2
 80016c2:	b2db      	uxtb	r3, r3
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <LL_DMA_IsActiveFlag_TC3+0x28>)
 80016e0:	4694      	mov	ip, r2
 80016e2:	4463      	add	r3, ip
 80016e4:	425a      	negs	r2, r3
 80016e6:	4153      	adcs	r3, r2
 80016e8:	b2db      	uxtb	r3, r3
}
 80016ea:	0018      	movs	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b002      	add	sp, #8
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	fffffe00 	.word	0xfffffe00

080016f8 <LL_DMA_IsActiveFlag_TE2>:
  * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	4013      	ands	r3, r2
 8001708:	3b80      	subs	r3, #128	; 0x80
 800170a:	425a      	negs	r2, r3
 800170c:	4153      	adcs	r3, r2
 800170e:	b2db      	uxtb	r3, r3
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b002      	add	sp, #8
 8001716:	bd80      	pop	{r7, pc}

08001718 <LL_DMA_IsActiveFlag_TE3>:
  * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4013      	ands	r3, r2
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <LL_DMA_IsActiveFlag_TE3+0x28>)
 800172c:	4694      	mov	ip, r2
 800172e:	4463      	add	r3, ip
 8001730:	425a      	negs	r2, r3
 8001732:	4153      	adcs	r3, r2
 8001734:	b2db      	uxtb	r3, r3
}
 8001736:	0018      	movs	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	fffff800 	.word	0xfffff800

08001744 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	605a      	str	r2, [r3, #4]
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}

0800175a <LL_DMA_ClearFlag_TC3>:
  * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	605a      	str	r2, [r3, #4]
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}

08001772 <LL_TIM_ClearFlag_UPDATE>:
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2202      	movs	r2, #2
 800177e:	4252      	negs	r2, r2
 8001780:	611a      	str	r2, [r3, #16]
}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}

0800178a <LL_TIM_IsActiveFlag_UPDATE>:
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2201      	movs	r2, #1
 8001798:	4013      	ands	r3, r2
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LL_USART_IsActiveFlag_RXNE>:
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2220      	movs	r2, #32
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b20      	cmp	r3, #32
 80017be:	d101      	bne.n	80017c4 <LL_USART_IsActiveFlag_RXNE+0x18>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <LL_USART_IsActiveFlag_RXNE+0x1a>
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}

080017ce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <NMI_Handler+0x4>

080017d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <HardFault_Handler+0x4>

080017da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
  if(LL_DMA_IsActiveFlag_TC2(DMA1))
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <DMA1_Channel2_3_IRQHandler+0x80>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f7ff ff54 	bl	80016ac <LL_DMA_IsActiveFlag_TC2>
 8001804:	1e03      	subs	r3, r0, #0
 8001806:	d006      	beq.n	8001816 <DMA1_Channel2_3_IRQHandler+0x1e>
  {
    LL_DMA_ClearFlag_TC2(DMA1);
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <DMA1_Channel2_3_IRQHandler+0x80>)
 800180a:	0018      	movs	r0, r3
 800180c:	f7ff ff9a 	bl	8001744 <LL_DMA_ClearFlag_TC2>
    DMA1_TransmitComplete();
 8001810:	f000 fe16 	bl	8002440 <DMA1_TransmitComplete>
 8001814:	e00f      	b.n	8001836 <DMA1_Channel2_3_IRQHandler+0x3e>
  }
  else if(LL_DMA_IsActiveFlag_TE2(DMA1))
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001818:	0018      	movs	r0, r3
 800181a:	f7ff ff6d 	bl	80016f8 <LL_DMA_IsActiveFlag_TE2>
 800181e:	1e03      	subs	r3, r0, #0
 8001820:	d009      	beq.n	8001836 <DMA1_Channel2_3_IRQHandler+0x3e>
  {
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001824:	2102      	movs	r1, #2
 8001826:	0018      	movs	r0, r3
 8001828:	f7ff ff22 	bl	8001670 <LL_DMA_DisableChannel>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <DMA1_Channel2_3_IRQHandler+0x80>)
 800182e:	2103      	movs	r1, #3
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff ff1d 	bl	8001670 <LL_DMA_DisableChannel>
  }

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */
  if(LL_DMA_IsActiveFlag_TC3(DMA1))
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff ff47 	bl	80016cc <LL_DMA_IsActiveFlag_TC3>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d006      	beq.n	8001850 <DMA1_Channel2_3_IRQHandler+0x58>
  {
    LL_DMA_ClearFlag_TC3(DMA1);
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff ff88 	bl	800175a <LL_DMA_ClearFlag_TC3>
    DMA1_RecieveComplete();
 800184a:	f000 fdef 	bl	800242c <DMA1_RecieveComplete>
  {
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
  }
  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800184e:	e00f      	b.n	8001870 <DMA1_Channel2_3_IRQHandler+0x78>
  else if(LL_DMA_IsActiveFlag_TE3(DMA1))
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001852:	0018      	movs	r0, r3
 8001854:	f7ff ff60 	bl	8001718 <LL_DMA_IsActiveFlag_TE3>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d009      	beq.n	8001870 <DMA1_Channel2_3_IRQHandler+0x78>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <DMA1_Channel2_3_IRQHandler+0x80>)
 800185e:	2102      	movs	r1, #2
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff ff05 	bl	8001670 <LL_DMA_DisableChannel>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001868:	2103      	movs	r1, #3
 800186a:	0018      	movs	r0, r3
 800186c:	f7ff ff00 	bl	8001670 <LL_DMA_DisableChannel>
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	40020000 	.word	0x40020000

0800187c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  
  if (LL_TIM_IsActiveFlag_UPDATE (SM_DRIVER_TIMER)) {
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <TIM6_DAC_IRQHandler+0x24>)
 8001882:	0018      	movs	r0, r3
 8001884:	f7ff ff81 	bl	800178a <LL_TIM_IsActiveFlag_UPDATE>
 8001888:	1e03      	subs	r3, r0, #0
 800188a:	d005      	beq.n	8001898 <TIM6_DAC_IRQHandler+0x1c>
    LL_TIM_ClearFlag_UPDATE (SM_DRIVER_TIMER);
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <TIM6_DAC_IRQHandler+0x24>)
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff ff6f 	bl	8001772 <LL_TIM_ClearFlag_UPDATE>

    ST_Step_Driver ();
 8001894:	f7fe ff48 	bl	8000728 <ST_Step_Driver>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	40001000 	.word	0x40001000

080018a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1))
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <USART1_IRQHandler+0x2c>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7ff ff7e 	bl	80017ac <LL_USART_IsActiveFlag_RXNE>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d009      	beq.n	80018c8 <USART1_IRQHandler+0x24>
	{
	//LL_USART_ClearFlag_RXNE (USART1); Cleared with reading!

	UART_RX(rx_buff, 4 * 5);
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <USART1_IRQHandler+0x30>)
 80018b6:	2114      	movs	r1, #20
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 fdcb 	bl	8002454 <UART_RX>

	UART_RX_Handler(rx_buff, 4 * 5);
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <USART1_IRQHandler+0x30>)
 80018c0:	2114      	movs	r1, #20
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 fe04 	bl	80024d0 <UART_RX_Handler>
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	40013800 	.word	0x40013800
 80018d4:	200000f4 	.word	0x200000f4

080018d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <__NVIC_EnableIRQ>:
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	0002      	movs	r2, r0
 80018ec:	1dfb      	adds	r3, r7, #7
 80018ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b7f      	cmp	r3, #127	; 0x7f
 80018f6:	d809      	bhi.n	800190c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f8:	1dfb      	adds	r3, r7, #7
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	001a      	movs	r2, r3
 80018fe:	231f      	movs	r3, #31
 8001900:	401a      	ands	r2, r3
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <__NVIC_EnableIRQ+0x30>)
 8001904:	2101      	movs	r1, #1
 8001906:	4091      	lsls	r1, r2
 8001908:	000a      	movs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	0002      	movs	r2, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b7f      	cmp	r3, #127	; 0x7f
 800192c:	d828      	bhi.n	8001980 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800192e:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <__NVIC_SetPriority+0xd4>)
 8001930:	1dfb      	adds	r3, r7, #7
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b25b      	sxtb	r3, r3
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	33c0      	adds	r3, #192	; 0xc0
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	589b      	ldr	r3, [r3, r2]
 800193e:	1dfa      	adds	r2, r7, #7
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	0011      	movs	r1, r2
 8001944:	2203      	movs	r2, #3
 8001946:	400a      	ands	r2, r1
 8001948:	00d2      	lsls	r2, r2, #3
 800194a:	21ff      	movs	r1, #255	; 0xff
 800194c:	4091      	lsls	r1, r2
 800194e:	000a      	movs	r2, r1
 8001950:	43d2      	mvns	r2, r2
 8001952:	401a      	ands	r2, r3
 8001954:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	019b      	lsls	r3, r3, #6
 800195a:	22ff      	movs	r2, #255	; 0xff
 800195c:	401a      	ands	r2, r3
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	0018      	movs	r0, r3
 8001964:	2303      	movs	r3, #3
 8001966:	4003      	ands	r3, r0
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800196c:	481f      	ldr	r0, [pc, #124]	; (80019ec <__NVIC_SetPriority+0xd4>)
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b25b      	sxtb	r3, r3
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	430a      	orrs	r2, r1
 8001978:	33c0      	adds	r3, #192	; 0xc0
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	501a      	str	r2, [r3, r0]
}
 800197e:	e031      	b.n	80019e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001980:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <__NVIC_SetPriority+0xd8>)
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	0019      	movs	r1, r3
 8001988:	230f      	movs	r3, #15
 800198a:	400b      	ands	r3, r1
 800198c:	3b08      	subs	r3, #8
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3306      	adds	r3, #6
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	3304      	adds	r3, #4
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	1dfa      	adds	r2, r7, #7
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	0011      	movs	r1, r2
 80019a0:	2203      	movs	r2, #3
 80019a2:	400a      	ands	r2, r1
 80019a4:	00d2      	lsls	r2, r2, #3
 80019a6:	21ff      	movs	r1, #255	; 0xff
 80019a8:	4091      	lsls	r1, r2
 80019aa:	000a      	movs	r2, r1
 80019ac:	43d2      	mvns	r2, r2
 80019ae:	401a      	ands	r2, r3
 80019b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	019b      	lsls	r3, r3, #6
 80019b6:	22ff      	movs	r2, #255	; 0xff
 80019b8:	401a      	ands	r2, r3
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	0018      	movs	r0, r3
 80019c0:	2303      	movs	r3, #3
 80019c2:	4003      	ands	r3, r0
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c8:	4809      	ldr	r0, [pc, #36]	; (80019f0 <__NVIC_SetPriority+0xd8>)
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	001c      	movs	r4, r3
 80019d0:	230f      	movs	r3, #15
 80019d2:	4023      	ands	r3, r4
 80019d4:	3b08      	subs	r3, #8
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	430a      	orrs	r2, r1
 80019da:	3306      	adds	r3, #6
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	18c3      	adds	r3, r0, r3
 80019e0:	3304      	adds	r3, #4
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b003      	add	sp, #12
 80019ea:	bd90      	pop	{r4, r7, pc}
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <LL_AHB1_GRP1_EnableClock>:
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x28>)
 80019fe:	6959      	ldr	r1, [r3, #20]
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x28>)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x28>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b004      	add	sp, #16
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000

08001a20 <LL_APB1_GRP1_EnableClock>:
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <LL_APB1_GRP1_EnableClock+0x28>)
 8001a2a:	69d9      	ldr	r1, [r3, #28]
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <LL_APB1_GRP1_EnableClock+0x28>)
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <LL_APB1_GRP1_EnableClock+0x28>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b004      	add	sp, #16
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000

08001a4c <LL_TIM_SetOnePulseMode>:
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	4393      	bics	r3, r2
 8001a5e:	001a      	movs	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <LL_TIM_DisableARRPreload>:
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	4393      	bics	r3, r2
 8001a80:	001a      	movs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]
}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <LL_TIM_OC_DisableFast>:
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d01e      	beq.n	8001ade <LL_TIM_OC_DisableFast+0x4e>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d019      	beq.n	8001ada <LL_TIM_OC_DisableFast+0x4a>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	d014      	beq.n	8001ad6 <LL_TIM_OC_DisableFast+0x46>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b40      	cmp	r3, #64	; 0x40
 8001ab0:	d00f      	beq.n	8001ad2 <LL_TIM_OC_DisableFast+0x42>
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d008      	beq.n	8001ace <LL_TIM_OC_DisableFast+0x3e>
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d101      	bne.n	8001aca <LL_TIM_OC_DisableFast+0x3a>
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	e00a      	b.n	8001ae0 <LL_TIM_OC_DisableFast+0x50>
 8001aca:	2306      	movs	r3, #6
 8001acc:	e008      	b.n	8001ae0 <LL_TIM_OC_DisableFast+0x50>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <LL_TIM_OC_DisableFast+0x50>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <LL_TIM_OC_DisableFast+0x50>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <LL_TIM_OC_DisableFast+0x50>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <LL_TIM_OC_DisableFast+0x50>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	200f      	movs	r0, #15
 8001ae2:	183a      	adds	r2, r7, r0
 8001ae4:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3318      	adds	r3, #24
 8001aea:	0019      	movs	r1, r3
 8001aec:	183b      	adds	r3, r7, r0
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <LL_TIM_OC_DisableFast+0x8c>)
 8001af2:	5cd3      	ldrb	r3, [r2, r3]
 8001af4:	18cb      	adds	r3, r1, r3
 8001af6:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	183a      	adds	r2, r7, r0
 8001afe:	7812      	ldrb	r2, [r2, #0]
 8001b00:	4907      	ldr	r1, [pc, #28]	; (8001b20 <LL_TIM_OC_DisableFast+0x90>)
 8001b02:	5c8a      	ldrb	r2, [r1, r2]
 8001b04:	0011      	movs	r1, r2
 8001b06:	2204      	movs	r2, #4
 8001b08:	408a      	lsls	r2, r1
 8001b0a:	43d2      	mvns	r2, r2
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	601a      	str	r2, [r3, #0]
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b004      	add	sp, #16
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	080038fc 	.word	0x080038fc
 8001b20:	08003904 	.word	0x08003904

08001b24 <LL_TIM_OC_EnablePreload>:
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d01e      	beq.n	8001b72 <LL_TIM_OC_EnablePreload+0x4e>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d019      	beq.n	8001b6e <LL_TIM_OC_EnablePreload+0x4a>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d014      	beq.n	8001b6a <LL_TIM_OC_EnablePreload+0x46>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d00f      	beq.n	8001b66 <LL_TIM_OC_EnablePreload+0x42>
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d008      	beq.n	8001b62 <LL_TIM_OC_EnablePreload+0x3e>
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d101      	bne.n	8001b5e <LL_TIM_OC_EnablePreload+0x3a>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e00a      	b.n	8001b74 <LL_TIM_OC_EnablePreload+0x50>
 8001b5e:	2306      	movs	r3, #6
 8001b60:	e008      	b.n	8001b74 <LL_TIM_OC_EnablePreload+0x50>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e006      	b.n	8001b74 <LL_TIM_OC_EnablePreload+0x50>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <LL_TIM_OC_EnablePreload+0x50>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <LL_TIM_OC_EnablePreload+0x50>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_TIM_OC_EnablePreload+0x50>
 8001b72:	2300      	movs	r3, #0
 8001b74:	200f      	movs	r0, #15
 8001b76:	183a      	adds	r2, r7, r0
 8001b78:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3318      	adds	r3, #24
 8001b7e:	0019      	movs	r1, r3
 8001b80:	183b      	adds	r3, r7, r0
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4a09      	ldr	r2, [pc, #36]	; (8001bac <LL_TIM_OC_EnablePreload+0x88>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	18cb      	adds	r3, r1, r3
 8001b8a:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	183b      	adds	r3, r7, r0
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4906      	ldr	r1, [pc, #24]	; (8001bb0 <LL_TIM_OC_EnablePreload+0x8c>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	0019      	movs	r1, r3
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	408b      	lsls	r3, r1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	601a      	str	r2, [r3, #0]
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b004      	add	sp, #16
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	080038fc 	.word	0x080038fc
 8001bb0:	08003904 	.word	0x08003904

08001bb4 <LL_TIM_OC_DisablePreload>:
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d01e      	beq.n	8001c02 <LL_TIM_OC_DisablePreload+0x4e>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d019      	beq.n	8001bfe <LL_TIM_OC_DisablePreload+0x4a>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b10      	cmp	r3, #16
 8001bce:	d014      	beq.n	8001bfa <LL_TIM_OC_DisablePreload+0x46>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b40      	cmp	r3, #64	; 0x40
 8001bd4:	d00f      	beq.n	8001bf6 <LL_TIM_OC_DisablePreload+0x42>
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d008      	beq.n	8001bf2 <LL_TIM_OC_DisablePreload+0x3e>
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d101      	bne.n	8001bee <LL_TIM_OC_DisablePreload+0x3a>
 8001bea:	2305      	movs	r3, #5
 8001bec:	e00a      	b.n	8001c04 <LL_TIM_OC_DisablePreload+0x50>
 8001bee:	2306      	movs	r3, #6
 8001bf0:	e008      	b.n	8001c04 <LL_TIM_OC_DisablePreload+0x50>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e006      	b.n	8001c04 <LL_TIM_OC_DisablePreload+0x50>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <LL_TIM_OC_DisablePreload+0x50>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <LL_TIM_OC_DisablePreload+0x50>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <LL_TIM_OC_DisablePreload+0x50>
 8001c02:	2300      	movs	r3, #0
 8001c04:	200f      	movs	r0, #15
 8001c06:	183a      	adds	r2, r7, r0
 8001c08:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3318      	adds	r3, #24
 8001c0e:	0019      	movs	r1, r3
 8001c10:	183b      	adds	r3, r7, r0
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <LL_TIM_OC_DisablePreload+0x8c>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	18cb      	adds	r3, r1, r3
 8001c1a:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	183a      	adds	r2, r7, r0
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <LL_TIM_OC_DisablePreload+0x90>)
 8001c26:	5c8a      	ldrb	r2, [r1, r2]
 8001c28:	0011      	movs	r1, r2
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	408a      	lsls	r2, r1
 8001c2e:	43d2      	mvns	r2, r2
 8001c30:	401a      	ands	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	601a      	str	r2, [r3, #0]
}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b004      	add	sp, #16
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	080038fc 	.word	0x080038fc
 8001c44:	08003904 	.word	0x08003904

08001c48 <LL_TIM_SetTriggerOutput>:
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2270      	movs	r2, #112	; 0x70
 8001c58:	4393      	bics	r3, r2
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	605a      	str	r2, [r3, #4]
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <LL_TIM_DisableMasterSlaveMode>:
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	4393      	bics	r3, r2
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	609a      	str	r2, [r3, #8]
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b002      	add	sp, #8
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c8a:	b5b0      	push	{r4, r5, r7, lr}
 8001c8c:	b094      	sub	sp, #80	; 0x50
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c90:	253c      	movs	r5, #60	; 0x3c
 8001c92:	197b      	adds	r3, r7, r5
 8001c94:	0018      	movs	r0, r3
 8001c96:	2314      	movs	r3, #20
 8001c98:	001a      	movs	r2, r3
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	f001 fdd1 	bl	8003842 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001ca0:	241c      	movs	r4, #28
 8001ca2:	193b      	adds	r3, r7, r4
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	001a      	movs	r2, r3
 8001caa:	2100      	movs	r1, #0
 8001cac:	f001 fdc9 	bl	8003842 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	2318      	movs	r3, #24
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f001 fdc2 	bl	8003842 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff feae 	bl	8001a20 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 8001cc4:	197b      	adds	r3, r7, r5
 8001cc6:	222f      	movs	r2, #47	; 0x2f
 8001cc8:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cca:	197b      	adds	r3, r7, r5
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 9;
 8001cd0:	197b      	adds	r3, r7, r5
 8001cd2:	2209      	movs	r2, #9
 8001cd4:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001cd6:	197b      	adds	r3, r7, r5
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001cdc:	197a      	adds	r2, r7, r5
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	05db      	lsls	r3, r3, #23
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f001 f95d 	bl	8002fa4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	05db      	lsls	r3, r3, #23
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff febe 	bl	8001a70 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	05db      	lsls	r3, r3, #23
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f7ff ff12 	bl	8001b24 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001d00:	193b      	adds	r3, r7, r4
 8001d02:	2260      	movs	r2, #96	; 0x60
 8001d04:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001d06:	193b      	adds	r3, r7, r4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001d0c:	193b      	adds	r3, r7, r4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 0;
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	2200      	movs	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001d18:	193b      	adds	r3, r7, r4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001d1e:	193a      	adds	r2, r7, r4
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	05db      	lsls	r3, r3, #23
 8001d24:	2101      	movs	r1, #1
 8001d26:	0018      	movs	r0, r3
 8001d28:	f001 f9be 	bl	80030a8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	05db      	lsls	r3, r3, #23
 8001d30:	2101      	movs	r1, #1
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff feac 	bl	8001a90 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	05db      	lsls	r3, r3, #23
 8001d3c:	2110      	movs	r1, #16
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7ff fef0 	bl	8001b24 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001d44:	193a      	adds	r2, r7, r4
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	05db      	lsls	r3, r3, #23
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f001 f9ab 	bl	80030a8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	05db      	lsls	r3, r3, #23
 8001d56:	2110      	movs	r1, #16
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff fe99 	bl	8001a90 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	005a      	lsls	r2, r3, #1
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	05db      	lsls	r3, r3, #23
 8001d66:	0011      	movs	r1, r2
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff fedb 	bl	8001b24 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001d6e:	193a      	adds	r2, r7, r4
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	0059      	lsls	r1, r3, #1
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	05db      	lsls	r3, r3, #23
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f001 f995 	bl	80030a8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	005a      	lsls	r2, r3, #1
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	05db      	lsls	r3, r3, #23
 8001d86:	0011      	movs	r1, r2
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff fe81 	bl	8001a90 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	05db      	lsls	r3, r3, #23
 8001d92:	2108      	movs	r1, #8
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7ff fe59 	bl	8001a4c <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	05db      	lsls	r3, r3, #23
 8001d9e:	2100      	movs	r1, #0
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff ff51 	bl	8001c48 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	05db      	lsls	r3, r3, #23
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7ff ff5e 	bl	8001c6c <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	05db      	lsls	r3, r3, #23
 8001db4:	2101      	movs	r1, #1
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff fefc 	bl	8001bb4 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	05db      	lsls	r3, r3, #23
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7ff fef6 	bl	8001bb4 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	005a      	lsls	r2, r3, #1
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	05db      	lsls	r3, r3, #23
 8001dd0:	0011      	movs	r1, r2
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7ff feee 	bl	8001bb4 <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	029b      	lsls	r3, r3, #10
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff fe09 	bl	80019f4 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = STEP_0_Pin;
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2202      	movs	r2, #2
 8001de6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2202      	movs	r2, #2
 8001dec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2203      	movs	r2, #3
 8001df2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2202      	movs	r2, #2
 8001e04:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(STEP_0_GPIO_Port, &GPIO_InitStruct);
 8001e06:	1d3a      	adds	r2, r7, #4
 8001e08:	2390      	movs	r3, #144	; 0x90
 8001e0a:	05db      	lsls	r3, r3, #23
 8001e0c:	0011      	movs	r1, r2
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 fea4 	bl	8002b5c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = STEP_2_Pin;
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2204      	movs	r2, #4
 8001e18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2203      	movs	r2, #3
 8001e24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2202      	movs	r2, #2
 8001e30:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2202      	movs	r2, #2
 8001e36:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8001e38:	1d3a      	adds	r2, r7, #4
 8001e3a:	2390      	movs	r3, #144	; 0x90
 8001e3c:	05db      	lsls	r3, r3, #23
 8001e3e:	0011      	movs	r1, r2
 8001e40:	0018      	movs	r0, r3
 8001e42:	f000 fe8b 	bl	8002b5c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = STEP_1_Pin;
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2220      	movs	r2, #32
 8001e4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2202      	movs	r2, #2
 8001e50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2203      	movs	r2, #3
 8001e56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2202      	movs	r2, #2
 8001e62:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	2202      	movs	r2, #2
 8001e68:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001e6a:	1d3a      	adds	r2, r7, #4
 8001e6c:	2390      	movs	r3, #144	; 0x90
 8001e6e:	05db      	lsls	r3, r3, #23
 8001e70:	0011      	movs	r1, r2
 8001e72:	0018      	movs	r0, r3
 8001e74:	f000 fe72 	bl	8002b5c <LL_GPIO_Init>

}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b014      	add	sp, #80	; 0x50
 8001e7e:	bdb0      	pop	{r4, r5, r7, pc}

08001e80 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	0018      	movs	r0, r3
 8001e8a:	2314      	movs	r3, #20
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	2100      	movs	r1, #0
 8001e90:	f001 fcd7 	bl	8003842 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001e94:	2010      	movs	r0, #16
 8001e96:	f7ff fdc3 	bl	8001a20 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2011      	movs	r0, #17
 8001e9e:	f7ff fd3b 	bl	8001918 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ea2:	2011      	movs	r0, #17
 8001ea4:	f7ff fd1e 	bl	80018e4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	2200      	movs	r2, #0
 8001eac:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 4799;
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <MX_TIM6_Init+0x68>)
 8001eb8:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	f001 f86f 	bl	8002fa4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fdd1 	bl	8001a70 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7ff feb8 	bl	8001c48 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7ff fec6 	bl	8001c6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b006      	add	sp, #24
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	000012bf 	.word	0x000012bf
 8001eec:	40001000 	.word	0x40001000

08001ef0 <__NVIC_EnableIRQ>:
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b7f      	cmp	r3, #127	; 0x7f
 8001f02:	d809      	bhi.n	8001f18 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	001a      	movs	r2, r3
 8001f0a:	231f      	movs	r3, #31
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_EnableIRQ+0x30>)
 8001f10:	2101      	movs	r1, #1
 8001f12:	4091      	lsls	r1, r2
 8001f14:	000a      	movs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b002      	add	sp, #8
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b7f      	cmp	r3, #127	; 0x7f
 8001f38:	d828      	bhi.n	8001f8c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f3a:	4a2f      	ldr	r2, [pc, #188]	; (8001ff8 <__NVIC_SetPriority+0xd4>)
 8001f3c:	1dfb      	adds	r3, r7, #7
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	33c0      	adds	r3, #192	; 0xc0
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	589b      	ldr	r3, [r3, r2]
 8001f4a:	1dfa      	adds	r2, r7, #7
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	2203      	movs	r2, #3
 8001f52:	400a      	ands	r2, r1
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	21ff      	movs	r1, #255	; 0xff
 8001f58:	4091      	lsls	r1, r2
 8001f5a:	000a      	movs	r2, r1
 8001f5c:	43d2      	mvns	r2, r2
 8001f5e:	401a      	ands	r2, r3
 8001f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	019b      	lsls	r3, r3, #6
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	401a      	ands	r2, r3
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	2303      	movs	r3, #3
 8001f72:	4003      	ands	r3, r0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f78:	481f      	ldr	r0, [pc, #124]	; (8001ff8 <__NVIC_SetPriority+0xd4>)
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	430a      	orrs	r2, r1
 8001f84:	33c0      	adds	r3, #192	; 0xc0
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	501a      	str	r2, [r3, r0]
}
 8001f8a:	e031      	b.n	8001ff0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <__NVIC_SetPriority+0xd8>)
 8001f8e:	1dfb      	adds	r3, r7, #7
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	0019      	movs	r1, r3
 8001f94:	230f      	movs	r3, #15
 8001f96:	400b      	ands	r3, r1
 8001f98:	3b08      	subs	r3, #8
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3306      	adds	r3, #6
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	18d3      	adds	r3, r2, r3
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	1dfa      	adds	r2, r7, #7
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	0011      	movs	r1, r2
 8001fac:	2203      	movs	r2, #3
 8001fae:	400a      	ands	r2, r1
 8001fb0:	00d2      	lsls	r2, r2, #3
 8001fb2:	21ff      	movs	r1, #255	; 0xff
 8001fb4:	4091      	lsls	r1, r2
 8001fb6:	000a      	movs	r2, r1
 8001fb8:	43d2      	mvns	r2, r2
 8001fba:	401a      	ands	r2, r3
 8001fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	019b      	lsls	r3, r3, #6
 8001fc2:	22ff      	movs	r2, #255	; 0xff
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	2303      	movs	r3, #3
 8001fce:	4003      	ands	r3, r0
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd4:	4809      	ldr	r0, [pc, #36]	; (8001ffc <__NVIC_SetPriority+0xd8>)
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	001c      	movs	r4, r3
 8001fdc:	230f      	movs	r3, #15
 8001fde:	4023      	ands	r3, r4
 8001fe0:	3b08      	subs	r3, #8
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	3306      	adds	r3, #6
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	18c3      	adds	r3, r0, r3
 8001fec:	3304      	adds	r3, #4
 8001fee:	601a      	str	r2, [r3, #0]
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b003      	add	sp, #12
 8001ff6:	bd90      	pop	{r4, r7, pc}
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <LL_DMA_EnableChannel>:
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	3b01      	subs	r3, #1
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <LL_DMA_EnableChannel+0x38>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	001a      	movs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	18d3      	adds	r3, r2, r3
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3b01      	subs	r3, #1
 800201e:	4906      	ldr	r1, [pc, #24]	; (8002038 <LL_DMA_EnableChannel+0x38>)
 8002020:	5ccb      	ldrb	r3, [r1, r3]
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	18cb      	adds	r3, r1, r3
 8002028:	2101      	movs	r1, #1
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	0800390c 	.word	0x0800390c

0800203c <LL_DMA_DisableChannel>:
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	3b01      	subs	r3, #1
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <LL_DMA_DisableChannel+0x38>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	001a      	movs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	18d3      	adds	r3, r2, r3
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	3b01      	subs	r3, #1
 800205a:	4906      	ldr	r1, [pc, #24]	; (8002074 <LL_DMA_DisableChannel+0x38>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	18cb      	adds	r3, r1, r3
 8002064:	2101      	movs	r1, #1
 8002066:	438a      	bics	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	0800390c 	.word	0x0800390c

08002078 <LL_DMA_SetDataTransferDirection>:
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3b01      	subs	r3, #1
 8002088:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <LL_DMA_SetDataTransferDirection+0x40>)
 800208a:	5cd3      	ldrb	r3, [r2, r3]
 800208c:	001a      	movs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	18d3      	adds	r3, r2, r3
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a09      	ldr	r2, [pc, #36]	; (80020bc <LL_DMA_SetDataTransferDirection+0x44>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	3b01      	subs	r3, #1
 800209e:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <LL_DMA_SetDataTransferDirection+0x40>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	001a      	movs	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	18d3      	adds	r3, r2, r3
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b004      	add	sp, #16
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	0800390c 	.word	0x0800390c
 80020bc:	ffffbfef 	.word	0xffffbfef

080020c0 <LL_DMA_GetDataTransferDirection>:
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <LL_DMA_GetDataTransferDirection+0x28>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	001a      	movs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	18d3      	adds	r3, r2, r3
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <LL_DMA_GetDataTransferDirection+0x2c>)
 80020dc:	4013      	ands	r3, r2
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b002      	add	sp, #8
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	0800390c 	.word	0x0800390c
 80020ec:	00004010 	.word	0x00004010

080020f0 <LL_DMA_SetMode>:
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	3b01      	subs	r3, #1
 8002100:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <LL_DMA_SetMode+0x40>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	001a      	movs	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	18d3      	adds	r3, r2, r3
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2220      	movs	r2, #32
 800210e:	4393      	bics	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3b01      	subs	r3, #1
 8002116:	4a06      	ldr	r2, [pc, #24]	; (8002130 <LL_DMA_SetMode+0x40>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	001a      	movs	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	18d3      	adds	r3, r2, r3
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b004      	add	sp, #16
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	0800390c 	.word	0x0800390c

08002134 <LL_DMA_SetPeriphIncMode>:
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	3b01      	subs	r3, #1
 8002144:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <LL_DMA_SetPeriphIncMode+0x40>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	001a      	movs	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	18d3      	adds	r3, r2, r3
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	4a06      	ldr	r2, [pc, #24]	; (8002174 <LL_DMA_SetPeriphIncMode+0x40>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	001a      	movs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	18d3      	adds	r3, r2, r3
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	0800390c 	.word	0x0800390c

08002178 <LL_DMA_SetMemoryIncMode>:
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	3b01      	subs	r3, #1
 8002188:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <LL_DMA_SetMemoryIncMode+0x40>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	001a      	movs	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	18d3      	adds	r3, r2, r3
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	4393      	bics	r3, r2
 8002198:	0019      	movs	r1, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <LL_DMA_SetMemoryIncMode+0x40>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	001a      	movs	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	18d3      	adds	r3, r2, r3
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b004      	add	sp, #16
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	0800390c 	.word	0x0800390c

080021bc <LL_DMA_SetPeriphSize>:
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <LL_DMA_SetPeriphSize+0x40>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	001a      	movs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	18d3      	adds	r3, r2, r3
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a09      	ldr	r2, [pc, #36]	; (8002200 <LL_DMA_SetPeriphSize+0x44>)
 80021da:	4013      	ands	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	4a06      	ldr	r2, [pc, #24]	; (80021fc <LL_DMA_SetPeriphSize+0x40>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	001a      	movs	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	18d3      	adds	r3, r2, r3
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b004      	add	sp, #16
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	0800390c 	.word	0x0800390c
 8002200:	fffffcff 	.word	0xfffffcff

08002204 <LL_DMA_SetMemorySize>:
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	3b01      	subs	r3, #1
 8002214:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <LL_DMA_SetMemorySize+0x40>)
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	001a      	movs	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	18d3      	adds	r3, r2, r3
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a09      	ldr	r2, [pc, #36]	; (8002248 <LL_DMA_SetMemorySize+0x44>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3b01      	subs	r3, #1
 800222a:	4a06      	ldr	r2, [pc, #24]	; (8002244 <LL_DMA_SetMemorySize+0x40>)
 800222c:	5cd3      	ldrb	r3, [r2, r3]
 800222e:	001a      	movs	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	18d3      	adds	r3, r2, r3
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	430a      	orrs	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b004      	add	sp, #16
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	0800390c 	.word	0x0800390c
 8002248:	fffff3ff 	.word	0xfffff3ff

0800224c <LL_DMA_SetChannelPriorityLevel>:
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3b01      	subs	r3, #1
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <LL_DMA_SetChannelPriorityLevel+0x40>)
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	001a      	movs	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	18d3      	adds	r3, r2, r3
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a09      	ldr	r2, [pc, #36]	; (8002290 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800226a:	4013      	ands	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3b01      	subs	r3, #1
 8002272:	4a06      	ldr	r2, [pc, #24]	; (800228c <LL_DMA_SetChannelPriorityLevel+0x40>)
 8002274:	5cd3      	ldrb	r3, [r2, r3]
 8002276:	001a      	movs	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	18d3      	adds	r3, r2, r3
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	430a      	orrs	r2, r1
 8002280:	601a      	str	r2, [r3, #0]
}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	46bd      	mov	sp, r7
 8002286:	b004      	add	sp, #16
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	0800390c 	.word	0x0800390c
 8002290:	ffffcfff 	.word	0xffffcfff

08002294 <LL_DMA_SetDataLength>:
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <LL_DMA_SetDataLength+0x3c>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	001a      	movs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	18d3      	adds	r3, r2, r3
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	0419      	lsls	r1, r3, #16
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <LL_DMA_SetDataLength+0x3c>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	001a      	movs	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	18d3      	adds	r3, r2, r3
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	605a      	str	r2, [r3, #4]
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b004      	add	sp, #16
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	0800390c 	.word	0x0800390c

080022d4 <LL_DMA_ConfigAddresses>:
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d112      	bne.n	800230e <LL_DMA_ConfigAddresses+0x3a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	4a13      	ldr	r2, [pc, #76]	; (800233c <LL_DMA_ConfigAddresses+0x68>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	001a      	movs	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	18d3      	adds	r3, r2, r3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	4a0f      	ldr	r2, [pc, #60]	; (800233c <LL_DMA_ConfigAddresses+0x68>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	001a      	movs	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	18d3      	adds	r3, r2, r3
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	609a      	str	r2, [r3, #8]
}
 800230c:	e011      	b.n	8002332 <LL_DMA_ConfigAddresses+0x5e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3b01      	subs	r3, #1
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <LL_DMA_ConfigAddresses+0x68>)
 8002314:	5cd3      	ldrb	r3, [r2, r3]
 8002316:	001a      	movs	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	18d3      	adds	r3, r2, r3
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3b01      	subs	r3, #1
 8002324:	4a05      	ldr	r2, [pc, #20]	; (800233c <LL_DMA_ConfigAddresses+0x68>)
 8002326:	5cd3      	ldrb	r3, [r2, r3]
 8002328:	001a      	movs	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	18d3      	adds	r3, r2, r3
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	60da      	str	r2, [r3, #12]
}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	0800390c 	.word	0x0800390c

08002340 <LL_AHB1_GRP1_EnableClock>:
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <LL_AHB1_GRP1_EnableClock+0x28>)
 800234a:	6959      	ldr	r1, [r3, #20]
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <LL_AHB1_GRP1_EnableClock+0x28>)
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	430a      	orrs	r2, r1
 8002352:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4013      	ands	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b004      	add	sp, #16
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000

0800236c <LL_APB1_GRP2_EnableClock>:
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <LL_APB1_GRP2_EnableClock+0x28>)
 8002376:	6999      	ldr	r1, [r3, #24]
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <LL_APB1_GRP2_EnableClock+0x28>)
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	430a      	orrs	r2, r1
 800237e:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <LL_APB1_GRP2_EnableClock+0x28>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4013      	ands	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <LL_USART_Enable>:
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <LL_USART_ConfigAsyncMode>:
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80023c2:	401a      	ands	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	222a      	movs	r2, #42	; 0x2a
 80023ce:	4393      	bics	r3, r2
 80023d0:	001a      	movs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	609a      	str	r2, [r3, #8]
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	ffffb7ff 	.word	0xffffb7ff

080023e4 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <LL_USART_DisableIT_CTS+0x1c>)
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	609a      	str	r2, [r3, #8]
}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b002      	add	sp, #8
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	fffffbff 	.word	0xfffffbff

08002404 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d103      	bne.n	800241c <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3328      	adds	r3, #40	; 0x28
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e002      	b.n	8002422 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3324      	adds	r3, #36	; 0x24
 8002420:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002422:	68fb      	ldr	r3, [r7, #12]
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b004      	add	sp, #16
 800242a:	bd80      	pop	{r7, pc}

0800242c <DMA1_RecieveComplete>:

#include "mfgcode_uart.h"

uint8_t fl_rx=0, fl_tx=0;

void DMA1_RecieveComplete(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  fl_rx = 1;
 8002430:	4b02      	ldr	r3, [pc, #8]	; (800243c <DMA1_RecieveComplete+0x10>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200000f1 	.word	0x200000f1

08002440 <DMA1_TransmitComplete>:
//-----------------------------------------
void DMA1_TransmitComplete(void) {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  fl_tx = 1;
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <DMA1_TransmitComplete+0x10>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200000f2 	.word	0x200000f2

08002454 <UART_RX>:
  LL_DMA_EnableChannel(DMA1, UART_DMA_TX);
  while (!fl_tx) {}
  fl_tx=0;
}
//--------------------------------------------------------
void UART_RX (uint8_t* dest, uint16_t len) {
 8002454:	b5b0      	push	{r4, r5, r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	000a      	movs	r2, r1
 800245e:	1cbb      	adds	r3, r7, #2
 8002460:	801a      	strh	r2, [r3, #0]
  LL_DMA_DisableChannel(DMA1, UART_DMA_RX);
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <UART_RX+0x70>)
 8002464:	2103      	movs	r1, #3
 8002466:	0018      	movs	r0, r3
 8002468:	f7ff fde8 	bl	800203c <LL_DMA_DisableChannel>
	LL_DMA_ConfigAddresses(DMA1, UART_DMA_RX, LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE),
 800246c:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <UART_RX+0x74>)
 800246e:	2101      	movs	r1, #1
 8002470:	0018      	movs	r0, r3
 8002472:	f7ff ffc7 	bl	8002404 <LL_USART_DMA_GetRegAddr>
 8002476:	0005      	movs	r5, r0
 8002478:	687c      	ldr	r4, [r7, #4]
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <UART_RX+0x70>)
 800247c:	2103      	movs	r1, #3
 800247e:	0018      	movs	r0, r3
 8002480:	f7ff fe1e 	bl	80020c0 <LL_DMA_GetDataTransferDirection>
 8002484:	0003      	movs	r3, r0
 8002486:	480f      	ldr	r0, [pc, #60]	; (80024c4 <UART_RX+0x70>)
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	0023      	movs	r3, r4
 800248c:	002a      	movs	r2, r5
 800248e:	2103      	movs	r1, #3
 8002490:	f7ff ff20 	bl	80022d4 <LL_DMA_ConfigAddresses>
												 (uint32_t)dest, LL_DMA_GetDataTransferDirection(DMA1, UART_DMA_RX));
  LL_DMA_SetDataLength(DMA1, UART_DMA_RX, len);
 8002494:	1cbb      	adds	r3, r7, #2
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	480a      	ldr	r0, [pc, #40]	; (80024c4 <UART_RX+0x70>)
 800249a:	001a      	movs	r2, r3
 800249c:	2103      	movs	r1, #3
 800249e:	f7ff fef9 	bl	8002294 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, UART_DMA_RX);
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <UART_RX+0x70>)
 80024a4:	2103      	movs	r1, #3
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7ff fdaa 	bl	8002000 <LL_DMA_EnableChannel>
  while (!fl_rx) {}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <UART_RX+0x78>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0fb      	beq.n	80024ae <UART_RX+0x5a>
  fl_rx=0;
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <UART_RX+0x78>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bdb0      	pop	{r4, r5, r7, pc}
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40013800 	.word	0x40013800
 80024cc:	200000f1 	.word	0x200000f1

080024d0 <UART_RX_Handler>:
//--------------------------------------------------------
void UART_RX_Handler (uint8_t* dest, uint16_t len) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	000a      	movs	r2, r1
 80024da:	1cbb      	adds	r3, r7, #2
 80024dc:	801a      	strh	r2, [r3, #0]
	static int32_t phi0 = 0, phi1 = 1570796, phi2 = 0;

	int32_t curphi0 = (int32_t)((((uint32_t)rx_buff[1])  << 24) | (((uint32_t)rx_buff[2]) << 16) | (((uint32_t)rx_buff[3]) << 8) | ((uint32_t)rx_buff[4]));
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <UART_RX_Handler+0xc4>)
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	061a      	lsls	r2, r3, #24
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <UART_RX_Handler+0xc4>)
 80024e6:	789b      	ldrb	r3, [r3, #2]
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	431a      	orrs	r2, r3
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <UART_RX_Handler+0xc4>)
 80024ee:	78db      	ldrb	r3, [r3, #3]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	4313      	orrs	r3, r2
 80024f4:	4a27      	ldr	r2, [pc, #156]	; (8002594 <UART_RX_Handler+0xc4>)
 80024f6:	7912      	ldrb	r2, [r2, #4]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]
	int32_t curphi1 = (int32_t)((((uint32_t)rx_buff[6])  << 24) | (((uint32_t)rx_buff[7]) << 16) | (((uint32_t)rx_buff[8]) << 8) | ((uint32_t)rx_buff[9]));
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <UART_RX_Handler+0xc4>)
 80024fe:	799b      	ldrb	r3, [r3, #6]
 8002500:	061a      	lsls	r2, r3, #24
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <UART_RX_Handler+0xc4>)
 8002504:	79db      	ldrb	r3, [r3, #7]
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	431a      	orrs	r2, r3
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <UART_RX_Handler+0xc4>)
 800250c:	7a1b      	ldrb	r3, [r3, #8]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	4313      	orrs	r3, r2
 8002512:	4a20      	ldr	r2, [pc, #128]	; (8002594 <UART_RX_Handler+0xc4>)
 8002514:	7a52      	ldrb	r2, [r2, #9]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
	int32_t curphi2 = (int32_t)((((uint32_t)rx_buff[11]) << 24) | (((uint32_t)rx_buff[12]) << 16) | (((uint32_t)rx_buff[13]) << 8) | ((uint32_t)rx_buff[14]));
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <UART_RX_Handler+0xc4>)
 800251c:	7adb      	ldrb	r3, [r3, #11]
 800251e:	061a      	lsls	r2, r3, #24
 8002520:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <UART_RX_Handler+0xc4>)
 8002522:	7b1b      	ldrb	r3, [r3, #12]
 8002524:	041b      	lsls	r3, r3, #16
 8002526:	431a      	orrs	r2, r3
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <UART_RX_Handler+0xc4>)
 800252a:	7b5b      	ldrb	r3, [r3, #13]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	4313      	orrs	r3, r2
 8002530:	4a18      	ldr	r2, [pc, #96]	; (8002594 <UART_RX_Handler+0xc4>)
 8002532:	7b92      	ldrb	r2, [r2, #14]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

	int32_t dphi0 = curphi0 - phi0;
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <UART_RX_Handler+0xc8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	613b      	str	r3, [r7, #16]
	int32_t dphi1 = curphi1 - phi1;
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <UART_RX_Handler+0xcc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	60fb      	str	r3, [r7, #12]
	int32_t dphi2 = curphi2 - phi2;
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <UART_RX_Handler+0xd0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	60bb      	str	r3, [r7, #8]

	phi0 = curphi0;
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <UART_RX_Handler+0xc8>)
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	601a      	str	r2, [r3, #0]
	phi1 = curphi1;
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <UART_RX_Handler+0xcc>)
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	601a      	str	r2, [r3, #0]
	phi2 = curphi2;
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <UART_RX_Handler+0xd0>)
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]

	AxisRotate(0, dphi0, 1000 * 1000);
 8002568:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <UART_RX_Handler+0xd4>)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	0019      	movs	r1, r3
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe fb8c 	bl	8000c8c <AxisRotate>
	AxisRotate(1, dphi0, 1000 * 1000);
 8002574:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <UART_RX_Handler+0xd4>)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	0019      	movs	r1, r3
 800257a:	2001      	movs	r0, #1
 800257c:	f7fe fb86 	bl	8000c8c <AxisRotate>
	AxisRotate(2, dphi0, 1000 * 1000);
 8002580:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <UART_RX_Handler+0xd4>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	0019      	movs	r1, r3
 8002586:	2002      	movs	r0, #2
 8002588:	f7fe fb80 	bl	8000c8c <AxisRotate>
}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b008      	add	sp, #32
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200000f4 	.word	0x200000f4
 8002598:	20000128 	.word	0x20000128
 800259c:	20000004 	.word	0x20000004
 80025a0:	2000012c 	.word	0x2000012c
 80025a4:	000f4240 	.word	0x000f4240

080025a8 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b08f      	sub	sp, #60	; 0x3c
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80025ae:	241c      	movs	r4, #28
 80025b0:	193b      	adds	r3, r7, r4
 80025b2:	0018      	movs	r0, r3
 80025b4:	231c      	movs	r3, #28
 80025b6:	001a      	movs	r2, r3
 80025b8:	2100      	movs	r1, #0
 80025ba:	f001 f942 	bl	8003842 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	0018      	movs	r0, r3
 80025c2:	2318      	movs	r3, #24
 80025c4:	001a      	movs	r2, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	f001 f93b 	bl	8003842 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	01db      	lsls	r3, r3, #7
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff fecb 	bl	800236c <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	029b      	lsls	r3, r3, #10
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff feb0 	bl	8002340 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	0092      	lsls	r2, r2, #2
 80025e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	2202      	movs	r2, #2
 80025ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	2203      	movs	r2, #3
 80025f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2200      	movs	r2, #0
 80025f8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	2201      	movs	r2, #1
 8002604:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	1d3a      	adds	r2, r7, #4
 8002608:	2390      	movs	r3, #144	; 0x90
 800260a:	05db      	lsls	r3, r3, #23
 800260c:	0011      	movs	r1, r2
 800260e:	0018      	movs	r0, r3
 8002610:	f000 faa4 	bl	8002b5c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	00d2      	lsls	r2, r2, #3
 800261a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	2202      	movs	r2, #2
 8002620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	2203      	movs	r2, #3
 8002626:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2201      	movs	r2, #1
 8002638:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	1d3a      	adds	r2, r7, #4
 800263c:	2390      	movs	r3, #144	; 0x90
 800263e:	05db      	lsls	r3, r3, #23
 8002640:	0011      	movs	r1, r2
 8002642:	0018      	movs	r0, r3
 8002644:	f000 fa8a 	bl	8002b5c <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002648:	4b48      	ldr	r3, [pc, #288]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 800264a:	2200      	movs	r2, #0
 800264c:	2103      	movs	r1, #3
 800264e:	0018      	movs	r0, r3
 8002650:	f7ff fd12 	bl	8002078 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8002654:	4b45      	ldr	r3, [pc, #276]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 8002656:	2200      	movs	r2, #0
 8002658:	2103      	movs	r1, #3
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff fdf6 	bl	800224c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8002660:	4b42      	ldr	r3, [pc, #264]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 8002662:	2200      	movs	r2, #0
 8002664:	2103      	movs	r1, #3
 8002666:	0018      	movs	r0, r3
 8002668:	f7ff fd42 	bl	80020f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800266c:	4b3f      	ldr	r3, [pc, #252]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 800266e:	2200      	movs	r2, #0
 8002670:	2103      	movs	r1, #3
 8002672:	0018      	movs	r0, r3
 8002674:	f7ff fd5e 	bl	8002134 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8002678:	4b3c      	ldr	r3, [pc, #240]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	2103      	movs	r1, #3
 800267e:	0018      	movs	r0, r3
 8002680:	f7ff fd7a 	bl	8002178 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 8002686:	2200      	movs	r2, #0
 8002688:	2103      	movs	r1, #3
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff fd96 	bl	80021bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8002690:	4b36      	ldr	r3, [pc, #216]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 8002692:	2200      	movs	r2, #0
 8002694:	2103      	movs	r1, #3
 8002696:	0018      	movs	r0, r3
 8002698:	f7ff fdb4 	bl	8002204 <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800269c:	4b33      	ldr	r3, [pc, #204]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 800269e:	2210      	movs	r2, #16
 80026a0:	2102      	movs	r1, #2
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff fce8 	bl	8002078 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	2102      	movs	r1, #2
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7ff fdcc 	bl	800224c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	2102      	movs	r1, #2
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7ff fd18 	bl	80020f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80026c0:	4b2a      	ldr	r3, [pc, #168]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	2102      	movs	r1, #2
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7ff fd34 	bl	8002134 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 80026ce:	2280      	movs	r2, #128	; 0x80
 80026d0:	2102      	movs	r1, #2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7ff fd50 	bl	8002178 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80026d8:	4b24      	ldr	r3, [pc, #144]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 80026da:	2200      	movs	r2, #0
 80026dc:	2102      	movs	r1, #2
 80026de:	0018      	movs	r0, r3
 80026e0:	f7ff fd6c 	bl	80021bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 80026e4:	4b21      	ldr	r3, [pc, #132]	; (800276c <MX_USART1_UART_Init+0x1c4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	2102      	movs	r1, #2
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7ff fd8a 	bl	8002204 <LL_DMA_SetMemorySize>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 80026f0:	2100      	movs	r1, #0
 80026f2:	201b      	movs	r0, #27
 80026f4:	f7ff fc16 	bl	8001f24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80026f8:	201b      	movs	r0, #27
 80026fa:	f7ff fbf9 	bl	8001ef0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */
  NVIC_SetPriority(USART1_IRQn, 2);
 80026fe:	2102      	movs	r1, #2
 8002700:	201b      	movs	r0, #27
 8002702:	f7ff fc0f 	bl	8001f24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002706:	201b      	movs	r0, #27
 8002708:	f7ff fbf2 	bl	8001ef0 <__NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800270c:	193b      	adds	r3, r7, r4
 800270e:	22e1      	movs	r2, #225	; 0xe1
 8002710:	0252      	lsls	r2, r2, #9
 8002712:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002714:	0021      	movs	r1, r4
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2200      	movs	r2, #0
 800271a:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800271c:	187b      	adds	r3, r7, r1
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002722:	187b      	adds	r3, r7, r1
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002728:	187b      	adds	r3, r7, r1
 800272a:	220c      	movs	r2, #12
 800272c:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800272e:	187b      	adds	r3, r7, r1
 8002730:	2200      	movs	r2, #0
 8002732:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 800273a:	187b      	adds	r3, r7, r1
 800273c:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <MX_USART1_UART_Init+0x1c8>)
 800273e:	0019      	movs	r1, r3
 8002740:	0010      	movs	r0, r2
 8002742:	f000 ff89 	bl	8003658 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <MX_USART1_UART_Init+0x1c8>)
 8002748:	0018      	movs	r0, r3
 800274a:	f7ff fe4b 	bl	80023e4 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <MX_USART1_UART_Init+0x1c8>)
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff fe2f 	bl	80023b4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_USART1_UART_Init+0x1c8>)
 8002758:	0018      	movs	r0, r3
 800275a:	f7ff fe1d 	bl	8002398 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  MX_DMA_Init();
 800275e:	f7fe fb7f 	bl	8000e60 <MX_DMA_Init>

  /* USER CODE END USART1_Init 2 */

}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b00f      	add	sp, #60	; 0x3c
 8002768:	bd90      	pop	{r4, r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	40020000 	.word	0x40020000
 8002770:	40013800 	.word	0x40013800

08002774 <Reset_Handler>:
 8002774:	480d      	ldr	r0, [pc, #52]	; (80027ac <LoopForever+0x2>)
 8002776:	4685      	mov	sp, r0
 8002778:	480d      	ldr	r0, [pc, #52]	; (80027b0 <LoopForever+0x6>)
 800277a:	490e      	ldr	r1, [pc, #56]	; (80027b4 <LoopForever+0xa>)
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <LoopForever+0xe>)
 800277e:	2300      	movs	r3, #0
 8002780:	e002      	b.n	8002788 <LoopCopyDataInit>

08002782 <CopyDataInit>:
 8002782:	58d4      	ldr	r4, [r2, r3]
 8002784:	50c4      	str	r4, [r0, r3]
 8002786:	3304      	adds	r3, #4

08002788 <LoopCopyDataInit>:
 8002788:	18c4      	adds	r4, r0, r3
 800278a:	428c      	cmp	r4, r1
 800278c:	d3f9      	bcc.n	8002782 <CopyDataInit>
 800278e:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <LoopForever+0x12>)
 8002790:	4c0b      	ldr	r4, [pc, #44]	; (80027c0 <LoopForever+0x16>)
 8002792:	2300      	movs	r3, #0
 8002794:	e001      	b.n	800279a <LoopFillZerobss>

08002796 <FillZerobss>:
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	3204      	adds	r2, #4

0800279a <LoopFillZerobss>:
 800279a:	42a2      	cmp	r2, r4
 800279c:	d3fb      	bcc.n	8002796 <FillZerobss>
 800279e:	f7ff f89b 	bl	80018d8 <SystemInit>
 80027a2:	f001 f821 	bl	80037e8 <__libc_init_array>
 80027a6:	f7fe fead 	bl	8001504 <main>

080027aa <LoopForever>:
 80027aa:	e7fe      	b.n	80027aa <LoopForever>
 80027ac:	20002000 	.word	0x20002000
 80027b0:	20000000 	.word	0x20000000
 80027b4:	2000006c 	.word	0x2000006c
 80027b8:	0800391c 	.word	0x0800391c
 80027bc:	2000006c 	.word	0x2000006c
 80027c0:	20000130 	.word	0x20000130

080027c4 <ADC1_COMP_IRQHandler>:
 80027c4:	e7fe      	b.n	80027c4 <ADC1_COMP_IRQHandler>
	...

080027c8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <LL_EXTI_EnableIT_0_31+0x1c>)
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <LL_EXTI_EnableIT_0_31+0x1c>)
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40010400 	.word	0x40010400

080027e8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <LL_EXTI_DisableIT_0_31+0x20>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <LL_EXTI_DisableIT_0_31+0x20>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40010400 	.word	0x40010400

0800280c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <LL_EXTI_EnableEvent_0_31+0x1c>)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	430a      	orrs	r2, r1
 800281e:	605a      	str	r2, [r3, #4]

}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40010400 	.word	0x40010400

0800282c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <LL_EXTI_DisableEvent_0_31+0x20>)
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	43d9      	mvns	r1, r3
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <LL_EXTI_DisableEvent_0_31+0x20>)
 800283e:	400a      	ands	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b002      	add	sp, #8
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	40010400 	.word	0x40010400

08002850 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]

}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b002      	add	sp, #8
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40010400 	.word	0x40010400

08002870 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	43d9      	mvns	r1, r3
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002882:	400a      	ands	r2, r1
 8002884:	609a      	str	r2, [r3, #8]

}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b002      	add	sp, #8
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	40010400 	.word	0x40010400

08002894 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800289e:	68d9      	ldr	r1, [r3, #12]
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40010400 	.word	0x40010400

080028b4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80028c6:	400a      	ands	r2, r1
 80028c8:	60da      	str	r2, [r3, #12]
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b002      	add	sp, #8
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	40010400 	.word	0x40010400

080028d8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80028e0:	230f      	movs	r3, #15
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	791b      	ldrb	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d100      	bne.n	80028f2 <LL_EXTI_Init+0x1a>
 80028f0:	e068      	b.n	80029c4 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d100      	bne.n	80028fc <LL_EXTI_Init+0x24>
 80028fa:	e06e      	b.n	80029da <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	795b      	ldrb	r3, [r3, #5]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d01b      	beq.n	800293c <LL_EXTI_Init+0x64>
 8002904:	dc25      	bgt.n	8002952 <LL_EXTI_Init+0x7a>
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <LL_EXTI_Init+0x38>
 800290a:	2b01      	cmp	r3, #1
 800290c:	d00b      	beq.n	8002926 <LL_EXTI_Init+0x4e>
 800290e:	e020      	b.n	8002952 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0018      	movs	r0, r3
 8002916:	f7ff ff89 	bl	800282c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0018      	movs	r0, r3
 8002920:	f7ff ff52 	bl	80027c8 <LL_EXTI_EnableIT_0_31>
          break;
 8002924:	e01a      	b.n	800295c <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	f7ff ff5c 	bl	80027e8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0018      	movs	r0, r3
 8002936:	f7ff ff69 	bl	800280c <LL_EXTI_EnableEvent_0_31>
          break;
 800293a:	e00f      	b.n	800295c <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0018      	movs	r0, r3
 8002942:	f7ff ff41 	bl	80027c8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0018      	movs	r0, r3
 800294c:	f7ff ff5e 	bl	800280c <LL_EXTI_EnableEvent_0_31>
          break;
 8002950:	e004      	b.n	800295c <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8002952:	230f      	movs	r3, #15
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
          break;
 800295a:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	799b      	ldrb	r3, [r3, #6]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d03a      	beq.n	80029da <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	799b      	ldrb	r3, [r3, #6]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d01b      	beq.n	80029a4 <LL_EXTI_Init+0xcc>
 800296c:	dc25      	bgt.n	80029ba <LL_EXTI_Init+0xe2>
 800296e:	2b01      	cmp	r3, #1
 8002970:	d002      	beq.n	8002978 <LL_EXTI_Init+0xa0>
 8002972:	2b02      	cmp	r3, #2
 8002974:	d00b      	beq.n	800298e <LL_EXTI_Init+0xb6>
 8002976:	e020      	b.n	80029ba <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff ff99 	bl	80028b4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff ff62 	bl	8002850 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800298c:	e026      	b.n	80029dc <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff ff6c 	bl	8002870 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0018      	movs	r0, r3
 800299e:	f7ff ff79 	bl	8002894 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80029a2:	e01b      	b.n	80029dc <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff ff51 	bl	8002850 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7ff ff6e 	bl	8002894 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80029b8:	e010      	b.n	80029dc <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 80029ba:	230f      	movs	r3, #15
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
            break;
 80029c2:	e00b      	b.n	80029dc <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff ff0d 	bl	80027e8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f7ff ff2a 	bl	800282c <LL_EXTI_DisableEvent_0_31>
 80029d8:	e000      	b.n	80029dc <LL_EXTI_Init+0x104>
      }
 80029da:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80029dc:	230f      	movs	r3, #15
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	781b      	ldrb	r3, [r3, #0]
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}

080029ea <LL_GPIO_SetPinMode>:
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	435b      	muls	r3, r3
 80029fe:	001a      	movs	r2, r3
 8002a00:	0013      	movs	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	189b      	adds	r3, r3, r2
 8002a06:	43db      	mvns	r3, r3
 8002a08:	400b      	ands	r3, r1
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	435b      	muls	r3, r3
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	434b      	muls	r3, r1
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <LL_GPIO_SetPinOutputType>:
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	43d2      	mvns	r2, r2
 8002a36:	401a      	ands	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	434b      	muls	r3, r1
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	605a      	str	r2, [r3, #4]
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b004      	add	sp, #16
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <LL_GPIO_SetPinSpeed>:
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	435b      	muls	r3, r3
 8002a60:	001a      	movs	r2, r3
 8002a62:	0013      	movs	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	189b      	adds	r3, r3, r2
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	435b      	muls	r3, r3
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	434b      	muls	r3, r1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b004      	add	sp, #16
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <LL_GPIO_SetPinPull>:
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	68d9      	ldr	r1, [r3, #12]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	435b      	muls	r3, r3
 8002a98:	001a      	movs	r2, r3
 8002a9a:	0013      	movs	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	189b      	adds	r3, r3, r2
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	400b      	ands	r3, r1
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	435b      	muls	r3, r3
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	434b      	muls	r3, r1
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	60da      	str	r2, [r3, #12]
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b004      	add	sp, #16
 8002aba:	bd80      	pop	{r7, pc}

08002abc <LL_GPIO_SetAFPin_0_7>:
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a19      	ldr	r1, [r3, #32]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	435b      	muls	r3, r3
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4353      	muls	r3, r2
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	435a      	muls	r2, r3
 8002ad8:	0013      	movs	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	435b      	muls	r3, r3
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	434b      	muls	r3, r1
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	434b      	muls	r3, r1
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	434b      	muls	r3, r1
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b004      	add	sp, #16
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <LL_GPIO_SetAFPin_8_15>:
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	0a12      	lsrs	r2, r2, #8
 8002b1a:	4353      	muls	r3, r2
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	0a12      	lsrs	r2, r2, #8
 8002b20:	4353      	muls	r3, r2
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	0a12      	lsrs	r2, r2, #8
 8002b26:	435a      	muls	r2, r3
 8002b28:	0013      	movs	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	400b      	ands	r3, r1
 8002b32:	001a      	movs	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	0a09      	lsrs	r1, r1, #8
 8002b3c:	434b      	muls	r3, r1
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	0a09      	lsrs	r1, r1, #8
 8002b42:	434b      	muls	r3, r1
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	0a09      	lsrs	r1, r1, #8
 8002b48:	434b      	muls	r3, r1
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	434b      	muls	r3, r1
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002b6a:	e048      	b.n	8002bfe <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4091      	lsls	r1, r2
 8002b76:	000a      	movs	r2, r1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d03a      	beq.n	8002bf8 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d003      	beq.n	8002b92 <LL_GPIO_Init+0x36>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d10e      	bne.n	8002bb0 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7ff ff56 	bl	8002a4c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7ff ff39 	bl	8002a22 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff ff63 	bl	8002a84 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d111      	bne.n	8002bea <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2bff      	cmp	r3, #255	; 0xff
 8002bca:	d807      	bhi.n	8002bdc <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff ff71 	bl	8002abc <LL_GPIO_SetAFPin_0_7>
 8002bda:	e006      	b.n	8002bea <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7ff ff8c 	bl	8002b02 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff fef9 	bl	80029ea <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	40da      	lsrs	r2, r3
 8002c06:	1e13      	subs	r3, r2, #0
 8002c08:	d1b0      	bne.n	8002b6c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b004      	add	sp, #16
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <LL_RCC_HSI_IsReady>:
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <LL_RCC_HSI_IsReady+0x1c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	3b02      	subs	r3, #2
 8002c22:	425a      	negs	r2, r3
 8002c24:	4153      	adcs	r3, r2
 8002c26:	b2db      	uxtb	r3, r3
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	40021000 	.word	0x40021000

08002c34 <LL_RCC_LSE_IsReady>:
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <LL_RCC_LSE_IsReady+0x1c>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	4013      	ands	r3, r2
 8002c40:	3b02      	subs	r3, #2
 8002c42:	425a      	negs	r2, r3
 8002c44:	4153      	adcs	r3, r2
 8002c46:	b2db      	uxtb	r3, r3
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	40021000 	.word	0x40021000

08002c54 <LL_RCC_GetSysClkSource>:
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <LL_RCC_GetSysClkSource+0x14>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	220c      	movs	r2, #12
 8002c5e:	4013      	ands	r3, r2
}
 8002c60:	0018      	movs	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	40021000 	.word	0x40021000

08002c6c <LL_RCC_GetAHBPrescaler>:
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <LL_RCC_GetAHBPrescaler+0x14>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	22f0      	movs	r2, #240	; 0xf0
 8002c76:	4013      	ands	r3, r2
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	40021000 	.word	0x40021000

08002c84 <LL_RCC_GetAPB1Prescaler>:
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	23e0      	movs	r3, #224	; 0xe0
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4013      	ands	r3, r2
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000

08002c9c <LL_RCC_GetUSARTClockSource>:
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <LL_RCC_GetUSARTClockSource+0x24>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	2103      	movs	r1, #3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4091      	lsls	r1, r2
 8002cae:	000a      	movs	r2, r1
 8002cb0:	401a      	ands	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	4313      	orrs	r3, r2
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <LL_RCC_PLL_GetMainSource+0x14>)
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	025b      	lsls	r3, r3, #9
 8002cd0:	4013      	ands	r3, r2
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000

08002cdc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	23f0      	movs	r3, #240	; 0xf0
 8002ce6:	039b      	lsls	r3, r3, #14
 8002ce8:	4013      	ands	r3, r2
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <LL_RCC_PLL_GetPrediv+0x14>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	4013      	ands	r3, r2
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	40021000 	.word	0x40021000

08002d0c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002d14:	f000 f85c 	bl	8002dd0 <RCC_GetSystemClockFreq>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 f87a 	bl	8002e1c <RCC_GetHCLKClockFreq>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 f888 	bl	8002e48 <RCC_GetPCLK1ClockFreq>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b002      	add	sp, #8
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d12d      	bne.n	8002db6 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7ff ff9d 	bl	8002c9c <LL_RCC_GetUSARTClockSource>
 8002d62:	0003      	movs	r3, r0
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d00a      	beq.n	8002d7e <LL_RCC_GetUSARTClockFreq+0x36>
 8002d68:	d818      	bhi.n	8002d9c <LL_RCC_GetUSARTClockFreq+0x54>
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d002      	beq.n	8002d74 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d00c      	beq.n	8002d8c <LL_RCC_GetUSARTClockFreq+0x44>
 8002d72:	e013      	b.n	8002d9c <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002d74:	f000 f82c 	bl	8002dd0 <RCC_GetSystemClockFreq>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	60fb      	str	r3, [r7, #12]
        break;
 8002d7c:	e020      	b.n	8002dc0 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002d7e:	f7ff ff49 	bl	8002c14 <LL_RCC_HSI_IsReady>
 8002d82:	1e03      	subs	r3, r0, #0
 8002d84:	d019      	beq.n	8002dba <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <LL_RCC_GetUSARTClockFreq+0x84>)
 8002d88:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002d8a:	e016      	b.n	8002dba <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002d8c:	f7ff ff52 	bl	8002c34 <LL_RCC_LSE_IsReady>
 8002d90:	1e03      	subs	r3, r0, #0
 8002d92:	d014      	beq.n	8002dbe <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002d9a:	e010      	b.n	8002dbe <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002d9c:	f000 f818 	bl	8002dd0 <RCC_GetSystemClockFreq>
 8002da0:	0003      	movs	r3, r0
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 f83a 	bl	8002e1c <RCC_GetHCLKClockFreq>
 8002da8:	0003      	movs	r3, r0
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 f84c 	bl	8002e48 <RCC_GetPCLK1ClockFreq>
 8002db0:	0003      	movs	r3, r0
 8002db2:	60fb      	str	r3, [r7, #12]
        break;
 8002db4:	e004      	b.n	8002dc0 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	e002      	b.n	8002dc0 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	e000      	b.n	8002dc0 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002dbe:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b004      	add	sp, #16
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002dda:	f7ff ff3b 	bl	8002c54 <LL_RCC_GetSysClkSource>
 8002dde:	0003      	movs	r3, r0
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d00b      	beq.n	8002dfc <RCC_GetSystemClockFreq+0x2c>
 8002de4:	d80f      	bhi.n	8002e06 <RCC_GetSystemClockFreq+0x36>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <RCC_GetSystemClockFreq+0x20>
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d003      	beq.n	8002df6 <RCC_GetSystemClockFreq+0x26>
 8002dee:	e00a      	b.n	8002e06 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <RCC_GetSystemClockFreq+0x48>)
 8002df2:	607b      	str	r3, [r7, #4]
      break;
 8002df4:	e00a      	b.n	8002e0c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <RCC_GetSystemClockFreq+0x48>)
 8002df8:	607b      	str	r3, [r7, #4]
      break;
 8002dfa:	e007      	b.n	8002e0c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002dfc:	f000 f838 	bl	8002e70 <RCC_PLL_GetFreqDomain_SYS>
 8002e00:	0003      	movs	r3, r0
 8002e02:	607b      	str	r3, [r7, #4]
      break;
 8002e04:	e002      	b.n	8002e0c <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <RCC_GetSystemClockFreq+0x48>)
 8002e08:	607b      	str	r3, [r7, #4]
      break;
 8002e0a:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8002e0c:	687b      	ldr	r3, [r7, #4]
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b002      	add	sp, #8
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	007a1200 	.word	0x007a1200

08002e1c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002e24:	f7ff ff22 	bl	8002c6c <LL_RCC_GetAHBPrescaler>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	4013      	ands	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <RCC_GetHCLKClockFreq+0x28>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	001a      	movs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	40d3      	lsrs	r3, r2
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b002      	add	sp, #8
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	080038e4 	.word	0x080038e4

08002e48 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002e50:	f7ff ff18 	bl	8002c84 <LL_RCC_GetAPB1Prescaler>
 8002e54:	0003      	movs	r3, r0
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <RCC_GetPCLK1ClockFreq+0x24>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	001a      	movs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	40d3      	lsrs	r3, r2
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b002      	add	sp, #8
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	080038f4 	.word	0x080038f4

08002e70 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002e7e:	f7ff ff21 	bl	8002cc4 <LL_RCC_PLL_GetMainSource>
 8002e82:	0003      	movs	r3, r0
 8002e84:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	025b      	lsls	r3, r3, #9
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d003      	beq.n	8002e9e <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8002e96:	e005      	b.n	8002ea4 <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8002e9a:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002e9c:	e005      	b.n	8002eaa <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002ea0:	607b      	str	r3, [r7, #4]
      break;
 8002ea2:	e002      	b.n	8002eaa <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8002ea6:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002ea8:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002eaa:	f7ff ff23 	bl	8002cf4 <LL_RCC_PLL_GetPrediv>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fd f927 	bl	8000108 <__udivsi3>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	001c      	movs	r4, r3
 8002ebe:	f7ff ff0d 	bl	8002cdc <LL_RCC_PLL_GetMultiplicator>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	0c9b      	lsrs	r3, r3, #18
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	4013      	ands	r3, r2
 8002eca:	3302      	adds	r3, #2
 8002ecc:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002ece:	0018      	movs	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b003      	add	sp, #12
 8002ed4:	bd90      	pop	{r4, r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	003d0900 	.word	0x003d0900
 8002edc:	007a1200 	.word	0x007a1200

08002ee0 <LL_TIM_SetPrescaler>:
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <LL_TIM_SetAutoReload>:
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <LL_TIM_SetRepetitionCounter>:
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <LL_TIM_OC_SetCompareCH1>:
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <LL_TIM_OC_SetCompareCH2>:
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <LL_TIM_OC_SetCompareCH3>:
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <LL_TIM_OC_SetCompareCH4>:
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	2201      	movs	r2, #1
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	615a      	str	r2, [r3, #20]
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a35      	ldr	r2, [pc, #212]	; (800308c <LL_TIM_Init+0xe8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d008      	beq.n	8002fce <LL_TIM_Init+0x2a>
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	05db      	lsls	r3, r3, #23
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d003      	beq.n	8002fce <LL_TIM_Init+0x2a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a31      	ldr	r2, [pc, #196]	; (8003090 <LL_TIM_Init+0xec>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d107      	bne.n	8002fde <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2270      	movs	r2, #112	; 0x70
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a2a      	ldr	r2, [pc, #168]	; (800308c <LL_TIM_Init+0xe8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d018      	beq.n	8003018 <LL_TIM_Init+0x74>
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	05db      	lsls	r3, r3, #23
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d013      	beq.n	8003018 <LL_TIM_Init+0x74>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a27      	ldr	r2, [pc, #156]	; (8003090 <LL_TIM_Init+0xec>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00f      	beq.n	8003018 <LL_TIM_Init+0x74>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a26      	ldr	r2, [pc, #152]	; (8003094 <LL_TIM_Init+0xf0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <LL_TIM_Init+0x74>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a25      	ldr	r2, [pc, #148]	; (8003098 <LL_TIM_Init+0xf4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <LL_TIM_Init+0x74>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a24      	ldr	r2, [pc, #144]	; (800309c <LL_TIM_Init+0xf8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <LL_TIM_Init+0x74>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a23      	ldr	r2, [pc, #140]	; (80030a0 <LL_TIM_Init+0xfc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d106      	bne.n	8003026 <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a22      	ldr	r2, [pc, #136]	; (80030a4 <LL_TIM_Init+0x100>)
 800301c:	401a      	ands	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	0011      	movs	r1, r2
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff ff5f 	bl	8002ef8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	001a      	movs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0011      	movs	r1, r2
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff ff4b 	bl	8002ee0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a0f      	ldr	r2, [pc, #60]	; (800308c <LL_TIM_Init+0xe8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00b      	beq.n	800306a <LL_TIM_Init+0xc6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a10      	ldr	r2, [pc, #64]	; (8003098 <LL_TIM_Init+0xf4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <LL_TIM_Init+0xc6>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a0f      	ldr	r2, [pc, #60]	; (800309c <LL_TIM_Init+0xf8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d003      	beq.n	800306a <LL_TIM_Init+0xc6>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <LL_TIM_Init+0xfc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d106      	bne.n	8003078 <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	0011      	movs	r1, r2
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff ff4c 	bl	8002f10 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff ff84 	bl	8002f88 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003080:	2300      	movs	r3, #0
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b004      	add	sp, #16
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40000400 	.word	0x40000400
 8003094:	40002000 	.word	0x40002000
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400
 80030a0:	40014800 	.word	0x40014800
 80030a4:	fffffcff 	.word	0xfffffcff

080030a8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80030b4:	2317      	movs	r3, #23
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	015b      	lsls	r3, r3, #5
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d036      	beq.n	8003134 <LL_TIM_OC_Init+0x8c>
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	015b      	lsls	r3, r3, #5
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d83c      	bhi.n	800314a <LL_TIM_OC_Init+0xa2>
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d021      	beq.n	800311e <LL_TIM_OC_Init+0x76>
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d832      	bhi.n	800314a <LL_TIM_OC_Init+0xa2>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d003      	beq.n	80030f2 <LL_TIM_OC_Init+0x4a>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d00b      	beq.n	8003108 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80030f0:	e02b      	b.n	800314a <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80030f2:	2317      	movs	r3, #23
 80030f4:	18fc      	adds	r4, r7, r3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	0011      	movs	r1, r2
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 f82d 	bl	800315c <OC1Config>
 8003102:	0003      	movs	r3, r0
 8003104:	7023      	strb	r3, [r4, #0]
      break;
 8003106:	e021      	b.n	800314c <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003108:	2317      	movs	r3, #23
 800310a:	18fc      	adds	r4, r7, r3
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	0011      	movs	r1, r2
 8003112:	0018      	movs	r0, r3
 8003114:	f000 f8a6 	bl	8003264 <OC2Config>
 8003118:	0003      	movs	r3, r0
 800311a:	7023      	strb	r3, [r4, #0]
      break;
 800311c:	e016      	b.n	800314c <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800311e:	2317      	movs	r3, #23
 8003120:	18fc      	adds	r4, r7, r3
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	0011      	movs	r1, r2
 8003128:	0018      	movs	r0, r3
 800312a:	f000 f925 	bl	8003378 <OC3Config>
 800312e:	0003      	movs	r3, r0
 8003130:	7023      	strb	r3, [r4, #0]
      break;
 8003132:	e00b      	b.n	800314c <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003134:	2317      	movs	r3, #23
 8003136:	18fc      	adds	r4, r7, r3
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	0011      	movs	r1, r2
 800313e:	0018      	movs	r0, r3
 8003140:	f000 f9a4 	bl	800348c <OC4Config>
 8003144:	0003      	movs	r3, r0
 8003146:	7023      	strb	r3, [r4, #0]
      break;
 8003148:	e000      	b.n	800314c <LL_TIM_OC_Init+0xa4>
      break;
 800314a:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 800314c:	2317      	movs	r3, #23
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	781b      	ldrb	r3, [r3, #0]
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b007      	add	sp, #28
 8003158:	bd90      	pop	{r4, r7, pc}
	...

0800315c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	2201      	movs	r2, #1
 800316c:	4393      	bics	r3, r2
 800316e:	001a      	movs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2203      	movs	r2, #3
 800318a:	4393      	bics	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2270      	movs	r2, #112	; 0x70
 8003192:	4393      	bics	r3, r2
 8003194:	001a      	movs	r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2202      	movs	r2, #2
 80031a2:	4393      	bics	r3, r2
 80031a4:	001a      	movs	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2201      	movs	r2, #1
 80031b2:	4393      	bics	r3, r2
 80031b4:	001a      	movs	r2, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a22      	ldr	r2, [pc, #136]	; (800324c <OC1Config+0xf0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00b      	beq.n	80031de <OC1Config+0x82>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a21      	ldr	r2, [pc, #132]	; (8003250 <OC1Config+0xf4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <OC1Config+0x82>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a20      	ldr	r2, [pc, #128]	; (8003254 <OC1Config+0xf8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d003      	beq.n	80031de <OC1Config+0x82>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <OC1Config+0xfc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d120      	bne.n	8003220 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2208      	movs	r2, #8
 80031e2:	4393      	bics	r3, r2
 80031e4:	001a      	movs	r2, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2204      	movs	r2, #4
 80031f4:	4393      	bics	r3, r2
 80031f6:	001a      	movs	r2, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4a15      	ldr	r2, [pc, #84]	; (800325c <OC1Config+0x100>)
 8003206:	401a      	ands	r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4a13      	ldr	r2, [pc, #76]	; (8003260 <OC1Config+0x104>)
 8003214:	401a      	ands	r2, r3
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0011      	movs	r1, r2
 8003234:	0018      	movs	r0, r3
 8003236:	f7ff fe77 	bl	8002f28 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003240:	2300      	movs	r3, #0
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b006      	add	sp, #24
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800
 800325c:	fffffeff 	.word	0xfffffeff
 8003260:	fffffdff 	.word	0xfffffdff

08003264 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	2210      	movs	r2, #16
 8003274:	4393      	bics	r3, r2
 8003276:	001a      	movs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a31      	ldr	r2, [pc, #196]	; (8003358 <OC2Config+0xf4>)
 8003292:	4013      	ands	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a30      	ldr	r2, [pc, #192]	; (800335c <OC2Config+0xf8>)
 800329a:	401a      	ands	r2, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2220      	movs	r2, #32
 80032aa:	4393      	bics	r3, r2
 80032ac:	001a      	movs	r2, r3
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2210      	movs	r2, #16
 80032bc:	4393      	bics	r3, r2
 80032be:	001a      	movs	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a24      	ldr	r2, [pc, #144]	; (8003360 <OC2Config+0xfc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00b      	beq.n	80032ea <OC2Config+0x86>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a23      	ldr	r2, [pc, #140]	; (8003364 <OC2Config+0x100>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <OC2Config+0x86>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <OC2Config+0x104>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d003      	beq.n	80032ea <OC2Config+0x86>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a21      	ldr	r2, [pc, #132]	; (800336c <OC2Config+0x108>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d121      	bne.n	800332e <OC2Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2280      	movs	r2, #128	; 0x80
 80032ee:	4393      	bics	r3, r2
 80032f0:	001a      	movs	r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	019b      	lsls	r3, r3, #6
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2240      	movs	r2, #64	; 0x40
 8003300:	4393      	bics	r3, r2
 8003302:	001a      	movs	r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	019b      	lsls	r3, r3, #6
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4a17      	ldr	r2, [pc, #92]	; (8003370 <OC2Config+0x10c>)
 8003312:	401a      	ands	r2, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <OC2Config+0x110>)
 8003322:	401a      	ands	r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0011      	movs	r1, r2
 8003342:	0018      	movs	r0, r3
 8003344:	f7ff fdfc 	bl	8002f40 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800334e:	2300      	movs	r3, #0
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	b006      	add	sp, #24
 8003356:	bd80      	pop	{r7, pc}
 8003358:	fffffcff 	.word	0xfffffcff
 800335c:	ffff8fff 	.word	0xffff8fff
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800
 8003370:	fffffbff 	.word	0xfffffbff
 8003374:	fffff7ff 	.word	0xfffff7ff

08003378 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4a37      	ldr	r2, [pc, #220]	; (8003464 <OC3Config+0xec>)
 8003388:	401a      	ands	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2203      	movs	r2, #3
 80033a4:	4393      	bics	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2270      	movs	r2, #112	; 0x70
 80033ac:	4393      	bics	r3, r2
 80033ae:	001a      	movs	r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	4a2b      	ldr	r2, [pc, #172]	; (8003468 <OC3Config+0xf0>)
 80033bc:	401a      	ands	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	4a26      	ldr	r2, [pc, #152]	; (8003464 <OC3Config+0xec>)
 80033cc:	401a      	ands	r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a24      	ldr	r2, [pc, #144]	; (800346c <OC3Config+0xf4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00b      	beq.n	80033f8 <OC3Config+0x80>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a23      	ldr	r2, [pc, #140]	; (8003470 <OC3Config+0xf8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <OC3Config+0x80>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a22      	ldr	r2, [pc, #136]	; (8003474 <OC3Config+0xfc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <OC3Config+0x80>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a21      	ldr	r2, [pc, #132]	; (8003478 <OC3Config+0x100>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d11f      	bne.n	8003438 <OC3Config+0xc0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	4a20      	ldr	r2, [pc, #128]	; (800347c <OC3Config+0x104>)
 80033fc:	401a      	ands	r2, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	029b      	lsls	r3, r3, #10
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <OC3Config+0x108>)
 800340c:	401a      	ands	r2, r3
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <OC3Config+0x10c>)
 800341c:	401a      	ands	r2, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <OC3Config+0x110>)
 800342c:	401a      	ands	r2, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	015b      	lsls	r3, r3, #5
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0011      	movs	r1, r2
 800344c:	0018      	movs	r0, r3
 800344e:	f7ff fd83 	bl	8002f58 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b006      	add	sp, #24
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	fffffeff 	.word	0xfffffeff
 8003468:	fffffdff 	.word	0xfffffdff
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40014000 	.word	0x40014000
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800
 800347c:	fffff7ff 	.word	0xfffff7ff
 8003480:	fffffbff 	.word	0xfffffbff
 8003484:	ffffefff 	.word	0xffffefff
 8003488:	ffffdfff 	.word	0xffffdfff

0800348c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <OC4Config+0xbc>)
 800349c:	401a      	ands	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a25      	ldr	r2, [pc, #148]	; (800354c <OC4Config+0xc0>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a24      	ldr	r2, [pc, #144]	; (8003550 <OC4Config+0xc4>)
 80034c0:	401a      	ands	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4a21      	ldr	r2, [pc, #132]	; (8003554 <OC4Config+0xc8>)
 80034d0:	401a      	ands	r2, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	031b      	lsls	r3, r3, #12
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <OC4Config+0xbc>)
 80034e0:	401a      	ands	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	031b      	lsls	r3, r3, #12
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <OC4Config+0xcc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00b      	beq.n	800350c <OC4Config+0x80>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a19      	ldr	r2, [pc, #100]	; (800355c <OC4Config+0xd0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <OC4Config+0x80>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a18      	ldr	r2, [pc, #96]	; (8003560 <OC4Config+0xd4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <OC4Config+0x80>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a17      	ldr	r2, [pc, #92]	; (8003564 <OC4Config+0xd8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d107      	bne.n	800351c <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <OC4Config+0xdc>)
 8003510:	401a      	ands	r2, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	019b      	lsls	r3, r3, #6
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0011      	movs	r1, r2
 8003530:	0018      	movs	r0, r3
 8003532:	f7ff fd1d 	bl	8002f70 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800353c:	2300      	movs	r3, #0
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b006      	add	sp, #24
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	ffffefff 	.word	0xffffefff
 800354c:	fffffcff 	.word	0xfffffcff
 8003550:	ffff8fff 	.word	0xffff8fff
 8003554:	ffffdfff 	.word	0xffffdfff
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800
 8003568:	ffffbfff 	.word	0xffffbfff

0800356c <LL_USART_IsEnabled>:
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <LL_USART_IsEnabled+0x18>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <LL_USART_IsEnabled+0x1a>
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <LL_USART_SetStopBitsLength>:
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <LL_USART_SetStopBitsLength+0x24>)
 80035a0:	401a      	ands	r2, r3
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	605a      	str	r2, [r3, #4]
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b002      	add	sp, #8
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	ffffcfff 	.word	0xffffcfff

080035b8 <LL_USART_SetHWFlowCtrl>:
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4a05      	ldr	r2, [pc, #20]	; (80035dc <LL_USART_SetHWFlowCtrl+0x24>)
 80035c8:	401a      	ands	r2, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	609a      	str	r2, [r3, #8]
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b002      	add	sp, #8
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	fffffcff 	.word	0xfffffcff

080035e0 <LL_USART_SetBaudRate>:
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d11c      	bne.n	8003632 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	005a      	lsls	r2, r3, #1
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	18d3      	adds	r3, r2, r3
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	0018      	movs	r0, r3
 8003606:	f7fc fd7f 	bl	8000108 <__udivsi3>
 800360a:	0003      	movs	r3, r0
 800360c:	b29b      	uxth	r3, r3
 800360e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	4a10      	ldr	r2, [pc, #64]	; (8003654 <LL_USART_SetBaudRate+0x74>)
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	b29b      	uxth	r3, r3
 800361e:	001a      	movs	r2, r3
 8003620:	2307      	movs	r3, #7
 8003622:	4013      	ands	r3, r2
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	60da      	str	r2, [r3, #12]
}
 8003630:	e00c      	b.n	800364c <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	085a      	lsrs	r2, r3, #1
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	18d3      	adds	r3, r2, r3
 800363a:	6839      	ldr	r1, [r7, #0]
 800363c:	0018      	movs	r0, r3
 800363e:	f7fc fd63 	bl	8000108 <__udivsi3>
 8003642:	0003      	movs	r3, r0
 8003644:	b29b      	uxth	r3, r3
 8003646:	001a      	movs	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	60da      	str	r2, [r3, #12]
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b006      	add	sp, #24
 8003652:	bd80      	pop	{r7, pc}
 8003654:	0000fff0 	.word	0x0000fff0

08003658 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003662:	231f      	movs	r3, #31
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	0018      	movs	r0, r3
 8003672:	f7ff ff7b 	bl	800356c <LL_USART_IsEnabled>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d148      	bne.n	800370c <LL_USART_Init+0xb4>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a27      	ldr	r2, [pc, #156]	; (800371c <LL_USART_Init+0xc4>)
 8003680:	401a      	ands	r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4319      	orrs	r1, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	4319      	orrs	r1, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	430b      	orrs	r3, r1
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0011      	movs	r1, r2
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7ff ff72 	bl	8003590 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7ff ff7f 	bl	80035b8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <LL_USART_Init+0xc8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d105      	bne.n	80036ce <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80036c2:	2000      	movs	r0, #0
 80036c4:	f7ff fb40 	bl	8002d48 <LL_RCC_GetUSARTClockFreq>
 80036c8:	0003      	movs	r3, r0
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e00b      	b.n	80036e6 <LL_USART_Init+0x8e>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <LL_USART_Init+0xcc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d107      	bne.n	80036e6 <LL_USART_Init+0x8e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80036d6:	240c      	movs	r4, #12
 80036d8:	193b      	adds	r3, r7, r4
 80036da:	0018      	movs	r0, r3
 80036dc:	f7ff fb16 	bl	8002d0c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80036e0:	193b      	adds	r3, r7, r4
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00f      	beq.n	800370c <LL_USART_Init+0xb4>
        && (USART_InitStruct->BaudRate != 0U))
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <LL_USART_Init+0xb4>
    {
      status = SUCCESS;
 80036f4:	231f      	movs	r3, #31
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ff6a 	bl	80035e0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800370c:	231f      	movs	r3, #31
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	781b      	ldrb	r3, [r3, #0]
}
 8003712:	0018      	movs	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	b009      	add	sp, #36	; 0x24
 8003718:	bd90      	pop	{r4, r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	ffff69f3 	.word	0xffff69f3
 8003720:	40013800 	.word	0x40013800
 8003724:	40004400 	.word	0x40004400

08003728 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003732:	6839      	ldr	r1, [r7, #0]
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fc fce7 	bl	8000108 <__udivsi3>
 800373a:	0003      	movs	r3, r0
 800373c:	001a      	movs	r2, r3
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <LL_InitTick+0x30>)
 8003740:	3a01      	subs	r2, #1
 8003742:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <LL_InitTick+0x30>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374a:	4b03      	ldr	r3, [pc, #12]	; (8003758 <LL_InitTick+0x30>)
 800374c:	2205      	movs	r2, #5
 800374e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}
 8003758:	e000e010 	.word	0xe000e010

0800375c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003764:	23fa      	movs	r3, #250	; 0xfa
 8003766:	009a      	lsls	r2, r3, #2
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	0011      	movs	r1, r2
 800376c:	0018      	movs	r0, r3
 800376e:	f7ff ffdb 	bl	8003728 <LL_InitTick>
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b002      	add	sp, #8
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003784:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <LL_mDelay+0x40>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800378a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3301      	adds	r3, #1
 8003790:	d00c      	beq.n	80037ac <LL_mDelay+0x30>
  {
    Delay++;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3301      	adds	r3, #1
 8003796:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003798:	e008      	b.n	80037ac <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <LL_mDelay+0x40>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	025b      	lsls	r3, r3, #9
 80037a2:	4013      	ands	r3, r2
 80037a4:	d002      	beq.n	80037ac <LL_mDelay+0x30>
    {
      Delay--;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	607b      	str	r3, [r7, #4]
  while (Delay)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f3      	bne.n	800379a <LL_mDelay+0x1e>
    }
  }
}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b004      	add	sp, #16
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	e000e010 	.word	0xe000e010

080037c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <LL_SetSystemCoreClock+0x18>)
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	601a      	str	r2, [r3, #0]
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b002      	add	sp, #8
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	20000000 	.word	0x20000000

080037dc <__errno>:
 80037dc:	4b01      	ldr	r3, [pc, #4]	; (80037e4 <__errno+0x8>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	4770      	bx	lr
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	20000008 	.word	0x20000008

080037e8 <__libc_init_array>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	2600      	movs	r6, #0
 80037ec:	4d0c      	ldr	r5, [pc, #48]	; (8003820 <__libc_init_array+0x38>)
 80037ee:	4c0d      	ldr	r4, [pc, #52]	; (8003824 <__libc_init_array+0x3c>)
 80037f0:	1b64      	subs	r4, r4, r5
 80037f2:	10a4      	asrs	r4, r4, #2
 80037f4:	42a6      	cmp	r6, r4
 80037f6:	d109      	bne.n	800380c <__libc_init_array+0x24>
 80037f8:	2600      	movs	r6, #0
 80037fa:	f000 f82b 	bl	8003854 <_init>
 80037fe:	4d0a      	ldr	r5, [pc, #40]	; (8003828 <__libc_init_array+0x40>)
 8003800:	4c0a      	ldr	r4, [pc, #40]	; (800382c <__libc_init_array+0x44>)
 8003802:	1b64      	subs	r4, r4, r5
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	42a6      	cmp	r6, r4
 8003808:	d105      	bne.n	8003816 <__libc_init_array+0x2e>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	00b3      	lsls	r3, r6, #2
 800380e:	58eb      	ldr	r3, [r5, r3]
 8003810:	4798      	blx	r3
 8003812:	3601      	adds	r6, #1
 8003814:	e7ee      	b.n	80037f4 <__libc_init_array+0xc>
 8003816:	00b3      	lsls	r3, r6, #2
 8003818:	58eb      	ldr	r3, [r5, r3]
 800381a:	4798      	blx	r3
 800381c:	3601      	adds	r6, #1
 800381e:	e7f2      	b.n	8003806 <__libc_init_array+0x1e>
 8003820:	08003914 	.word	0x08003914
 8003824:	08003914 	.word	0x08003914
 8003828:	08003914 	.word	0x08003914
 800382c:	08003918 	.word	0x08003918

08003830 <memcpy>:
 8003830:	2300      	movs	r3, #0
 8003832:	b510      	push	{r4, lr}
 8003834:	429a      	cmp	r2, r3
 8003836:	d100      	bne.n	800383a <memcpy+0xa>
 8003838:	bd10      	pop	{r4, pc}
 800383a:	5ccc      	ldrb	r4, [r1, r3]
 800383c:	54c4      	strb	r4, [r0, r3]
 800383e:	3301      	adds	r3, #1
 8003840:	e7f8      	b.n	8003834 <memcpy+0x4>

08003842 <memset>:
 8003842:	0003      	movs	r3, r0
 8003844:	1882      	adds	r2, r0, r2
 8003846:	4293      	cmp	r3, r2
 8003848:	d100      	bne.n	800384c <memset+0xa>
 800384a:	4770      	bx	lr
 800384c:	7019      	strb	r1, [r3, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	e7f9      	b.n	8003846 <memset+0x4>
	...

08003854 <_init>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385a:	bc08      	pop	{r3}
 800385c:	469e      	mov	lr, r3
 800385e:	4770      	bx	lr

08003860 <_fini>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003866:	bc08      	pop	{r3}
 8003868:	469e      	mov	lr, r3
 800386a:	4770      	bx	lr
