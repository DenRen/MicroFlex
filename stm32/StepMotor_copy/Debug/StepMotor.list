
StepMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b30  08003b30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b30  08003b30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b30  08003b30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000070  08003ba8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003ba8  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8b4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002100  00000000  00000000  0002a94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002d448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e836  00000000  00000000  0002dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ce9  00000000  00000000  0003c56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00047b8d  00000000  00000000  00045257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008cde4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002260  00000000  00000000  0008ce38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a68 	.word	0x08003a68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003a68 	.word	0x08003a68

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6a1a      	ldr	r2, [r3, #32]
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	431a      	orrs	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	621a      	str	r2, [r3, #32]
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b002      	add	sp, #8
 8000410:	bd80      	pop	{r7, pc}

08000412 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	43d2      	mvns	r2, r2
 8000424:	401a      	ands	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	621a      	str	r2, [r3, #32]
}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b002      	add	sp, #8
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d01e      	beq.n	8000482 <LL_TIM_OC_EnablePreload+0x4e>
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	2b04      	cmp	r3, #4
 8000448:	d019      	beq.n	800047e <LL_TIM_OC_EnablePreload+0x4a>
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	2b10      	cmp	r3, #16
 800044e:	d014      	beq.n	800047a <LL_TIM_OC_EnablePreload+0x46>
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	2b40      	cmp	r3, #64	; 0x40
 8000454:	d00f      	beq.n	8000476 <LL_TIM_OC_EnablePreload+0x42>
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	429a      	cmp	r2, r3
 800045e:	d008      	beq.n	8000472 <LL_TIM_OC_EnablePreload+0x3e>
 8000460:	683a      	ldr	r2, [r7, #0]
 8000462:	2380      	movs	r3, #128	; 0x80
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	429a      	cmp	r2, r3
 8000468:	d101      	bne.n	800046e <LL_TIM_OC_EnablePreload+0x3a>
 800046a:	2305      	movs	r3, #5
 800046c:	e00a      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 800046e:	2306      	movs	r3, #6
 8000470:	e008      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 8000472:	2304      	movs	r3, #4
 8000474:	e006      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 8000476:	2303      	movs	r3, #3
 8000478:	e004      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 800047a:	2302      	movs	r3, #2
 800047c:	e002      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 800047e:	2301      	movs	r3, #1
 8000480:	e000      	b.n	8000484 <LL_TIM_OC_EnablePreload+0x50>
 8000482:	2300      	movs	r3, #0
 8000484:	200f      	movs	r0, #15
 8000486:	183a      	adds	r2, r7, r0
 8000488:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	3318      	adds	r3, #24
 800048e:	0019      	movs	r1, r3
 8000490:	183b      	adds	r3, r7, r0
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4a09      	ldr	r2, [pc, #36]	; (80004bc <LL_TIM_OC_EnablePreload+0x88>)
 8000496:	5cd3      	ldrb	r3, [r2, r3]
 8000498:	18cb      	adds	r3, r1, r3
 800049a:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	183b      	adds	r3, r7, r0
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4906      	ldr	r1, [pc, #24]	; (80004c0 <LL_TIM_OC_EnablePreload+0x8c>)
 80004a6:	5ccb      	ldrb	r3, [r1, r3]
 80004a8:	0019      	movs	r1, r3
 80004aa:	2308      	movs	r3, #8
 80004ac:	408b      	lsls	r3, r1
 80004ae:	431a      	orrs	r2, r3
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	601a      	str	r2, [r3, #0]
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b004      	add	sp, #16
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	08003ae0 	.word	0x08003ae0
 80004c0:	08003ae8 	.word	0x08003ae8

080004c4 <LL_TIM_OC_DisablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d01e      	beq.n	8000512 <LL_TIM_OC_DisablePreload+0x4e>
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d019      	beq.n	800050e <LL_TIM_OC_DisablePreload+0x4a>
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2b10      	cmp	r3, #16
 80004de:	d014      	beq.n	800050a <LL_TIM_OC_DisablePreload+0x46>
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2b40      	cmp	r3, #64	; 0x40
 80004e4:	d00f      	beq.n	8000506 <LL_TIM_OC_DisablePreload+0x42>
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d008      	beq.n	8000502 <LL_TIM_OC_DisablePreload+0x3e>
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d101      	bne.n	80004fe <LL_TIM_OC_DisablePreload+0x3a>
 80004fa:	2305      	movs	r3, #5
 80004fc:	e00a      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 80004fe:	2306      	movs	r3, #6
 8000500:	e008      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 8000502:	2304      	movs	r3, #4
 8000504:	e006      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 8000506:	2303      	movs	r3, #3
 8000508:	e004      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 800050a:	2302      	movs	r3, #2
 800050c:	e002      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 800050e:	2301      	movs	r3, #1
 8000510:	e000      	b.n	8000514 <LL_TIM_OC_DisablePreload+0x50>
 8000512:	2300      	movs	r3, #0
 8000514:	200f      	movs	r0, #15
 8000516:	183a      	adds	r2, r7, r0
 8000518:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3318      	adds	r3, #24
 800051e:	0019      	movs	r1, r3
 8000520:	183b      	adds	r3, r7, r0
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <LL_TIM_OC_DisablePreload+0x8c>)
 8000526:	5cd3      	ldrb	r3, [r2, r3]
 8000528:	18cb      	adds	r3, r1, r3
 800052a:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	183a      	adds	r2, r7, r0
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	4907      	ldr	r1, [pc, #28]	; (8000554 <LL_TIM_OC_DisablePreload+0x90>)
 8000536:	5c8a      	ldrb	r2, [r1, r2]
 8000538:	0011      	movs	r1, r2
 800053a:	2208      	movs	r2, #8
 800053c:	408a      	lsls	r2, r1
 800053e:	43d2      	mvns	r2, r2
 8000540:	401a      	ands	r2, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	601a      	str	r2, [r3, #0]
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	08003ae0 	.word	0x08003ae0
 8000554:	08003ae8 	.word	0x08003ae8

08000558 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b002      	add	sp, #8
 800056e:	bd80      	pop	{r7, pc}

08000570 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}

08000588 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b002      	add	sp, #8
 800059e:	bd80      	pop	{r7, pc}

080005a0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	619a      	str	r2, [r3, #24]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b002      	add	sp, #8
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <SM_Wire_Verificator>:

// ==================================\\
// Verifiers of the above structures  --------------------------------------------------------
// ==================================//

__STATIC_INLINE int SM_Wire_Verificator (wire_t* wire) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    return wire       != NULL &&
           wire->port != NULL &&
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d00b      	beq.n	80005f6 <SM_Wire_Verificator+0x26>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
    return wire       != NULL &&
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d007      	beq.n	80005f6 <SM_Wire_Verificator+0x26>
           wire->pin  <= LL_GPIO_PIN_ALL;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
           wire->port != NULL &&
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	025b      	lsls	r3, r3, #9
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d201      	bcs.n	80005f6 <SM_Wire_Verificator+0x26>
 80005f2:	2301      	movs	r3, #1
 80005f4:	e000      	b.n	80005f8 <SM_Wire_Verificator+0x28>
 80005f6:	2300      	movs	r3, #0
} 
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}

08000600 <SM_Timer_Channel_Verificator>:
__STATIC_INLINE int SM_Timer_Channel_Verificator (timer_channel_t* timer_channel) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    return timer_channel              != NULL &&
           timer_channel->TIMx        != NULL &&
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00b      	beq.n	8000626 <SM_Timer_Channel_Verificator+0x26>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
    return timer_channel              != NULL &&
 8000612:	2b00      	cmp	r3, #0
 8000614:	d007      	beq.n	8000626 <SM_Timer_Channel_Verificator+0x26>
           timer_channel->CHANNEL_CHx <= LL_TIM_CHANNEL_CH4;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	685a      	ldr	r2, [r3, #4]
           timer_channel->TIMx        != NULL &&
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	015b      	lsls	r3, r3, #5
 800061e:	429a      	cmp	r2, r3
 8000620:	d801      	bhi.n	8000626 <SM_Timer_Channel_Verificator+0x26>
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <SM_Timer_Channel_Verificator+0x28>
 8000626:	2300      	movs	r3, #0
}
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b002      	add	sp, #8
 800062e:	bd80      	pop	{r7, pc}

08000630 <SM_Step_Motor_Verificator>:
__STATIC_INLINE int SM_Step_Motor_Verificator (step_motor_t* step_motor) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    return (SM_Timer_Channel_Verificator (&step_motor->timer_channel) == -1) &&
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ffe0 	bl	8000600 <SM_Timer_Channel_Verificator>
 8000640:	0003      	movs	r3, r0
           (SM_Wire_Verificator          (&step_motor->dir)           == -1) &&
 8000642:	3301      	adds	r3, #1
 8000644:	d111      	bne.n	800066a <SM_Step_Motor_Verificator+0x3a>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3308      	adds	r3, #8
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ffc0 	bl	80005d0 <SM_Wire_Verificator>
 8000650:	0003      	movs	r3, r0
    return (SM_Timer_Channel_Verificator (&step_motor->timer_channel) == -1) &&
 8000652:	3301      	adds	r3, #1
 8000654:	d109      	bne.n	800066a <SM_Step_Motor_Verificator+0x3a>
           (SM_Wire_Verificator          (&step_motor->enable)        == -1);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3310      	adds	r3, #16
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff ffb8 	bl	80005d0 <SM_Wire_Verificator>
 8000660:	0003      	movs	r3, r0
           (SM_Wire_Verificator          (&step_motor->dir)           == -1) &&
 8000662:	3301      	adds	r3, #1
 8000664:	d101      	bne.n	800066a <SM_Step_Motor_Verificator+0x3a>
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <SM_Step_Motor_Verificator+0x3c>
 800066a:	2300      	movs	r3, #0
}
 800066c:	0018      	movs	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}

08000674 <SM_Enable>:
// Enable/Disable and Direction functions ----------------------------------------------------
// ======================================//

// !!! This functions don't check on NULL pointer

__STATIC_INLINE void SM_Enable  (const step_motor_t* stepMotor) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    LL_GPIO_ResetOutputPin (stepMotor->enable.port, stepMotor->enable.pin);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	691a      	ldr	r2, [r3, #16]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	0019      	movs	r1, r3
 8000686:	0010      	movs	r0, r2
 8000688:	f7ff ff96 	bl	80005b8 <LL_GPIO_ResetOutputPin>
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b002      	add	sp, #8
 8000692:	bd80      	pop	{r7, pc}

08000694 <SM_Set_Dir_ClockWise>:
__STATIC_INLINE void SM_Disable (const step_motor_t* stepMotor) {
    LL_GPIO_SetOutputPin (stepMotor->enable.port, stepMotor->enable.pin);
}

__STATIC_INLINE void SM_Set_Dir_ClockWise        (const step_motor_t* stepMotor) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    LL_GPIO_SetOutputPin (stepMotor->dir.port, stepMotor->dir.pin);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	0019      	movs	r1, r3
 80006a6:	0010      	movs	r0, r2
 80006a8:	f7ff ff7a 	bl	80005a0 <LL_GPIO_SetOutputPin>
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SM_Set_Dir_CounterClockWise>:
__STATIC_INLINE void SM_Set_Dir_CounterClockWise (const step_motor_t* stepMotor) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    LL_GPIO_ResetOutputPin (stepMotor->dir.port, stepMotor->dir.pin);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0019      	movs	r1, r3
 80006c6:	0010      	movs	r0, r2
 80006c8:	f7ff ff76 	bl	80005b8 <LL_GPIO_ResetOutputPin>
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SM_Set_Direction>:
__STATIC_INLINE void SM_Set_Direction            (const step_motor_t* stepMotor, uint8_t direction) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	000a      	movs	r2, r1
 80006de:	1cfb      	adds	r3, r7, #3
 80006e0:	701a      	strb	r2, [r3, #0]
    if (direction > 0)
 80006e2:	1cfb      	adds	r3, r7, #3
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d004      	beq.n	80006f4 <SM_Set_Direction+0x20>
        SM_Set_Dir_ClockWise (stepMotor);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff ffd1 	bl	8000694 <SM_Set_Dir_ClockWise>
    else
        SM_Set_Dir_CounterClockWise (stepMotor);
}
 80006f2:	e003      	b.n	80006fc <SM_Set_Direction+0x28>
        SM_Set_Dir_CounterClockWise (stepMotor);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ffdc 	bl	80006b4 <SM_Set_Dir_CounterClockWise>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b002      	add	sp, #8
 8000702:	bd80      	pop	{r7, pc}

08000704 <SM_Disable_TIM_Channel>:

void SM_Enable_TIM_Channel (timer_channel_t timer_channel) {
    LL_TIM_CC_EnableChannel (timer_channel.TIMx, timer_channel.CHANNEL_CHx);
}

void SM_Disable_TIM_Channel (timer_channel_t timer_channel) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	003b      	movs	r3, r7
 800070c:	6018      	str	r0, [r3, #0]
 800070e:	6059      	str	r1, [r3, #4]
    LL_TIM_CC_DisableChannel (timer_channel.TIMx, timer_channel.CHANNEL_CHx);
 8000710:	003b      	movs	r3, r7
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	003b      	movs	r3, r7
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	0019      	movs	r1, r3
 800071a:	0010      	movs	r0, r2
 800071c:	f7ff fe79 	bl	8000412 <LL_TIM_CC_DisableChannel>
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}

08000728 <ST_Step_Driver>:

// Только для одного таймера
void ST_Step_Driver () {
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b092      	sub	sp, #72	; 0x48
 800072c:	af00      	add	r7, sp, #0
        LL_TIM_OC_DisablePreload (SM_PULSE_TIMER, LL_TIM_CHANNEL_CH##num_channel);
    
    #define SET_COMPARE_CHx(num_channel)\
        LL_TIM_OC_SetCompareCH##num_channel (SM_PULSE_TIMER, 0);

    if (channels_is_active) {
 800072e:	4b87      	ldr	r3, [pc, #540]	; (800094c <ST_Step_Driver+0x224>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d028      	beq.n	8000788 <ST_Step_Driver+0x60>
        #if NUMBER_STEP_MOTORS >= (1)
            DISABLE_PRELOAD_CHx   (1)
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	2101      	movs	r1, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fec1 	bl	80004c4 <LL_TIM_OC_DisablePreload>
            SET_COMPARE_CHx       (1)
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2100      	movs	r1, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff ff05 	bl	8000558 <LL_TIM_OC_SetCompareCH1>
        #endif
        #if NUMBER_STEP_MOTORS >= (2)
            DISABLE_PRELOAD_CHx   (2)
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	2110      	movs	r1, #16
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff feb5 	bl	80004c4 <LL_TIM_OC_DisablePreload>
            SET_COMPARE_CHx       (2)
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ff05 	bl	8000570 <LL_TIM_OC_SetCompareCH2>
        #endif
        #if NUMBER_STEP_MOTORS >= (3)
            DISABLE_PRELOAD_CHx   (3)
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	005a      	lsls	r2, r3, #1
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fea7 	bl	80004c4 <LL_TIM_OC_DisablePreload>
            SET_COMPARE_CHx       (3)
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2100      	movs	r1, #0
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff ff03 	bl	8000588 <LL_TIM_OC_SetCompareCH3>
        #if NUMBER_STEP_MOTORS >= (4)
            DISABLE_PRELOAD_CHx   (4)
            SET_COMPARE_CHx       (4)
        #endif
        
        channels_is_active = 0;
 8000782:	4b72      	ldr	r3, [pc, #456]	; (800094c <ST_Step_Driver+0x224>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
    }
    
    #undef SET_COMPARE_CHx
    #undef DISABLE_PRELOAD_CHx

    for (uint32_t num_sm = 0; num_sm < NUMBER_STEP_MOTORS; ++num_sm) {
 8000788:	2300      	movs	r3, #0
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
 800078c:	e0d5      	b.n	800093a <ST_Step_Driver+0x212>
        uint16_t* number_steps = &(drimem.unit_task[num_sm].number_steps);
 800078e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000790:	0013      	movs	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	189b      	adds	r3, r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	3348      	adds	r3, #72	; 0x48
 800079a:	001a      	movs	r2, r3
 800079c:	4b6c      	ldr	r3, [pc, #432]	; (8000950 <ST_Step_Driver+0x228>)
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40

        if (*number_steps) {      
 80007a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <ST_Step_Driver+0x84>
 80007aa:	e0c3      	b.n	8000934 <ST_Step_Driver+0x20c>
            sm_unit_task_t unit_task = drimem.unit_task[num_sm];
 80007ac:	2508      	movs	r5, #8
 80007ae:	197c      	adds	r4, r7, r5
 80007b0:	4967      	ldr	r1, [pc, #412]	; (8000950 <ST_Step_Driver+0x228>)
 80007b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007b4:	2048      	movs	r0, #72	; 0x48
 80007b6:	0013      	movs	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	189b      	adds	r3, r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	18cb      	adds	r3, r1, r3
 80007c0:	181b      	adds	r3, r3, r0
 80007c2:	0020      	movs	r0, r4
 80007c4:	0019      	movs	r1, r3
 80007c6:	2306      	movs	r3, #6
 80007c8:	001a      	movs	r2, r3
 80007ca:	f003 f93b 	bl	8003a44 <memcpy>
            uint32_t counter = ++(drimem.counters[num_sm]);
 80007ce:	4a60      	ldr	r2, [pc, #384]	; (8000950 <ST_Step_Driver+0x228>)
 80007d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007d2:	3316      	adds	r3, #22
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	18d3      	adds	r3, r2, r3
 80007d8:	3304      	adds	r3, #4
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	495c      	ldr	r1, [pc, #368]	; (8000950 <ST_Step_Driver+0x228>)
 80007e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007e2:	3316      	adds	r3, #22
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	18cb      	adds	r3, r1, r3
 80007e8:	3304      	adds	r3, #4
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	4a58      	ldr	r2, [pc, #352]	; (8000950 <ST_Step_Driver+0x228>)
 80007ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007f0:	3316      	adds	r3, #22
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	3304      	adds	r3, #4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (counter == unit_task.timer_counter || counter == 0) {
 80007fc:	197b      	adds	r3, r7, r5
 80007fe:	885b      	ldrh	r3, [r3, #2]
 8000800:	001a      	movs	r2, r3
 8000802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000804:	4293      	cmp	r3, r2
 8000806:	d003      	beq.n	8000810 <ST_Step_Driver+0xe8>
 8000808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800080a:	2b00      	cmp	r3, #0
 800080c:	d000      	beq.n	8000810 <ST_Step_Driver+0xe8>
 800080e:	e091      	b.n	8000934 <ST_Step_Driver+0x20c>
                drimem.counters[num_sm] = 0;
 8000810:	4a4f      	ldr	r2, [pc, #316]	; (8000950 <ST_Step_Driver+0x228>)
 8000812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000814:	3316      	adds	r3, #22
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	18d3      	adds	r3, r2, r3
 800081a:	3304      	adds	r3, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
                
                (*number_steps)--;
 8000820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	3b01      	subs	r3, #1
 8000826:	b29a      	uxth	r2, r3
 8000828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800082a:	801a      	strh	r2, [r3, #0]

                channels_is_active = 1;
 800082c:	4b47      	ldr	r3, [pc, #284]	; (800094c <ST_Step_Driver+0x224>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
                const timer_channel_t timer_channel = drimem.step_motor[num_sm].timer_channel;
 8000832:	0038      	movs	r0, r7
 8000834:	4946      	ldr	r1, [pc, #280]	; (8000950 <ST_Step_Driver+0x228>)
 8000836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000838:	0013      	movs	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	189b      	adds	r3, r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	0002      	movs	r2, r0
 8000842:	18cb      	adds	r3, r1, r3
 8000844:	cb03      	ldmia	r3!, {r0, r1}
 8000846:	c203      	stmia	r2!, {r0, r1}

                TIM_TypeDef* TIMx = timer_channel.TIMx;
 8000848:	003b      	movs	r3, r7
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38
                uint32_t TIM_CHANNEL_CHx = timer_channel.CHANNEL_CHx;
 800084e:	003b      	movs	r3, r7
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
                #define CASE_PREPARE_PULSECHx(x)                                            \
                case ((x) - 1):                                                             \
                    Prepeare_PulseCH##x (TIMx, TIM_CHANNEL_CHx, PULSE_TIMER_COMPARE_VALUE); \
                    break;

                switch (num_sm) {
 8000854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000856:	2b02      	cmp	r3, #2
 8000858:	d047      	beq.n	80008ea <ST_Step_Driver+0x1c2>
 800085a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800085c:	2b02      	cmp	r3, #2
 800085e:	d863      	bhi.n	8000928 <ST_Step_Driver+0x200>
 8000860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000862:	2b00      	cmp	r3, #0
 8000864:	d003      	beq.n	800086e <ST_Step_Driver+0x146>
 8000866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000868:	2b01      	cmp	r3, #1
 800086a:	d01f      	beq.n	80008ac <ST_Step_Driver+0x184>
 800086c:	e05c      	b.n	8000928 <ST_Step_Driver+0x200>
 800086e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
 8000872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000876:	2309      	movs	r3, #9
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
    TEMPLATE_Prepeare_PulseCHx (1)
 800087a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800087c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff fe1f 	bl	80004c4 <LL_TIM_OC_DisablePreload>
 8000886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff fe63 	bl	8000558 <LL_TIM_OC_SetCompareCH1>
 8000892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff fdcb 	bl	8000434 <LL_TIM_OC_EnablePreload>
 800089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff fe58 	bl	8000558 <LL_TIM_OC_SetCompareCH1>
 80008a8:	46c0      	nop			; (mov r8, r8)
                    #if (NUMBER_STEP_MOTORS) >= (1)
                        CASE_PREPARE_PULSECHx   (1);
 80008aa:	e03d      	b.n	8000928 <ST_Step_Driver+0x200>
 80008ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
 80008b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b2:	623b      	str	r3, [r7, #32]
 80008b4:	2309      	movs	r3, #9
 80008b6:	61fb      	str	r3, [r7, #28]
    TEMPLATE_Prepeare_PulseCHx (2)
 80008b8:	6a3a      	ldr	r2, [r7, #32]
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff fe00 	bl	80004c4 <LL_TIM_OC_DisablePreload>
 80008c4:	69fa      	ldr	r2, [r7, #28]
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fe50 	bl	8000570 <LL_TIM_OC_SetCompareCH2>
 80008d0:	6a3a      	ldr	r2, [r7, #32]
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fdac 	bl	8000434 <LL_TIM_OC_EnablePreload>
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	2100      	movs	r1, #0
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff fe45 	bl	8000570 <LL_TIM_OC_SetCompareCH2>
 80008e6:	46c0      	nop			; (mov r8, r8)
                    #endif
                    #if (NUMBER_STEP_MOTORS) >= (2)
                        CASE_PREPARE_PULSECHx   (2);
 80008e8:	e01e      	b.n	8000928 <ST_Step_Driver+0x200>
 80008ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	2309      	movs	r3, #9
 80008f4:	613b      	str	r3, [r7, #16]
    TEMPLATE_Prepeare_PulseCHx (3)
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fde1 	bl	80004c4 <LL_TIM_OC_DisablePreload>
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff fe3d 	bl	8000588 <LL_TIM_OC_SetCompareCH3>
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f7ff fd8d 	bl	8000434 <LL_TIM_OC_EnablePreload>
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	2100      	movs	r1, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fe32 	bl	8000588 <LL_TIM_OC_SetCompareCH3>
 8000924:	46c0      	nop			; (mov r8, r8)
                    #endif
                    #if (NUMBER_STEP_MOTORS) >= (3)
                        CASE_PREPARE_PULSECHx   (3);
 8000926:	46c0      	nop			; (mov r8, r8)
                    #endif
                }

                #undef CASE_PREPARE_PULSECHx

                LL_TIM_CC_EnableChannel (TIMx, TIM_CHANNEL_CHx);
 8000928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800092a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800092c:	0011      	movs	r1, r2
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff fd60 	bl	80003f4 <LL_TIM_CC_EnableChannel>
    for (uint32_t num_sm = 0; num_sm < NUMBER_STEP_MOTORS; ++num_sm) {
 8000934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000936:	3301      	adds	r3, #1
 8000938:	647b      	str	r3, [r7, #68]	; 0x44
 800093a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800093c:	2b02      	cmp	r3, #2
 800093e:	d800      	bhi.n	8000942 <ST_Step_Driver+0x21a>
 8000940:	e725      	b.n	800078e <ST_Step_Driver+0x66>
            }
        }
    }
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b012      	add	sp, #72	; 0x48
 800094a:	bdb0      	pop	{r4, r5, r7, pc}
 800094c:	200000f4 	.word	0x200000f4
 8000950:	2000008c 	.word	0x2000008c

08000954 <SM_Driver_Reset_Step_Motors>:


// Step motor driver memory ---------------------------------

void SM_Driver_Reset_Step_Motors () {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
    bzero (&drimem.step_motor, sizeof (drimem.step_motor));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <SM_Driver_Reset_Step_Motors+0x18>)
 800095a:	0018      	movs	r0, r3
 800095c:	2348      	movs	r3, #72	; 0x48
 800095e:	001a      	movs	r2, r3
 8000960:	2100      	movs	r1, #0
 8000962:	f003 f878 	bl	8003a56 <memset>
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000008c 	.word	0x2000008c

08000970 <SM_Driver_Reset_Unit_Tasks>:
void SM_Driver_Reset_Unit_Tasks () {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    bzero (&drimem.unit_task, sizeof (drimem.unit_task));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SM_Driver_Reset_Unit_Tasks+0x18>)
 8000976:	0018      	movs	r0, r3
 8000978:	2312      	movs	r3, #18
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f003 f86a 	bl	8003a56 <memset>
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200000d4 	.word	0x200000d4

0800098c <SM_Driver_Reset_Counters>:
void SM_Driver_Reset_Counters () {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUMBER_STEP_MOTORS; ++i)
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	e00b      	b.n	80009b0 <SM_Driver_Reset_Counters+0x24>
        drimem.counters[i] = -1;
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <SM_Driver_Reset_Counters+0x34>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3316      	adds	r3, #22
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	3304      	adds	r3, #4
 80009a4:	2201      	movs	r2, #1
 80009a6:	4252      	negs	r2, r2
 80009a8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUMBER_STEP_MOTORS; ++i)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3301      	adds	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	ddf0      	ble.n	8000998 <SM_Driver_Reset_Counters+0xc>
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000008c 	.word	0x2000008c

080009c4 <SM_Driver_Reset_All>:
void SM_Driver_Reset_All () {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
    SM_Driver_Reset_Step_Motors ();
 80009c8:	f7ff ffc4 	bl	8000954 <SM_Driver_Reset_Step_Motors>
    SM_Driver_Reset_Unit_Tasks  ();
 80009cc:	f7ff ffd0 	bl	8000970 <SM_Driver_Reset_Unit_Tasks>
    SM_Driver_Reset_Counters    ();
 80009d0:	f7ff ffdc 	bl	800098c <SM_Driver_Reset_Counters>
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <SM_Driver_Init_Step_Motor>:

int SM_Driver_Init_Step_Motor (uint8_t number_step_motor, step_motor_t* step_motor) {
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	701a      	strb	r2, [r3, #0]
    if (number_step_motor >= NUMBER_STEP_MOTORS) {
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d907      	bls.n	8000a02 <SM_Driver_Init_Step_Motor+0x26>
        errno = ERANGE;
 80009f2:	f002 fffd 	bl	80039f0 <__errno>
 80009f6:	0003      	movs	r3, r0
 80009f8:	2222      	movs	r2, #34	; 0x22
 80009fa:	601a      	str	r2, [r3, #0]
        return -1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	425b      	negs	r3, r3
 8000a00:	e018      	b.n	8000a34 <SM_Driver_Init_Step_Motor+0x58>
    } else if (step_motor == NULL) {
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d107      	bne.n	8000a18 <SM_Driver_Init_Step_Motor+0x3c>
        errno = EINVAL;
 8000a08:	f002 fff2 	bl	80039f0 <__errno>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	2216      	movs	r2, #22
 8000a10:	601a      	str	r2, [r3, #0]
        return -1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	425b      	negs	r3, r3
 8000a16:	e00d      	b.n	8000a34 <SM_Driver_Init_Step_Motor+0x58>
    }

    drimem.step_motor[number_step_motor] = *step_motor;
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	4907      	ldr	r1, [pc, #28]	; (8000a3c <SM_Driver_Init_Step_Motor+0x60>)
 8000a1e:	0013      	movs	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	189b      	adds	r3, r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	18cb      	adds	r3, r1, r3
 8000a2a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a2c:	c313      	stmia	r3!, {r0, r1, r4}
 8000a2e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a30:	c313      	stmia	r3!, {r0, r1, r4}

    return 0;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	2000008c 	.word	0x2000008c

08000a40 <SM_Driver_Verifier>:

int SM_Driver_Verifier () {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUMBER_STEP_MOTORS; ++i)
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	e012      	b.n	8000a72 <SM_Driver_Verifier+0x32>
        if (SM_Step_Motor_Verificator (&drimem.step_motor[i]) == -1)
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	0013      	movs	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	189b      	adds	r3, r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <SM_Driver_Verifier+0x44>)
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff fde8 	bl	8000630 <SM_Step_Motor_Verificator>
 8000a60:	0003      	movs	r3, r0
 8000a62:	3301      	adds	r3, #1
 8000a64:	d102      	bne.n	8000a6c <SM_Driver_Verifier+0x2c>
            return -1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	425b      	negs	r3, r3
 8000a6a:	e006      	b.n	8000a7a <SM_Driver_Verifier+0x3a>
    for (int i = 0; i < NUMBER_STEP_MOTORS; ++i)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	dde9      	ble.n	8000a4c <SM_Driver_Verifier+0xc>

    return 0;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	2000008c 	.word	0x2000008c

08000a88 <SM_Driver_Set_Direction>:

void SM_Driver_Set_Direction (uint16_t number_step_motor, uint8_t direction) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	1dbb      	adds	r3, r7, #6
 8000a92:	801a      	strh	r2, [r3, #0]
 8000a94:	1d7b      	adds	r3, r7, #5
 8000a96:	1c0a      	adds	r2, r1, #0
 8000a98:	701a      	strb	r2, [r3, #0]
    SM_Set_Direction (&drimem.step_motor[number_step_motor], direction);
 8000a9a:	1dbb      	adds	r3, r7, #6
 8000a9c:	881a      	ldrh	r2, [r3, #0]
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	189b      	adds	r3, r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <SM_Driver_Set_Direction+0x38>)
 8000aa8:	189a      	adds	r2, r3, r2
 8000aaa:	1d7b      	adds	r3, r7, #5
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0019      	movs	r1, r3
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	f7ff fe0f 	bl	80006d4 <SM_Set_Direction>
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	2000008c 	.word	0x2000008c

08000ac4 <SM_Driver_Enable_Step_Motors>:

void SM_Driver_Enable_Step_Motors () {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    SM_Enable (drimem.step_motor);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <SM_Driver_Enable_Step_Motors+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fdd2 	bl	8000674 <SM_Enable>
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	2000008c 	.word	0x2000008c

08000adc <SM_Driver_Set_Task>:
void SM_Driver_Disable_Step_Motors () {
    for (int i = 0; i < NUMBER_STEP_MOTORS; ++i)
        SM_Disable (&drimem.step_motor[i]);
}

void SM_Driver_Set_Task (uint16_t number_step_motor, const sm_unit_task_t* unit_task) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	1dbb      	adds	r3, r7, #6
 8000ae8:	801a      	strh	r2, [r3, #0]
    drimem.unit_task[number_step_motor] = *unit_task;
 8000aea:	1dbb      	adds	r3, r7, #6
 8000aec:	881a      	ldrh	r2, [r3, #0]
 8000aee:	4914      	ldr	r1, [pc, #80]	; (8000b40 <SM_Driver_Set_Task+0x64>)
 8000af0:	2048      	movs	r0, #72	; 0x48
 8000af2:	0013      	movs	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	189b      	adds	r3, r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	18cb      	adds	r3, r1, r3
 8000afc:	181a      	adds	r2, r3, r0
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	0010      	movs	r0, r2
 8000b02:	0019      	movs	r1, r3
 8000b04:	2306      	movs	r3, #6
 8000b06:	001a      	movs	r2, r3
 8000b08:	f002 ff9c 	bl	8003a44 <memcpy>

    SM_Driver_Set_Direction (number_step_motor, unit_task->direction);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	791b      	ldrb	r3, [r3, #4]
 8000b10:	07db      	lsls	r3, r3, #31
 8000b12:	0fdb      	lsrs	r3, r3, #31
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	001a      	movs	r2, r3
 8000b18:	1dbb      	adds	r3, r7, #6
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff ffb2 	bl	8000a88 <SM_Driver_Set_Direction>
    drimem.counters[number_step_motor] = -1;
 8000b24:	1dbb      	adds	r3, r7, #6
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <SM_Driver_Set_Task+0x64>)
 8000b2a:	3316      	adds	r3, #22
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	18d3      	adds	r3, r2, r3
 8000b30:	3304      	adds	r3, #4
 8000b32:	2201      	movs	r2, #1
 8000b34:	4252      	negs	r2, r2
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000008c 	.word	0x2000008c

08000b44 <LL_TIM_DisableCounter>:
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2201      	movs	r2, #1
 8000b52:	4393      	bics	r3, r2
 8000b54:	001a      	movs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <InitializeDriverStepMotors>:
#include "StepMotorParams.h"
#include "StepMotorDriver.h"
#include "main.h"

int InitializeDriverStepMotors () {
 8000b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b66:	b099      	sub	sp, #100	; 0x64
 8000b68:	af00      	add	r7, sp, #0
    SM_Driver_Reset_All ();
 8000b6a:	f7ff ff2b 	bl	80009c4 <SM_Driver_Reset_All>

    step_motor_t step_motor_0 = {
 8000b6e:	2148      	movs	r1, #72	; 0x48
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <InitializeDriverStepMotors+0xcc>)
 8000b74:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000b76:	c331      	stmia	r3!, {r0, r4, r5}
 8000b78:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000b7a:	c331      	stmia	r3!, {r0, r4, r5}
            .pin  = DIR_0_Pin,
            .port = DIR_0_GPIO_Port
        }
    };

    step_motor_t step_motor_1 = {
 8000b7c:	2430      	movs	r4, #48	; 0x30
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	4a2c      	ldr	r2, [pc, #176]	; (8000c34 <InitializeDriverStepMotors+0xd0>)
 8000b82:	ca61      	ldmia	r2!, {r0, r5, r6}
 8000b84:	c361      	stmia	r3!, {r0, r5, r6}
 8000b86:	ca61      	ldmia	r2!, {r0, r5, r6}
 8000b88:	c361      	stmia	r3!, {r0, r5, r6}
            .pin  = DIR_1_Pin,
            .port = DIR_1_GPIO_Port
        }
    };

    step_motor_t step_motor_2 = {
 8000b8a:	2518      	movs	r5, #24
 8000b8c:	197b      	adds	r3, r7, r5
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <InitializeDriverStepMotors+0xd4>)
 8000b90:	ca43      	ldmia	r2!, {r0, r1, r6}
 8000b92:	c343      	stmia	r3!, {r0, r1, r6}
 8000b94:	ca43      	ldmia	r2!, {r0, r1, r6}
 8000b96:	c343      	stmia	r3!, {r0, r1, r6}
            .pin  = DIR_2_Pin,
            .port = DIR_2_GPIO_Port 
        }
    };

    if (SM_Driver_Init_Step_Motor (0, &step_motor_0) == -1 ||
 8000b98:	2148      	movs	r1, #72	; 0x48
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff ff1c 	bl	80009dc <SM_Driver_Init_Step_Motor>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	d00f      	beq.n	8000bca <InitializeDriverStepMotors+0x66>
        SM_Driver_Init_Step_Motor (1, &step_motor_1) == -1 ||
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	0019      	movs	r1, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff ff14 	bl	80009dc <SM_Driver_Init_Step_Motor>
 8000bb4:	0003      	movs	r3, r0
    if (SM_Driver_Init_Step_Motor (0, &step_motor_0) == -1 ||
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	d007      	beq.n	8000bca <InitializeDriverStepMotors+0x66>
        SM_Driver_Init_Step_Motor (2, &step_motor_2) == -1)
 8000bba:	197b      	adds	r3, r7, r5
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff ff0c 	bl	80009dc <SM_Driver_Init_Step_Motor>
 8000bc4:	0003      	movs	r3, r0
        SM_Driver_Init_Step_Motor (1, &step_motor_1) == -1 ||
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	d102      	bne.n	8000bd0 <InitializeDriverStepMotors+0x6c>
        return -1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	425b      	negs	r3, r3
 8000bce:	e02a      	b.n	8000c26 <InitializeDriverStepMotors+0xc2>

    if (SM_Driver_Verifier () == -1)
 8000bd0:	f7ff ff36 	bl	8000a40 <SM_Driver_Verifier>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	d102      	bne.n	8000be0 <InitializeDriverStepMotors+0x7c>
        return -1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	e022      	b.n	8000c26 <InitializeDriverStepMotors+0xc2>

    SM_Disable_TIM_Channel ((timer_channel_t) {
 8000be0:	2110      	movs	r1, #16
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <InitializeDriverStepMotors+0xd8>)
 8000be6:	ca11      	ldmia	r2!, {r0, r4}
 8000be8:	c311      	stmia	r3!, {r0, r4}
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	6859      	ldr	r1, [r3, #4]
 8000bf0:	f7ff fd88 	bl	8000704 <SM_Disable_TIM_Channel>
        .TIMx = TIM2,
        .CHANNEL_CHx = SM_0_TIM_CHANNEL
    });

    SM_Disable_TIM_Channel ((timer_channel_t) {
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <InitializeDriverStepMotors+0xdc>)
 8000bfa:	ca11      	ldmia	r2!, {r0, r4}
 8000bfc:	c311      	stmia	r3!, {r0, r4}
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	6859      	ldr	r1, [r3, #4]
 8000c04:	f7ff fd7e 	bl	8000704 <SM_Disable_TIM_Channel>
        .TIMx = TIM2,
        .CHANNEL_CHx = SM_1_TIM_CHANNEL
    });

    SM_Disable_TIM_Channel ((timer_channel_t) {
 8000c08:	003b      	movs	r3, r7
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <InitializeDriverStepMotors+0xe0>)
 8000c0c:	ca03      	ldmia	r2!, {r0, r1}
 8000c0e:	c303      	stmia	r3!, {r0, r1}
 8000c10:	003b      	movs	r3, r7
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	6859      	ldr	r1, [r3, #4]
 8000c16:	f7ff fd75 	bl	8000704 <SM_Disable_TIM_Channel>
        .TIMx = TIM2,
        .CHANNEL_CHx = SM_2_TIM_CHANNEL
    });

    LL_TIM_DisableCounter (TIM2);
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff ff90 	bl	8000b44 <LL_TIM_DisableCounter>

    return 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b019      	add	sp, #100	; 0x64
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	08003a80 	.word	0x08003a80
 8000c34:	08003a98 	.word	0x08003a98
 8000c38:	08003ab0 	.word	0x08003ab0
 8000c3c:	08003ac8 	.word	0x08003ac8
 8000c40:	08003ad0 	.word	0x08003ad0
 8000c44:	08003ad8 	.word	0x08003ad8

08000c48 <LL_TIM_EnableCounter>:
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b002      	add	sp, #8
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <DeltaTime2TimerTick>:
#include <stdlib.h>
#include <stdint.h>

// All usec and urad

__STATIC_INLINE uint32_t DeltaTime2TimerTick (uint32_t delta_time) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    return (delta_time * FREQ_TIMER) / 1000000;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <DeltaTime2TimerTick+0x20>)
 8000c70:	4353      	muls	r3, r2
 8000c72:	4905      	ldr	r1, [pc, #20]	; (8000c88 <DeltaTime2TimerTick+0x24>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff fa47 	bl	8000108 <__udivsi3>
 8000c7a:	0003      	movs	r3, r0
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b002      	add	sp, #8
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	00002710 	.word	0x00002710
 8000c88:	000f4240 	.word	0x000f4240

08000c8c <AxisRotate>:

int AxisRotate (uint16_t number_step_motor, int urad, int usec) {
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	250e      	movs	r5, #14
 8000c98:	197b      	adds	r3, r7, r5
 8000c9a:	1c02      	adds	r2, r0, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
    const uint32_t number_steps = abs (urad) / STEP_ANGLE;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	17da      	asrs	r2, r3, #31
 8000ca2:	189b      	adds	r3, r3, r2
 8000ca4:	4053      	eors	r3, r2
 8000ca6:	491d      	ldr	r1, [pc, #116]	; (8000d1c <AxisRotate+0x90>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fab7 	bl	800021c <__divsi3>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	61fb      	str	r3, [r7, #28]
    const uint32_t delta_time   = usec / number_steps;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69f9      	ldr	r1, [r7, #28]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff fa26 	bl	8000108 <__udivsi3>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	61bb      	str	r3, [r7, #24]

    sm_unit_task_t unit_task = {
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	2410      	movs	r4, #16
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	801a      	strh	r2, [r3, #0]
        .number_steps  = number_steps,
        .timer_counter = DeltaTime2TimerTick (delta_time),
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ffc9 	bl	8000c64 <DeltaTime2TimerTick>
 8000cd2:	0003      	movs	r3, r0
    sm_unit_task_t unit_task = {
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	805a      	strh	r2, [r3, #2]
        .direction     = urad > 0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	17da      	asrs	r2, r3, #31
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	0fdb      	lsrs	r3, r3, #31
 8000ce2:	b2da      	uxtb	r2, r3
    sm_unit_task_t unit_task = {
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	400a      	ands	r2, r1
 8000cea:	0010      	movs	r0, r2
 8000cec:	791a      	ldrb	r2, [r3, #4]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	438a      	bics	r2, r1
 8000cf2:	1c11      	adds	r1, r2, #0
 8000cf4:	1c02      	adds	r2, r0, #0
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	711a      	strb	r2, [r3, #4]
    };
    
    SM_Driver_Set_Task (number_step_motor, &unit_task);
 8000cfa:	193a      	adds	r2, r7, r4
 8000cfc:	197b      	adds	r3, r7, r5
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff feea 	bl	8000adc <SM_Driver_Set_Task>

    LL_TIM_EnableCounter (SM_DRIVER_TIMER);
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <AxisRotate+0x94>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff ff9c 	bl	8000c48 <LL_TIM_EnableCounter>
    
    return 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b008      	add	sp, #32
 8000d18:	bdb0      	pop	{r4, r5, r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	00003d5b 	.word	0x00003d5b
 8000d20:	40001000 	.word	0x40001000

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b7f      	cmp	r3, #127	; 0x7f
 8000d36:	d809      	bhi.n	8000d4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	231f      	movs	r3, #31
 8000d40:	401a      	ands	r2, r3
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_EnableIRQ+0x30>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
  }
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6c:	d828      	bhi.n	8000dc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <__NVIC_SetPriority+0xd4>)
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	33c0      	adds	r3, #192	; 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	589b      	ldr	r3, [r3, r2]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	; 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	481f      	ldr	r0, [pc, #124]	; (8000e2c <__NVIC_SetPriority+0xd4>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	430a      	orrs	r2, r1
 8000db8:	33c0      	adds	r3, #192	; 0xc0
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dbe:	e031      	b.n	8000e24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <__NVIC_SetPriority+0xd8>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	230f      	movs	r3, #15
 8000dca:	400b      	ands	r3, r1
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3306      	adds	r3, #6
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	; 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	; 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001c      	movs	r4, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	4023      	ands	r3, r4
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	18c3      	adds	r3, r0, r3
 8000e20:	3304      	adds	r3, #4
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <LL_DMA_DisableChannel+0x38>)
 8000e44:	5cd3      	ldrb	r3, [r2, r3]
 8000e46:	001a      	movs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	18d3      	adds	r3, r2, r3
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	4906      	ldr	r1, [pc, #24]	; (8000e6c <LL_DMA_DisableChannel+0x38>)
 8000e54:	5ccb      	ldrb	r3, [r1, r3]
 8000e56:	0019      	movs	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	18cb      	adds	r3, r1, r3
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	438a      	bics	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	08003af0 	.word	0x08003af0

08000e70 <LL_DMA_ClearFlag_GI4>:
  * @rmtoll IFCR         CGIF4         LL_DMA_ClearFlag_GI4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	0152      	lsls	r2, r2, #5
 8000e7e:	605a      	str	r2, [r3, #4]
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <LL_DMA_ClearFlag_GI5>:
  * @rmtoll IFCR         CGIF5         LL_DMA_ClearFlag_GI5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	0252      	lsls	r2, r2, #9
 8000e96:	605a      	str	r2, [r3, #4]
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll IFCR         CTCIF4        LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	0192      	lsls	r2, r2, #6
 8000eae:	605a      	str	r2, [r3, #4]
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	0292      	lsls	r2, r2, #10
 8000ec6:	605a      	str	r2, [r3, #4]
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <LL_DMA_ClearFlag_TE4>:
  * @rmtoll IFCR         CTEIF4        LL_DMA_ClearFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0212      	lsls	r2, r2, #8
 8000ede:	605a      	str	r2, [r3, #4]
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <LL_DMA_ClearFlag_TE5>:
  * @rmtoll IFCR         CTEIF5        LL_DMA_ClearFlag_TE5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	0312      	lsls	r2, r2, #12
 8000ef6:	605a      	str	r2, [r3, #4]
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b002      	add	sp, #8
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LL_DMA_EnableIT_TC+0x38>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	001a      	movs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	18d3      	adds	r3, r2, r3
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	4906      	ldr	r1, [pc, #24]	; (8000f38 <LL_DMA_EnableIT_TC+0x38>)
 8000f20:	5ccb      	ldrb	r3, [r1, r3]
 8000f22:	0019      	movs	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	18cb      	adds	r3, r1, r3
 8000f28:	2102      	movs	r1, #2
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	08003af0 	.word	0x08003af0

08000f3c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <LL_DMA_EnableIT_TE+0x38>)
 8000f4c:	5cd3      	ldrb	r3, [r2, r3]
 8000f4e:	001a      	movs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	18d3      	adds	r3, r2, r3
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4906      	ldr	r1, [pc, #24]	; (8000f74 <LL_DMA_EnableIT_TE+0x38>)
 8000f5c:	5ccb      	ldrb	r3, [r1, r3]
 8000f5e:	0019      	movs	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	18cb      	adds	r3, r1, r3
 8000f64:	2108      	movs	r1, #8
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	08003af0 	.word	0x08003af0

08000f78 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f82:	6959      	ldr	r1, [r3, #20]
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4013      	ands	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b004      	add	sp, #16
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2240      	movs	r2, #64	; 0x40
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff ffc9 	bl	8000f78 <LL_AHB1_GRP1_EnableClock>

  LL_DMA_DisableChannel(DMA1, UART_DMA_TX);
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <MX_DMA_Init+0xbc>)
 8000fe8:	2102      	movs	r1, #2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff ff22 	bl	8000e34 <LL_DMA_DisableChannel>
	LL_DMA_DisableChannel(DMA1, UART_DMA_RX);
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <MX_DMA_Init+0xbc>)
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ff1d 	bl	8000e34 <LL_DMA_DisableChannel>
	LL_DMA_ClearFlag_TC4(DMA1);
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <MX_DMA_Init+0xbc>)
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ff4f 	bl	8000ea0 <LL_DMA_ClearFlag_TC4>
	LL_DMA_ClearFlag_TE4(DMA1);
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <MX_DMA_Init+0xbc>)
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff ff63 	bl	8000ed0 <LL_DMA_ClearFlag_TE4>
	LL_DMA_ClearFlag_TC5(DMA1);
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MX_DMA_Init+0xbc>)
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff ff53 	bl	8000eb8 <LL_DMA_ClearFlag_TC5>
	LL_DMA_ClearFlag_TE5(DMA1);
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_DMA_Init+0xbc>)
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ff67 	bl	8000ee8 <LL_DMA_ClearFlag_TE5>
	LL_USART_EnableDMAReq_RX(USART1);
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_DMA_Init+0xc0>)
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff ffc1 	bl	8000fa4 <LL_USART_EnableDMAReq_RX>
	LL_USART_EnableDMAReq_TX(USART1);
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_DMA_Init+0xc0>)
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff ffcb 	bl	8000fc0 <LL_USART_EnableDMAReq_TX>
	LL_DMA_EnableIT_TC(DMA1, UART_DMA_TX);
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_DMA_Init+0xbc>)
 800102c:	2102      	movs	r1, #2
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff ff66 	bl	8000f00 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, UART_DMA_TX);
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_DMA_Init+0xbc>)
 8001036:	2102      	movs	r1, #2
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff ff7f 	bl	8000f3c <LL_DMA_EnableIT_TE>
	LL_DMA_EnableIT_TC(DMA1, UART_DMA_RX);
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_DMA_Init+0xbc>)
 8001040:	2103      	movs	r1, #3
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff ff5c 	bl	8000f00 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, UART_DMA_RX);
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_DMA_Init+0xbc>)
 800104a:	2103      	movs	r1, #3
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff75 	bl	8000f3c <LL_DMA_EnableIT_TE>
	LL_DMA_ClearFlag_GI5(DMA1);
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_DMA_Init+0xbc>)
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ff17 	bl	8000e88 <LL_DMA_ClearFlag_GI5>
	LL_DMA_ClearFlag_GI4(DMA1);
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_DMA_Init+0xbc>)
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ff07 	bl	8000e70 <LL_DMA_ClearFlag_GI4>
	LL_DMA_ClearFlag_TC4(DMA1);
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <MX_DMA_Init+0xbc>)
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff1b 	bl	8000ea0 <LL_DMA_ClearFlag_TC4>
	LL_DMA_ClearFlag_TE4(DMA1);
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_DMA_Init+0xbc>)
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ff2f 	bl	8000ed0 <LL_DMA_ClearFlag_TE4>
	LL_DMA_ClearFlag_TC5(DMA1);
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_DMA_Init+0xbc>)
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff ff1f 	bl	8000eb8 <LL_DMA_ClearFlag_TC5>
	LL_DMA_ClearFlag_TE5(DMA1);
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <MX_DMA_Init+0xbc>)
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ff33 	bl	8000ee8 <LL_DMA_ClearFlag_TE5>



  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 8001082:	2100      	movs	r1, #0
 8001084:	200a      	movs	r0, #10
 8001086:	f7ff fe67 	bl	8000d58 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800108a:	200a      	movs	r0, #10
 800108c:	f7ff fe4a 	bl	8000d24 <__NVIC_EnableIRQ>

}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	40020000 	.word	0x40020000
 800109c:	40013800 	.word	0x40013800

080010a0 <LL_AHB1_GRP1_EnableClock>:
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80010aa:	6959      	ldr	r1, [r3, #20]
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4013      	ands	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b004      	add	sp, #16
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000

080010cc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <LL_SYSCFG_SetEXTISource+0x48>)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	21ff      	movs	r1, #255	; 0xff
 80010dc:	400b      	ands	r3, r1
 80010de:	3302      	adds	r3, #2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	589b      	ldr	r3, [r3, r2]
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	0c12      	lsrs	r2, r2, #16
 80010e8:	210f      	movs	r1, #15
 80010ea:	4091      	lsls	r1, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	43d2      	mvns	r2, r2
 80010f0:	401a      	ands	r2, r3
 80010f2:	0011      	movs	r1, r2
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	0c1b      	lsrs	r3, r3, #16
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	409a      	lsls	r2, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <LL_SYSCFG_SetEXTISource+0x48>)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	24ff      	movs	r4, #255	; 0xff
 8001102:	4023      	ands	r3, r4
 8001104:	430a      	orrs	r2, r1
 8001106:	3302      	adds	r3, #2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	501a      	str	r2, [r3, r0]
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b003      	add	sp, #12
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	40010000 	.word	0x40010000

08001118 <LL_GPIO_SetPinMode>:
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	435b      	muls	r3, r3
 800112c:	001a      	movs	r2, r3
 800112e:	0013      	movs	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	189b      	adds	r3, r3, r2
 8001134:	43db      	mvns	r3, r3
 8001136:	400b      	ands	r3, r1
 8001138:	001a      	movs	r2, r3
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	435b      	muls	r3, r3
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	434b      	muls	r3, r1
 8001142:	431a      	orrs	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b004      	add	sp, #16
 800114e:	bd80      	pop	{r7, pc}

08001150 <LL_GPIO_SetPinPull>:
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	68d9      	ldr	r1, [r3, #12]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	435b      	muls	r3, r3
 8001164:	001a      	movs	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	189b      	adds	r3, r3, r2
 800116c:	43db      	mvns	r3, r3
 800116e:	400b      	ands	r3, r1
 8001170:	001a      	movs	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	435b      	muls	r3, r3
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	434b      	muls	r3, r1
 800117a:	431a      	orrs	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	60da      	str	r2, [r3, #12]
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bd80      	pop	{r7, pc}

08001188 <LL_GPIO_SetOutputPin>:
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	619a      	str	r2, [r3, #24]
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}

080011a0 <LL_GPIO_ResetOutputPin>:
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80011be:	2418      	movs	r4, #24
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	0018      	movs	r0, r3
 80011c4:	2308      	movs	r3, #8
 80011c6:	001a      	movs	r2, r3
 80011c8:	2100      	movs	r1, #0
 80011ca:	f002 fc44 	bl	8003a56 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	003b      	movs	r3, r7
 80011d0:	0018      	movs	r0, r3
 80011d2:	2318      	movs	r3, #24
 80011d4:	001a      	movs	r2, r3
 80011d6:	2100      	movs	r1, #0
 80011d8:	f002 fc3d 	bl	8003a56 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	031b      	lsls	r3, r3, #12
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff ff5d 	bl	80010a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	029b      	lsls	r3, r3, #10
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff ff58 	bl	80010a0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(ENABLE_GPIO_Port, ENABLE_Pin);
 80011f0:	4b64      	ldr	r3, [pc, #400]	; (8001384 <MX_GPIO_Init+0x1cc>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff ffc7 	bl	8001188 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DIR_0_GPIO_Port, DIR_0_Pin);
 80011fa:	4b62      	ldr	r3, [pc, #392]	; (8001384 <MX_GPIO_Init+0x1cc>)
 80011fc:	2102      	movs	r1, #2
 80011fe:	0018      	movs	r0, r3
 8001200:	f7ff ffce 	bl	80011a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DIR_1_GPIO_Port, DIR_1_Pin);
 8001204:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <MX_GPIO_Init+0x1cc>)
 8001206:	2104      	movs	r1, #4
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ffc9 	bl	80011a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DIR_2_GPIO_Port, DIR_2_Pin);
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <MX_GPIO_Init+0x1cc>)
 8001210:	2108      	movs	r1, #8
 8001212:	0018      	movs	r0, r3
 8001214:	f7ff ffc4 	bl	80011a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD4_GPIO_Port, LD4_Pin);
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4a59      	ldr	r2, [pc, #356]	; (8001384 <MX_GPIO_Init+0x1cc>)
 800121e:	0019      	movs	r1, r3
 8001220:	0010      	movs	r0, r2
 8001222:	f7ff ffbd 	bl	80011a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4a56      	ldr	r2, [pc, #344]	; (8001384 <MX_GPIO_Init+0x1cc>)
 800122c:	0019      	movs	r1, r3
 800122e:	0010      	movs	r0, r2
 8001230:	f7ff ffb6 	bl	80011a0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001234:	003b      	movs	r3, r7
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800123a:	003b      	movs	r3, r7
 800123c:	2201      	movs	r2, #1
 800123e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001240:	003b      	movs	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001246:	003b      	movs	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800124c:	003b      	movs	r3, r7
 800124e:	2201      	movs	r2, #1
 8001250:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001252:	003b      	movs	r3, r7
 8001254:	4a4b      	ldr	r2, [pc, #300]	; (8001384 <MX_GPIO_Init+0x1cc>)
 8001256:	0019      	movs	r1, r3
 8001258:	0010      	movs	r0, r2
 800125a:	f001 fd89 	bl	8002d70 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DIR_0_Pin;
 800125e:	003b      	movs	r3, r7
 8001260:	2202      	movs	r2, #2
 8001262:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001264:	003b      	movs	r3, r7
 8001266:	2201      	movs	r2, #1
 8001268:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800126a:	003b      	movs	r3, r7
 800126c:	2203      	movs	r2, #3
 800126e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001270:	003b      	movs	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001276:	003b      	movs	r3, r7
 8001278:	2202      	movs	r2, #2
 800127a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DIR_0_GPIO_Port, &GPIO_InitStruct);
 800127c:	003b      	movs	r3, r7
 800127e:	4a41      	ldr	r2, [pc, #260]	; (8001384 <MX_GPIO_Init+0x1cc>)
 8001280:	0019      	movs	r1, r3
 8001282:	0010      	movs	r0, r2
 8001284:	f001 fd74 	bl	8002d70 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DIR_1_Pin;
 8001288:	003b      	movs	r3, r7
 800128a:	2204      	movs	r2, #4
 800128c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800128e:	003b      	movs	r3, r7
 8001290:	2201      	movs	r2, #1
 8001292:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001294:	003b      	movs	r3, r7
 8001296:	2203      	movs	r2, #3
 8001298:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800129a:	003b      	movs	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80012a0:	003b      	movs	r3, r7
 80012a2:	2202      	movs	r2, #2
 80012a4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 80012a6:	003b      	movs	r3, r7
 80012a8:	4a36      	ldr	r2, [pc, #216]	; (8001384 <MX_GPIO_Init+0x1cc>)
 80012aa:	0019      	movs	r1, r3
 80012ac:	0010      	movs	r0, r2
 80012ae:	f001 fd5f 	bl	8002d70 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DIR_2_Pin;
 80012b2:	003b      	movs	r3, r7
 80012b4:	2208      	movs	r2, #8
 80012b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012b8:	003b      	movs	r3, r7
 80012ba:	2201      	movs	r2, #1
 80012bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80012be:	003b      	movs	r3, r7
 80012c0:	2203      	movs	r2, #3
 80012c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012c4:	003b      	movs	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80012ca:	003b      	movs	r3, r7
 80012cc:	2202      	movs	r2, #2
 80012ce:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DIR_2_GPIO_Port, &GPIO_InitStruct);
 80012d0:	003b      	movs	r3, r7
 80012d2:	4a2c      	ldr	r2, [pc, #176]	; (8001384 <MX_GPIO_Init+0x1cc>)
 80012d4:	0019      	movs	r1, r3
 80012d6:	0010      	movs	r0, r2
 80012d8:	f001 fd4a 	bl	8002d70 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin;
 80012dc:	003b      	movs	r3, r7
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	0052      	lsls	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012e4:	003b      	movs	r3, r7
 80012e6:	2201      	movs	r2, #1
 80012e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012ea:	003b      	movs	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012f0:	003b      	movs	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012f6:	003b      	movs	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80012fc:	003b      	movs	r3, r7
 80012fe:	4a21      	ldr	r2, [pc, #132]	; (8001384 <MX_GPIO_Init+0x1cc>)
 8001300:	0019      	movs	r1, r3
 8001302:	0010      	movs	r0, r2
 8001304:	f001 fd34 	bl	8002d70 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8001308:	003b      	movs	r3, r7
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001310:	003b      	movs	r3, r7
 8001312:	2201      	movs	r2, #1
 8001314:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001316:	003b      	movs	r3, r7
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800131c:	003b      	movs	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001322:	003b      	movs	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001328:	003b      	movs	r3, r7
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <MX_GPIO_Init+0x1cc>)
 800132c:	0019      	movs	r1, r3
 800132e:	0010      	movs	r0, r2
 8001330:	f001 fd1e 	bl	8002d70 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8001334:	2100      	movs	r1, #0
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff fec8 	bl	80010cc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800133c:	2390      	movs	r3, #144	; 0x90
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	2200      	movs	r2, #0
 8001342:	2101      	movs	r1, #1
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff ff03 	bl	8001150 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800134a:	2390      	movs	r3, #144	; 0x90
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	2200      	movs	r2, #0
 8001350:	2101      	movs	r1, #1
 8001352:	0018      	movs	r0, r3
 8001354:	f7ff fee0 	bl	8001118 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001358:	0021      	movs	r1, r4
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2201      	movs	r2, #1
 8001364:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2201      	movs	r2, #1
 800136a:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2201      	movs	r2, #1
 8001370:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001372:	187b      	adds	r3, r7, r1
 8001374:	0018      	movs	r0, r3
 8001376:	f001 fbb9 	bl	8002aec <LL_EXTI_Init>

}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b009      	add	sp, #36	; 0x24
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	48000800 	.word	0x48000800

08001388 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <LL_RCC_HSI_Enable+0x18>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <LL_RCC_HSI_Enable+0x18>)
 8001392:	2101      	movs	r1, #1
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	40021000 	.word	0x40021000

080013a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <LL_RCC_HSI_IsReady+0x1c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2202      	movs	r2, #2
 80013ae:	4013      	ands	r3, r2
 80013b0:	3b02      	subs	r3, #2
 80013b2:	425a      	negs	r2, r3
 80013b4:	4153      	adcs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40021000 	.word	0x40021000

080013c4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	22f8      	movs	r2, #248	; 0xf8
 80013d2:	4393      	bics	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	00da      	lsls	r2, r3, #3
 80013da:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000

080013ec <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <LL_RCC_SetSysClkSource+0x24>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2203      	movs	r2, #3
 80013fa:	4393      	bics	r3, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <LL_RCC_SetSysClkSource+0x24>)
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	430a      	orrs	r2, r1
 8001404:	605a      	str	r2, [r3, #4]
}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	40021000 	.word	0x40021000

08001414 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <LL_RCC_GetSysClkSource+0x14>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	220c      	movs	r2, #12
 800141e:	4013      	ands	r3, r2
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	40021000 	.word	0x40021000

0800142c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <LL_RCC_SetAHBPrescaler+0x24>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	22f0      	movs	r2, #240	; 0xf0
 800143a:	4393      	bics	r3, r2
 800143c:	0019      	movs	r1, r3
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <LL_RCC_SetAHBPrescaler+0x24>)
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	430a      	orrs	r2, r1
 8001444:	605a      	str	r2, [r3, #4]
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b002      	add	sp, #8
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	40021000 	.word	0x40021000

08001454 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <LL_RCC_SetAPB1Prescaler+0x24>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <LL_RCC_SetAPB1Prescaler+0x28>)
 8001462:	4013      	ands	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40021000 	.word	0x40021000
 800147c:	fffff8ff 	.word	0xfffff8ff

08001480 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <LL_RCC_SetUSARTClockSource+0x30>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	0e12      	lsrs	r2, r2, #24
 8001490:	2103      	movs	r1, #3
 8001492:	4091      	lsls	r1, r2
 8001494:	000a      	movs	r2, r1
 8001496:	43d2      	mvns	r2, r2
 8001498:	401a      	ands	r2, r3
 800149a:	0011      	movs	r1, r2
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	0a1a      	lsrs	r2, r3, #8
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <LL_RCC_SetUSARTClockSource+0x30>)
 80014a4:	430a      	orrs	r2, r1
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000

080014b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <LL_RCC_PLL_Enable+0x18>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <LL_RCC_PLL_Enable+0x18>)
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	0449      	lsls	r1, r1, #17
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000

080014d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <LL_RCC_PLL_IsReady+0x24>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	049b      	lsls	r3, r3, #18
 80014dc:	4013      	ands	r3, r2
 80014de:	22fe      	movs	r2, #254	; 0xfe
 80014e0:	0612      	lsls	r2, r2, #24
 80014e2:	4694      	mov	ip, r2
 80014e4:	4463      	add	r3, ip
 80014e6:	425a      	negs	r2, r3
 80014e8:	4153      	adcs	r3, r2
 80014ea:	b2db      	uxtb	r3, r3
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	40021000 	.word	0x40021000

080014f8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001508:	4013      	ands	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	401a      	ands	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	431a      	orrs	r2, r3
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	220f      	movs	r2, #15
 8001524:	4393      	bics	r3, r2
 8001526:	0019      	movs	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	220f      	movs	r2, #15
 800152c:	401a      	ands	r2, r3
 800152e:	4b03      	ldr	r3, [pc, #12]	; (800153c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001530:	430a      	orrs	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40021000 	.word	0x40021000
 8001540:	ffc2ffff 	.word	0xffc2ffff

08001544 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <LL_APB1_GRP1_EnableClock+0x28>)
 800154e:	69d9      	ldr	r1, [r3, #28]
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <LL_APB1_GRP1_EnableClock+0x28>)
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	430a      	orrs	r2, r1
 8001556:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <LL_APB1_GRP1_EnableClock+0x28>)
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	4013      	ands	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b004      	add	sp, #16
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000

08001570 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <LL_APB1_GRP2_EnableClock+0x28>)
 800157a:	6999      	ldr	r1, [r3, #24]
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <LL_APB1_GRP2_EnableClock+0x28>)
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	430a      	orrs	r2, r1
 8001582:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <LL_APB1_GRP2_EnableClock+0x28>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4013      	ands	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b004      	add	sp, #16
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000

0800159c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <LL_FLASH_SetLatency+0x24>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4393      	bics	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <LL_FLASH_SetLatency+0x24>)
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	40022000 	.word	0x40022000

080015c4 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <LL_FLASH_GetLatency+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2201      	movs	r2, #1
 80015ce:	4013      	ands	r3, r2
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	40022000 	.word	0x40022000

080015dc <LL_TIM_DisableCounter>:
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2201      	movs	r2, #1
 80015ea:	4393      	bics	r3, r2
 80015ec:	001a      	movs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}

080015fa <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2202      	movs	r2, #2
 8001606:	4252      	negs	r2, r2
 8001608:	611a      	str	r2, [r3, #16]
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}

08001612 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60da      	str	r2, [r3, #12]
}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}

0800162e <LL_GPIO_SetOutputPin>:
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b002      	add	sp, #8
 8001644:	bd80      	pop	{r7, pc}

08001646 <LL_GPIO_ResetOutputPin>:
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <ErrorActions>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ErrorActions () {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  LL_GPIO_ResetOutputPin (LD3_GPIO_Port, LD3_Pin);
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <ErrorActions+0x68>)
 800166a:	0019      	movs	r1, r3
 800166c:	0010      	movs	r0, r2
 800166e:	f7ff ffea 	bl	8001646 <LL_GPIO_ResetOutputPin>
  LL_GPIO_ResetOutputPin (LD4_GPIO_Port, LD4_Pin);
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <ErrorActions+0x68>)
 8001678:	0019      	movs	r1, r3
 800167a:	0010      	movs	r0, r2
 800167c:	f7ff ffe3 	bl	8001646 <LL_GPIO_ResetOutputPin>

  while (1) {  
    LL_GPIO_SetOutputPin (LD3_GPIO_Port, LD3_Pin);
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <ErrorActions+0x68>)
 8001686:	0019      	movs	r1, r3
 8001688:	0010      	movs	r0, r2
 800168a:	f7ff ffd0 	bl	800162e <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin (LD4_GPIO_Port, LD4_Pin);
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <ErrorActions+0x68>)
 8001694:	0019      	movs	r1, r3
 8001696:	0010      	movs	r0, r2
 8001698:	f7ff ffc9 	bl	800162e <LL_GPIO_SetOutputPin>
    LL_mDelay (200);
 800169c:	20c8      	movs	r0, #200	; 0xc8
 800169e:	f002 f977 	bl	8003990 <LL_mDelay>

    LL_GPIO_ResetOutputPin (LD3_GPIO_Port, LD3_Pin);
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <ErrorActions+0x68>)
 80016a8:	0019      	movs	r1, r3
 80016aa:	0010      	movs	r0, r2
 80016ac:	f7ff ffcb 	bl	8001646 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin (LD4_GPIO_Port, LD4_Pin);
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <ErrorActions+0x68>)
 80016b6:	0019      	movs	r1, r3
 80016b8:	0010      	movs	r0, r2
 80016ba:	f7ff ffc4 	bl	8001646 <LL_GPIO_ResetOutputPin>
    LL_mDelay (200);
 80016be:	20c8      	movs	r0, #200	; 0xc8
 80016c0:	f002 f966 	bl	8003990 <LL_mDelay>
    LL_GPIO_SetOutputPin (LD3_GPIO_Port, LD3_Pin);
 80016c4:	e7dc      	b.n	8001680 <ErrorActions+0x20>
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	48000800 	.word	0x48000800

080016cc <PrepareTimes>:
  }
}

void PrepareTimes () {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  LL_TIM_DisableCounter (SM_DRIVER_TIMER);
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <PrepareTimes+0x38>)
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff ff82 	bl	80015dc <LL_TIM_DisableCounter>
  LL_TIM_DisableCounter (TIM2);
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	05db      	lsls	r3, r3, #23
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff ff7d 	bl	80015dc <LL_TIM_DisableCounter>
  
  LL_TIM_ClearFlag_UPDATE (SM_DRIVER_TIMER);
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <PrepareTimes+0x38>)
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff ff88 	bl	80015fa <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_ClearFlag_UPDATE (TIM2);
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7ff ff83 	bl	80015fa <LL_TIM_ClearFlag_UPDATE>

  LL_TIM_EnableIT_UPDATE (SM_DRIVER_TIMER);
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <PrepareTimes+0x38>)
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff ff8b 	bl	8001612 <LL_TIM_EnableIT_UPDATE>
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	40001000 	.word	0x40001000

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff ff2e 	bl	8001570 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	055b      	lsls	r3, r3, #21
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff ff13 	bl	8001544 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171e:	f000 f85f 	bl	80017e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001722:	f7ff fd49 	bl	80011b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001726:	f7ff fc59 	bl	8000fdc <MX_DMA_Init>
  MX_TIM6_Init();
 800172a:	f000 fcab 	bl	8002084 <MX_TIM6_Init>
  MX_TIM2_Init();
 800172e:	f000 fbae 	bl	8001e8e <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001732:	f000 ff8b 	bl	800264c <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  if (InitializeDriverStepMotors () == -1)
 8001736:	f7ff fa15 	bl	8000b64 <InitializeDriverStepMotors>
 800173a:	0003      	movs	r3, r0
 800173c:	3301      	adds	r3, #1
 800173e:	d101      	bne.n	8001744 <main+0x3c>
    ErrorActions ();
 8001740:	f7ff ff8e 	bl	8001660 <ErrorActions>

  PrepareTimes ();
 8001744:	f7ff ffc2 	bl	80016cc <PrepareTimes>

  SM_Driver_Enable_Step_Motors ();
 8001748:	f7ff f9bc 	bl	8000ac4 <SM_Driver_Enable_Step_Motors>
  for (int i = 0; i < 3*0; ++i) {
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	e019      	b.n	8001786 <main+0x7e>
    AxisRotate (0, +PI_HALF_URAD, 1000 * 500);
 8001752:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <main+0xc0>)
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <main+0xc4>)
 8001756:	0019      	movs	r1, r3
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff fa97 	bl	8000c8c <AxisRotate>
    AxisRotate (1, -PI_HALF_URAD / 8, 1000 * 500);
 800175e:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <main+0xc0>)
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <main+0xc8>)
 8001762:	0019      	movs	r1, r3
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fa91 	bl	8000c8c <AxisRotate>
    LL_mDelay (1000);
 800176a:	23fa      	movs	r3, #250	; 0xfa
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	0018      	movs	r0, r3
 8001770:	f002 f90e 	bl	8003990 <LL_mDelay>
    AxisRotate (2, PI_HALF_URAD / 4, 1000 * 500);
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <main+0xc0>)
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <main+0xcc>)
 8001778:	0019      	movs	r1, r3
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff fa86 	bl	8000c8c <AxisRotate>
  for (int i = 0; i < 3*0; ++i) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3301      	adds	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	dbe2      	blt.n	8001752 <main+0x4a>
  }
  AxisRotate (1, PI_HALF_URAD, 1000 * 500);
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <main+0xc0>)
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <main+0xc4>)
 8001790:	0019      	movs	r1, r3
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff fa7a 	bl	8000c8c <AxisRotate>
  	//UART_RX(rx_buff, RX_BUFF_SIZE);

    //UART_TX(tx_buff, TX_BUFF_SIZE);


    LL_GPIO_SetOutputPin (LD4_GPIO_Port, LD4_Pin);
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <main+0xd0>)
 800179e:	0019      	movs	r1, r3
 80017a0:	0010      	movs	r0, r2
 80017a2:	f7ff ff44 	bl	800162e <LL_GPIO_SetOutputPin>
    LL_mDelay (1500);
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <main+0xd4>)
 80017a8:	0018      	movs	r0, r3
 80017aa:	f002 f8f1 	bl	8003990 <LL_mDelay>

    //AxisRotate (0, +PI_HALF_URAD, 1000 * 1000);
    //AxisRotate (1, +PI_HALF_URAD, 1000 * 1000);

    LL_GPIO_ResetOutputPin (LD4_GPIO_Port, LD4_Pin);
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <main+0xd0>)
 80017b4:	0019      	movs	r1, r3
 80017b6:	0010      	movs	r0, r2
 80017b8:	f7ff ff45 	bl	8001646 <LL_GPIO_ResetOutputPin>
    LL_mDelay (1500);
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <main+0xd4>)
 80017be:	0018      	movs	r0, r3
 80017c0:	f002 f8e6 	bl	8003990 <LL_mDelay>
    LL_GPIO_SetOutputPin (LD4_GPIO_Port, LD4_Pin);
 80017c4:	e7e8      	b.n	8001798 <main+0x90>
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	0007a120 	.word	0x0007a120
 80017cc:	0017f7ec 	.word	0x0017f7ec
 80017d0:	fffd0103 	.word	0xfffd0103
 80017d4:	0005fdfb 	.word	0x0005fdfb
 80017d8:	48000800 	.word	0x48000800
 80017dc:	000005dc 	.word	0x000005dc

080017e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff fed9 	bl	800159c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	f7ff feea 	bl	80015c4 <LL_FLASH_GetLatency>
 80017f0:	0003      	movs	r3, r0
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d1fa      	bne.n	80017ec <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80017f6:	f7ff fdc7 	bl	8001388 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	f7ff fdd2 	bl	80013a4 <LL_RCC_HSI_IsReady>
 8001800:	0003      	movs	r3, r0
 8001802:	2b01      	cmp	r3, #1
 8001804:	d1fa      	bne.n	80017fc <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001806:	2010      	movs	r0, #16
 8001808:	f7ff fddc 	bl	80013c4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
 800180c:	23a0      	movs	r3, #160	; 0xa0
 800180e:	039b      	lsls	r3, r3, #14
 8001810:	0019      	movs	r1, r3
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fe70 	bl	80014f8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001818:	f7ff fe4c 	bl	80014b4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	f7ff fe57 	bl	80014d0 <LL_RCC_PLL_IsReady>
 8001822:	0003      	movs	r3, r0
 8001824:	2b01      	cmp	r3, #1
 8001826:	d1fa      	bne.n	800181e <SystemClock_Config+0x3e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fdff 	bl	800142c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff fe10 	bl	8001454 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001834:	2002      	movs	r0, #2
 8001836:	f7ff fdd9 	bl	80013ec <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	f7ff fdea 	bl	8001414 <LL_RCC_GetSysClkSource>
 8001840:	0003      	movs	r3, r0
 8001842:	2b08      	cmp	r3, #8
 8001844:	d1fa      	bne.n	800183c <SystemClock_Config+0x5c>
  {

  }
  LL_Init1msTick(48000000);
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <SystemClock_Config+0x84>)
 8001848:	0018      	movs	r0, r3
 800184a:	f002 f891 	bl	8003970 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SystemClock_Config+0x84>)
 8001850:	0018      	movs	r0, r3
 8001852:	f002 f8bf 	bl	80039d4 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fe12 	bl	8001480 <LL_RCC_SetUSARTClockSource>
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	02dc6c00 	.word	0x02dc6c00

08001868 <LL_DMA_DisableChannel>:
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	3b01      	subs	r3, #1
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <LL_DMA_DisableChannel+0x38>)
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	001a      	movs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	18d3      	adds	r3, r2, r3
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	3b01      	subs	r3, #1
 8001886:	4906      	ldr	r1, [pc, #24]	; (80018a0 <LL_DMA_DisableChannel+0x38>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	0019      	movs	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	18cb      	adds	r3, r1, r3
 8001890:	2101      	movs	r1, #1
 8001892:	438a      	bics	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b002      	add	sp, #8
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	08003af8 	.word	0x08003af8

080018a4 <LL_DMA_IsActiveFlag_TC2>:
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2220      	movs	r2, #32
 80018b2:	4013      	ands	r3, r2
 80018b4:	3b20      	subs	r3, #32
 80018b6:	425a      	negs	r2, r3
 80018b8:	4153      	adcs	r3, r2
 80018ba:	b2db      	uxtb	r3, r3
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <LL_DMA_IsActiveFlag_TC3>:
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <LL_DMA_IsActiveFlag_TC3+0x28>)
 80018d8:	4694      	mov	ip, r2
 80018da:	4463      	add	r3, ip
 80018dc:	425a      	negs	r2, r3
 80018de:	4153      	adcs	r3, r2
 80018e0:	b2db      	uxtb	r3, r3
}
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b002      	add	sp, #8
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	fffffe00 	.word	0xfffffe00

080018f0 <LL_DMA_IsActiveFlag_TE2>:
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	4013      	ands	r3, r2
 8001900:	3b80      	subs	r3, #128	; 0x80
 8001902:	425a      	negs	r2, r3
 8001904:	4153      	adcs	r3, r2
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b002      	add	sp, #8
 800190e:	bd80      	pop	{r7, pc}

08001910 <LL_DMA_IsActiveFlag_TE3>:
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	4013      	ands	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <LL_DMA_IsActiveFlag_TE3+0x28>)
 8001924:	4694      	mov	ip, r2
 8001926:	4463      	add	r3, ip
 8001928:	425a      	negs	r2, r3
 800192a:	4153      	adcs	r3, r2
 800192c:	b2db      	uxtb	r3, r3
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	fffff800 	.word	0xfffff800

0800193c <LL_DMA_ClearFlag_TC2>:
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2220      	movs	r2, #32
 8001948:	605a      	str	r2, [r3, #4]
}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b002      	add	sp, #8
 8001950:	bd80      	pop	{r7, pc}

08001952 <LL_DMA_ClearFlag_TC3>:
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	605a      	str	r2, [r3, #4]
}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b002      	add	sp, #8
 8001968:	bd80      	pop	{r7, pc}

0800196a <LL_TIM_ClearFlag_UPDATE>:
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2202      	movs	r2, #2
 8001976:	4252      	negs	r2, r2
 8001978:	611a      	str	r2, [r3, #16]
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}

08001982 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	2201      	movs	r2, #1
 8001990:	4013      	ands	r3, r2
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800199a:	2300      	movs	r3, #0
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b002      	add	sp, #8
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <LL_USART_IsActiveFlag_RXNE>:
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2220      	movs	r2, #32
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	d101      	bne.n	80019bc <LL_USART_IsActiveFlag_RXNE+0x18>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <LL_USART_IsActiveFlag_RXNE+0x1a>
 80019bc:	2300      	movs	r3, #0
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <NMI_Handler+0x4>

080019cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <HardFault_Handler+0x4>

080019d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
  if(LL_DMA_IsActiveFlag_TC2(DMA1))
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <DMA1_Channel2_3_IRQHandler+0x80>)
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7ff ff54 	bl	80018a4 <LL_DMA_IsActiveFlag_TC2>
 80019fc:	1e03      	subs	r3, r0, #0
 80019fe:	d006      	beq.n	8001a0e <DMA1_Channel2_3_IRQHandler+0x1e>
  {
    LL_DMA_ClearFlag_TC2(DMA1);
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001a02:	0018      	movs	r0, r3
 8001a04:	f7ff ff9a 	bl	800193c <LL_DMA_ClearFlag_TC2>
    DMA1_TransmitComplete();
 8001a08:	f000 ff0c 	bl	8002824 <DMA1_TransmitComplete>
 8001a0c:	e00f      	b.n	8001a2e <DMA1_Channel2_3_IRQHandler+0x3e>
  }
  else if(LL_DMA_IsActiveFlag_TE2(DMA1))
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff ff6d 	bl	80018f0 <LL_DMA_IsActiveFlag_TE2>
 8001a16:	1e03      	subs	r3, r0, #0
 8001a18:	d009      	beq.n	8001a2e <DMA1_Channel2_3_IRQHandler+0x3e>
  {
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7ff ff22 	bl	8001868 <LL_DMA_DisableChannel>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001a26:	2103      	movs	r1, #3
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7ff ff1d 	bl	8001868 <LL_DMA_DisableChannel>
  }

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */
  if(LL_DMA_IsActiveFlag_TC3(DMA1))
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff ff47 	bl	80018c4 <LL_DMA_IsActiveFlag_TC3>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d006      	beq.n	8001a48 <DMA1_Channel2_3_IRQHandler+0x58>
  {
    LL_DMA_ClearFlag_TC3(DMA1);
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff ff88 	bl	8001952 <LL_DMA_ClearFlag_TC3>
    DMA1_RecieveComplete();
 8001a42:	f000 fee5 	bl	8002810 <DMA1_RecieveComplete>
  {
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
  }
  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001a46:	e00f      	b.n	8001a68 <DMA1_Channel2_3_IRQHandler+0x78>
  else if(LL_DMA_IsActiveFlag_TE3(DMA1))
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f7ff ff60 	bl	8001910 <LL_DMA_IsActiveFlag_TE3>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d009      	beq.n	8001a68 <DMA1_Channel2_3_IRQHandler+0x78>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001a56:	2102      	movs	r1, #2
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7ff ff05 	bl	8001868 <LL_DMA_DisableChannel>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <DMA1_Channel2_3_IRQHandler+0x80>)
 8001a60:	2103      	movs	r1, #3
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7ff ff00 	bl	8001868 <LL_DMA_DisableChannel>
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40020000 	.word	0x40020000

08001a74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  
  if (LL_TIM_IsActiveFlag_UPDATE (SM_DRIVER_TIMER)) {
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <TIM6_DAC_IRQHandler+0x24>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff ff81 	bl	8001982 <LL_TIM_IsActiveFlag_UPDATE>
 8001a80:	1e03      	subs	r3, r0, #0
 8001a82:	d005      	beq.n	8001a90 <TIM6_DAC_IRQHandler+0x1c>
    LL_TIM_ClearFlag_UPDATE (SM_DRIVER_TIMER);
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <TIM6_DAC_IRQHandler+0x24>)
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff ff6f 	bl	800196a <LL_TIM_ClearFlag_UPDATE>

    ST_Step_Driver ();
 8001a8c:	f7fe fe4c 	bl	8000728 <ST_Step_Driver>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40001000 	.word	0x40001000

08001a9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <USART1_IRQHandler+0x34>)
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f7ff ff7e 	bl	80019a4 <LL_USART_IsActiveFlag_RXNE>
 8001aa8:	1e03      	subs	r3, r0, #0
 8001aaa:	d00e      	beq.n	8001aca <USART1_IRQHandler+0x2e>
	    {
					//LL_USART_ClearFlag_RXNE (USART1); Cleared with reading!

	        UART_RX(rx_buff, RX_BUFF_SIZE);
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <USART1_IRQHandler+0x38>)
 8001aae:	2105      	movs	r1, #5
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 feff 	bl	80028b4 <UART_RX>
	        UART_RX_Handler(rx_buff, RX_BUFF_SIZE);
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <USART1_IRQHandler+0x38>)
 8001ab8:	2105      	movs	r1, #5
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 ff38 	bl	8002930 <UART_RX_Handler>
	        UART_TX(tx_buff, TX_BUFF_SIZE);
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <USART1_IRQHandler+0x3c>)
 8001ac2:	2105      	movs	r1, #5
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f000 feb7 	bl	8002838 <UART_TX>
	    }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	200000f8 	.word	0x200000f8
 8001ad8:	20000004 	.word	0x20000004

08001adc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <__NVIC_EnableIRQ>:
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	0002      	movs	r2, r0
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	1dfb      	adds	r3, r7, #7
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b7f      	cmp	r3, #127	; 0x7f
 8001afa:	d809      	bhi.n	8001b10 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	001a      	movs	r2, r3
 8001b02:	231f      	movs	r3, #31
 8001b04:	401a      	ands	r2, r3
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_EnableIRQ+0x30>)
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4091      	lsls	r1, r2
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	0002      	movs	r2, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b30:	d828      	bhi.n	8001b84 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b32:	4a2f      	ldr	r2, [pc, #188]	; (8001bf0 <__NVIC_SetPriority+0xd4>)
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	33c0      	adds	r3, #192	; 0xc0
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	589b      	ldr	r3, [r3, r2]
 8001b42:	1dfa      	adds	r2, r7, #7
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	0011      	movs	r1, r2
 8001b48:	2203      	movs	r2, #3
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	00d2      	lsls	r2, r2, #3
 8001b4e:	21ff      	movs	r1, #255	; 0xff
 8001b50:	4091      	lsls	r1, r2
 8001b52:	000a      	movs	r2, r1
 8001b54:	43d2      	mvns	r2, r2
 8001b56:	401a      	ands	r2, r3
 8001b58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	019b      	lsls	r3, r3, #6
 8001b5e:	22ff      	movs	r2, #255	; 0xff
 8001b60:	401a      	ands	r2, r3
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	0018      	movs	r0, r3
 8001b68:	2303      	movs	r3, #3
 8001b6a:	4003      	ands	r3, r0
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b70:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <__NVIC_SetPriority+0xd4>)
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	33c0      	adds	r3, #192	; 0xc0
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	501a      	str	r2, [r3, r0]
}
 8001b82:	e031      	b.n	8001be8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <__NVIC_SetPriority+0xd8>)
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	400b      	ands	r3, r1
 8001b90:	3b08      	subs	r3, #8
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3306      	adds	r3, #6
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	18d3      	adds	r3, r2, r3
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1dfa      	adds	r2, r7, #7
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	00d2      	lsls	r2, r2, #3
 8001baa:	21ff      	movs	r1, #255	; 0xff
 8001bac:	4091      	lsls	r1, r2
 8001bae:	000a      	movs	r2, r1
 8001bb0:	43d2      	mvns	r2, r2
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	019b      	lsls	r3, r3, #6
 8001bba:	22ff      	movs	r2, #255	; 0xff
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	1dfb      	adds	r3, r7, #7
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	4003      	ands	r3, r0
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bcc:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <__NVIC_SetPriority+0xd8>)
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	001c      	movs	r4, r3
 8001bd4:	230f      	movs	r3, #15
 8001bd6:	4023      	ands	r3, r4
 8001bd8:	3b08      	subs	r3, #8
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	3306      	adds	r3, #6
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	18c3      	adds	r3, r0, r3
 8001be4:	3304      	adds	r3, #4
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b003      	add	sp, #12
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <LL_AHB1_GRP1_EnableClock>:
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001c02:	6959      	ldr	r1, [r3, #20]
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4013      	ands	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000

08001c24 <LL_APB1_GRP1_EnableClock>:
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <LL_APB1_GRP1_EnableClock+0x28>)
 8001c2e:	69d9      	ldr	r1, [r3, #28]
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <LL_APB1_GRP1_EnableClock+0x28>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <LL_APB1_GRP1_EnableClock+0x28>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b004      	add	sp, #16
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000

08001c50 <LL_TIM_SetOnePulseMode>:
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2208      	movs	r2, #8
 8001c60:	4393      	bics	r3, r2
 8001c62:	001a      	movs	r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	601a      	str	r2, [r3, #0]
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <LL_TIM_DisableARRPreload>:
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	4393      	bics	r3, r2
 8001c84:	001a      	movs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <LL_TIM_OC_DisableFast>:
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d01e      	beq.n	8001ce2 <LL_TIM_OC_DisableFast+0x4e>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d019      	beq.n	8001cde <LL_TIM_OC_DisableFast+0x4a>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d014      	beq.n	8001cda <LL_TIM_OC_DisableFast+0x46>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d00f      	beq.n	8001cd6 <LL_TIM_OC_DisableFast+0x42>
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d008      	beq.n	8001cd2 <LL_TIM_OC_DisableFast+0x3e>
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d101      	bne.n	8001cce <LL_TIM_OC_DisableFast+0x3a>
 8001cca:	2305      	movs	r3, #5
 8001ccc:	e00a      	b.n	8001ce4 <LL_TIM_OC_DisableFast+0x50>
 8001cce:	2306      	movs	r3, #6
 8001cd0:	e008      	b.n	8001ce4 <LL_TIM_OC_DisableFast+0x50>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e006      	b.n	8001ce4 <LL_TIM_OC_DisableFast+0x50>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e004      	b.n	8001ce4 <LL_TIM_OC_DisableFast+0x50>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <LL_TIM_OC_DisableFast+0x50>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <LL_TIM_OC_DisableFast+0x50>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	200f      	movs	r0, #15
 8001ce6:	183a      	adds	r2, r7, r0
 8001ce8:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3318      	adds	r3, #24
 8001cee:	0019      	movs	r1, r3
 8001cf0:	183b      	adds	r3, r7, r0
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <LL_TIM_OC_DisableFast+0x8c>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	18cb      	adds	r3, r1, r3
 8001cfa:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	183a      	adds	r2, r7, r0
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	4907      	ldr	r1, [pc, #28]	; (8001d24 <LL_TIM_OC_DisableFast+0x90>)
 8001d06:	5c8a      	ldrb	r2, [r1, r2]
 8001d08:	0011      	movs	r1, r2
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	408a      	lsls	r2, r1
 8001d0e:	43d2      	mvns	r2, r2
 8001d10:	401a      	ands	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b004      	add	sp, #16
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	08003b18 	.word	0x08003b18
 8001d24:	08003b20 	.word	0x08003b20

08001d28 <LL_TIM_OC_EnablePreload>:
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d01e      	beq.n	8001d76 <LL_TIM_OC_EnablePreload+0x4e>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d019      	beq.n	8001d72 <LL_TIM_OC_EnablePreload+0x4a>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d014      	beq.n	8001d6e <LL_TIM_OC_EnablePreload+0x46>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b40      	cmp	r3, #64	; 0x40
 8001d48:	d00f      	beq.n	8001d6a <LL_TIM_OC_EnablePreload+0x42>
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d008      	beq.n	8001d66 <LL_TIM_OC_EnablePreload+0x3e>
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d101      	bne.n	8001d62 <LL_TIM_OC_EnablePreload+0x3a>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e00a      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x50>
 8001d62:	2306      	movs	r3, #6
 8001d64:	e008      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x50>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e006      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x50>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x50>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x50>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x50>
 8001d76:	2300      	movs	r3, #0
 8001d78:	200f      	movs	r0, #15
 8001d7a:	183a      	adds	r2, r7, r0
 8001d7c:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3318      	adds	r3, #24
 8001d82:	0019      	movs	r1, r3
 8001d84:	183b      	adds	r3, r7, r0
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <LL_TIM_OC_EnablePreload+0x88>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	18cb      	adds	r3, r1, r3
 8001d8e:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	183b      	adds	r3, r7, r0
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4906      	ldr	r1, [pc, #24]	; (8001db4 <LL_TIM_OC_EnablePreload+0x8c>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	2308      	movs	r3, #8
 8001da0:	408b      	lsls	r3, r1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	601a      	str	r2, [r3, #0]
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b004      	add	sp, #16
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	08003b18 	.word	0x08003b18
 8001db4:	08003b20 	.word	0x08003b20

08001db8 <LL_TIM_OC_DisablePreload>:
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d01e      	beq.n	8001e06 <LL_TIM_OC_DisablePreload+0x4e>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d019      	beq.n	8001e02 <LL_TIM_OC_DisablePreload+0x4a>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d014      	beq.n	8001dfe <LL_TIM_OC_DisablePreload+0x46>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	d00f      	beq.n	8001dfa <LL_TIM_OC_DisablePreload+0x42>
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d008      	beq.n	8001df6 <LL_TIM_OC_DisablePreload+0x3e>
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d101      	bne.n	8001df2 <LL_TIM_OC_DisablePreload+0x3a>
 8001dee:	2305      	movs	r3, #5
 8001df0:	e00a      	b.n	8001e08 <LL_TIM_OC_DisablePreload+0x50>
 8001df2:	2306      	movs	r3, #6
 8001df4:	e008      	b.n	8001e08 <LL_TIM_OC_DisablePreload+0x50>
 8001df6:	2304      	movs	r3, #4
 8001df8:	e006      	b.n	8001e08 <LL_TIM_OC_DisablePreload+0x50>
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e004      	b.n	8001e08 <LL_TIM_OC_DisablePreload+0x50>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e002      	b.n	8001e08 <LL_TIM_OC_DisablePreload+0x50>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_TIM_OC_DisablePreload+0x50>
 8001e06:	2300      	movs	r3, #0
 8001e08:	200f      	movs	r0, #15
 8001e0a:	183a      	adds	r2, r7, r0
 8001e0c:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3318      	adds	r3, #24
 8001e12:	0019      	movs	r1, r3
 8001e14:	183b      	adds	r3, r7, r0
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <LL_TIM_OC_DisablePreload+0x8c>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	18cb      	adds	r3, r1, r3
 8001e1e:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	183a      	adds	r2, r7, r0
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <LL_TIM_OC_DisablePreload+0x90>)
 8001e2a:	5c8a      	ldrb	r2, [r1, r2]
 8001e2c:	0011      	movs	r1, r2
 8001e2e:	2208      	movs	r2, #8
 8001e30:	408a      	lsls	r2, r1
 8001e32:	43d2      	mvns	r2, r2
 8001e34:	401a      	ands	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	601a      	str	r2, [r3, #0]
}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	08003b18 	.word	0x08003b18
 8001e48:	08003b20 	.word	0x08003b20

08001e4c <LL_TIM_SetTriggerOutput>:
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2270      	movs	r2, #112	; 0x70
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	001a      	movs	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	605a      	str	r2, [r3, #4]
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <LL_TIM_DisableMasterSlaveMode>:
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	4393      	bics	r3, r2
 8001e80:	001a      	movs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	609a      	str	r2, [r3, #8]
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e8e:	b5b0      	push	{r4, r5, r7, lr}
 8001e90:	b094      	sub	sp, #80	; 0x50
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e94:	253c      	movs	r5, #60	; 0x3c
 8001e96:	197b      	adds	r3, r7, r5
 8001e98:	0018      	movs	r0, r3
 8001e9a:	2314      	movs	r3, #20
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	f001 fdd9 	bl	8003a56 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001ea4:	241c      	movs	r4, #28
 8001ea6:	193b      	adds	r3, r7, r4
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	2320      	movs	r3, #32
 8001eac:	001a      	movs	r2, r3
 8001eae:	2100      	movs	r1, #0
 8001eb0:	f001 fdd1 	bl	8003a56 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	2318      	movs	r3, #24
 8001eba:	001a      	movs	r2, r3
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f001 fdca 	bl	8003a56 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f7ff feae 	bl	8001c24 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 8001ec8:	197b      	adds	r3, r7, r5
 8001eca:	222f      	movs	r2, #47	; 0x2f
 8001ecc:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ece:	197b      	adds	r3, r7, r5
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 9;
 8001ed4:	197b      	adds	r3, r7, r5
 8001ed6:	2209      	movs	r2, #9
 8001ed8:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001eda:	197b      	adds	r3, r7, r5
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001ee0:	197a      	adds	r2, r7, r5
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	05db      	lsls	r3, r3, #23
 8001ee6:	0011      	movs	r1, r2
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f001 f965 	bl	80031b8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	05db      	lsls	r3, r3, #23
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f7ff febe 	bl	8001c74 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	05db      	lsls	r3, r3, #23
 8001efc:	2101      	movs	r1, #1
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7ff ff12 	bl	8001d28 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001f04:	193b      	adds	r3, r7, r4
 8001f06:	2260      	movs	r2, #96	; 0x60
 8001f08:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001f0a:	193b      	adds	r3, r7, r4
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 0;
 8001f16:	193b      	adds	r3, r7, r4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001f1c:	193b      	adds	r3, r7, r4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001f22:	193a      	adds	r2, r7, r4
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	05db      	lsls	r3, r3, #23
 8001f28:	2101      	movs	r1, #1
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f001 f9c6 	bl	80032bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	05db      	lsls	r3, r3, #23
 8001f34:	2101      	movs	r1, #1
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7ff feac 	bl	8001c94 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	05db      	lsls	r3, r3, #23
 8001f40:	2110      	movs	r1, #16
 8001f42:	0018      	movs	r0, r3
 8001f44:	f7ff fef0 	bl	8001d28 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001f48:	193a      	adds	r2, r7, r4
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	05db      	lsls	r3, r3, #23
 8001f4e:	2110      	movs	r1, #16
 8001f50:	0018      	movs	r0, r3
 8001f52:	f001 f9b3 	bl	80032bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	05db      	lsls	r3, r3, #23
 8001f5a:	2110      	movs	r1, #16
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff fe99 	bl	8001c94 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	005a      	lsls	r2, r3, #1
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	05db      	lsls	r3, r3, #23
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7ff fedb 	bl	8001d28 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001f72:	193a      	adds	r2, r7, r4
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	0059      	lsls	r1, r3, #1
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	05db      	lsls	r3, r3, #23
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f001 f99d 	bl	80032bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	005a      	lsls	r2, r3, #1
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	05db      	lsls	r3, r3, #23
 8001f8a:	0011      	movs	r1, r2
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7ff fe81 	bl	8001c94 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	05db      	lsls	r3, r3, #23
 8001f96:	2108      	movs	r1, #8
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff fe59 	bl	8001c50 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	05db      	lsls	r3, r3, #23
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f7ff ff51 	bl	8001e4c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	05db      	lsls	r3, r3, #23
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff ff5e 	bl	8001e70 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	05db      	lsls	r3, r3, #23
 8001fb8:	2101      	movs	r1, #1
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f7ff fefc 	bl	8001db8 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	05db      	lsls	r3, r3, #23
 8001fc4:	2110      	movs	r1, #16
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7ff fef6 	bl	8001db8 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	005a      	lsls	r2, r3, #1
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	05db      	lsls	r3, r3, #23
 8001fd4:	0011      	movs	r1, r2
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f7ff feee 	bl	8001db8 <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff fe09 	bl	8001bf8 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = STEP_0_Pin;
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2202      	movs	r2, #2
 8001fea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	2202      	movs	r2, #2
 8001ff0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2202      	movs	r2, #2
 8002002:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	2202      	movs	r2, #2
 8002008:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(STEP_0_GPIO_Port, &GPIO_InitStruct);
 800200a:	1d3a      	adds	r2, r7, #4
 800200c:	2390      	movs	r3, #144	; 0x90
 800200e:	05db      	lsls	r3, r3, #23
 8002010:	0011      	movs	r1, r2
 8002012:	0018      	movs	r0, r3
 8002014:	f000 feac 	bl	8002d70 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = STEP_2_Pin;
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2204      	movs	r2, #4
 800201c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2202      	movs	r2, #2
 8002022:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2203      	movs	r2, #3
 8002028:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2202      	movs	r2, #2
 8002034:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2202      	movs	r2, #2
 800203a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800203c:	1d3a      	adds	r2, r7, #4
 800203e:	2390      	movs	r3, #144	; 0x90
 8002040:	05db      	lsls	r3, r3, #23
 8002042:	0011      	movs	r1, r2
 8002044:	0018      	movs	r0, r3
 8002046:	f000 fe93 	bl	8002d70 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = STEP_1_Pin;
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2220      	movs	r2, #32
 800204e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2202      	movs	r2, #2
 8002054:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2203      	movs	r2, #3
 800205a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2202      	movs	r2, #2
 8002066:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	2202      	movs	r2, #2
 800206c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 800206e:	1d3a      	adds	r2, r7, #4
 8002070:	2390      	movs	r3, #144	; 0x90
 8002072:	05db      	lsls	r3, r3, #23
 8002074:	0011      	movs	r1, r2
 8002076:	0018      	movs	r0, r3
 8002078:	f000 fe7a 	bl	8002d70 <LL_GPIO_Init>

}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	b014      	add	sp, #80	; 0x50
 8002082:	bdb0      	pop	{r4, r5, r7, pc}

08002084 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	0018      	movs	r0, r3
 800208e:	2314      	movs	r3, #20
 8002090:	001a      	movs	r2, r3
 8002092:	2100      	movs	r1, #0
 8002094:	f001 fcdf 	bl	8003a56 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002098:	2010      	movs	r0, #16
 800209a:	f7ff fdc3 	bl	8001c24 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 800209e:	2100      	movs	r1, #0
 80020a0:	2011      	movs	r0, #17
 80020a2:	f7ff fd3b 	bl	8001b1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020a6:	2011      	movs	r0, #17
 80020a8:	f7ff fd1e 	bl	8001ae8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	2200      	movs	r2, #0
 80020b0:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 4799;
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <MX_TIM6_Init+0x68>)
 80020bc:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <MX_TIM6_Init+0x6c>)
 80020c2:	0019      	movs	r1, r3
 80020c4:	0010      	movs	r0, r2
 80020c6:	f001 f877 	bl	80031b8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_TIM6_Init+0x6c>)
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff fdd1 	bl	8001c74 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <MX_TIM6_Init+0x6c>)
 80020d4:	2100      	movs	r1, #0
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7ff feb8 	bl	8001e4c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <MX_TIM6_Init+0x6c>)
 80020de:	0018      	movs	r0, r3
 80020e0:	f7ff fec6 	bl	8001e70 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020e4:	46c0      	nop			; (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b006      	add	sp, #24
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	000012bf 	.word	0x000012bf
 80020f0:	40001000 	.word	0x40001000

080020f4 <__NVIC_EnableIRQ>:
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	0002      	movs	r2, r0
 80020fc:	1dfb      	adds	r3, r7, #7
 80020fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b7f      	cmp	r3, #127	; 0x7f
 8002106:	d809      	bhi.n	800211c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	001a      	movs	r2, r3
 800210e:	231f      	movs	r3, #31
 8002110:	401a      	ands	r2, r3
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_EnableIRQ+0x30>)
 8002114:	2101      	movs	r1, #1
 8002116:	4091      	lsls	r1, r2
 8002118:	000a      	movs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	0002      	movs	r2, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	1dfb      	adds	r3, r7, #7
 8002134:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b7f      	cmp	r3, #127	; 0x7f
 800213c:	d828      	bhi.n	8002190 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800213e:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <__NVIC_SetPriority+0xd4>)
 8002140:	1dfb      	adds	r3, r7, #7
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b25b      	sxtb	r3, r3
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	33c0      	adds	r3, #192	; 0xc0
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	589b      	ldr	r3, [r3, r2]
 800214e:	1dfa      	adds	r2, r7, #7
 8002150:	7812      	ldrb	r2, [r2, #0]
 8002152:	0011      	movs	r1, r2
 8002154:	2203      	movs	r2, #3
 8002156:	400a      	ands	r2, r1
 8002158:	00d2      	lsls	r2, r2, #3
 800215a:	21ff      	movs	r1, #255	; 0xff
 800215c:	4091      	lsls	r1, r2
 800215e:	000a      	movs	r2, r1
 8002160:	43d2      	mvns	r2, r2
 8002162:	401a      	ands	r2, r3
 8002164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	019b      	lsls	r3, r3, #6
 800216a:	22ff      	movs	r2, #255	; 0xff
 800216c:	401a      	ands	r2, r3
 800216e:	1dfb      	adds	r3, r7, #7
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	0018      	movs	r0, r3
 8002174:	2303      	movs	r3, #3
 8002176:	4003      	ands	r3, r0
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800217c:	481f      	ldr	r0, [pc, #124]	; (80021fc <__NVIC_SetPriority+0xd4>)
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b25b      	sxtb	r3, r3
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	430a      	orrs	r2, r1
 8002188:	33c0      	adds	r3, #192	; 0xc0
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	501a      	str	r2, [r3, r0]
}
 800218e:	e031      	b.n	80021f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002190:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <__NVIC_SetPriority+0xd8>)
 8002192:	1dfb      	adds	r3, r7, #7
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	0019      	movs	r1, r3
 8002198:	230f      	movs	r3, #15
 800219a:	400b      	ands	r3, r1
 800219c:	3b08      	subs	r3, #8
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3306      	adds	r3, #6
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	18d3      	adds	r3, r2, r3
 80021a6:	3304      	adds	r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1dfa      	adds	r2, r7, #7
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	0011      	movs	r1, r2
 80021b0:	2203      	movs	r2, #3
 80021b2:	400a      	ands	r2, r1
 80021b4:	00d2      	lsls	r2, r2, #3
 80021b6:	21ff      	movs	r1, #255	; 0xff
 80021b8:	4091      	lsls	r1, r2
 80021ba:	000a      	movs	r2, r1
 80021bc:	43d2      	mvns	r2, r2
 80021be:	401a      	ands	r2, r3
 80021c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	019b      	lsls	r3, r3, #6
 80021c6:	22ff      	movs	r2, #255	; 0xff
 80021c8:	401a      	ands	r2, r3
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	0018      	movs	r0, r3
 80021d0:	2303      	movs	r3, #3
 80021d2:	4003      	ands	r3, r0
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d8:	4809      	ldr	r0, [pc, #36]	; (8002200 <__NVIC_SetPriority+0xd8>)
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	001c      	movs	r4, r3
 80021e0:	230f      	movs	r3, #15
 80021e2:	4023      	ands	r3, r4
 80021e4:	3b08      	subs	r3, #8
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	430a      	orrs	r2, r1
 80021ea:	3306      	adds	r3, #6
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	18c3      	adds	r3, r0, r3
 80021f0:	3304      	adds	r3, #4
 80021f2:	601a      	str	r2, [r3, #0]
}
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b003      	add	sp, #12
 80021fa:	bd90      	pop	{r4, r7, pc}
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <LL_DMA_EnableChannel>:
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	3b01      	subs	r3, #1
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <LL_DMA_EnableChannel+0x38>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	001a      	movs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	18d3      	adds	r3, r2, r3
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	3b01      	subs	r3, #1
 8002222:	4906      	ldr	r1, [pc, #24]	; (800223c <LL_DMA_EnableChannel+0x38>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	0019      	movs	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	18cb      	adds	r3, r1, r3
 800222c:	2101      	movs	r1, #1
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b002      	add	sp, #8
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	08003b28 	.word	0x08003b28

08002240 <LL_DMA_DisableChannel>:
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <LL_DMA_DisableChannel+0x38>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	001a      	movs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	18d3      	adds	r3, r2, r3
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	3b01      	subs	r3, #1
 800225e:	4906      	ldr	r1, [pc, #24]	; (8002278 <LL_DMA_DisableChannel+0x38>)
 8002260:	5ccb      	ldrb	r3, [r1, r3]
 8002262:	0019      	movs	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	18cb      	adds	r3, r1, r3
 8002268:	2101      	movs	r1, #1
 800226a:	438a      	bics	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	08003b28 	.word	0x08003b28

0800227c <LL_DMA_SetDataTransferDirection>:
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3b01      	subs	r3, #1
 800228c:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <LL_DMA_SetDataTransferDirection+0x40>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	001a      	movs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	18d3      	adds	r3, r2, r3
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <LL_DMA_SetDataTransferDirection+0x44>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	4a06      	ldr	r2, [pc, #24]	; (80022bc <LL_DMA_SetDataTransferDirection+0x40>)
 80022a4:	5cd3      	ldrb	r3, [r2, r3]
 80022a6:	001a      	movs	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	18d3      	adds	r3, r2, r3
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b004      	add	sp, #16
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	08003b28 	.word	0x08003b28
 80022c0:	ffffbfef 	.word	0xffffbfef

080022c4 <LL_DMA_GetDataTransferDirection>:
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	4a06      	ldr	r2, [pc, #24]	; (80022ec <LL_DMA_GetDataTransferDirection+0x28>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	001a      	movs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	18d3      	adds	r3, r2, r3
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <LL_DMA_GetDataTransferDirection+0x2c>)
 80022e0:	4013      	ands	r3, r2
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b002      	add	sp, #8
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	08003b28 	.word	0x08003b28
 80022f0:	00004010 	.word	0x00004010

080022f4 <LL_DMA_SetMode>:
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	3b01      	subs	r3, #1
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <LL_DMA_SetMode+0x40>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	001a      	movs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	18d3      	adds	r3, r2, r3
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2220      	movs	r2, #32
 8002312:	4393      	bics	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3b01      	subs	r3, #1
 800231a:	4a06      	ldr	r2, [pc, #24]	; (8002334 <LL_DMA_SetMode+0x40>)
 800231c:	5cd3      	ldrb	r3, [r2, r3]
 800231e:	001a      	movs	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	18d3      	adds	r3, r2, r3
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b004      	add	sp, #16
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	08003b28 	.word	0x08003b28

08002338 <LL_DMA_SetPeriphIncMode>:
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	3b01      	subs	r3, #1
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <LL_DMA_SetPeriphIncMode+0x40>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	001a      	movs	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	18d3      	adds	r3, r2, r3
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	4393      	bics	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3b01      	subs	r3, #1
 800235e:	4a06      	ldr	r2, [pc, #24]	; (8002378 <LL_DMA_SetPeriphIncMode+0x40>)
 8002360:	5cd3      	ldrb	r3, [r2, r3]
 8002362:	001a      	movs	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	18d3      	adds	r3, r2, r3
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	430a      	orrs	r2, r1
 800236c:	601a      	str	r2, [r3, #0]
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b004      	add	sp, #16
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	08003b28 	.word	0x08003b28

0800237c <LL_DMA_SetMemoryIncMode>:
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	3b01      	subs	r3, #1
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <LL_DMA_SetMemoryIncMode+0x40>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	001a      	movs	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	4393      	bics	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	4a06      	ldr	r2, [pc, #24]	; (80023bc <LL_DMA_SetMemoryIncMode+0x40>)
 80023a4:	5cd3      	ldrb	r3, [r2, r3]
 80023a6:	001a      	movs	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	18d3      	adds	r3, r2, r3
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	08003b28 	.word	0x08003b28

080023c0 <LL_DMA_SetPeriphSize>:
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <LL_DMA_SetPeriphSize+0x40>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	001a      	movs	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	18d3      	adds	r3, r2, r3
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a09      	ldr	r2, [pc, #36]	; (8002404 <LL_DMA_SetPeriphSize+0x44>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	4a06      	ldr	r2, [pc, #24]	; (8002400 <LL_DMA_SetPeriphSize+0x40>)
 80023e8:	5cd3      	ldrb	r3, [r2, r3]
 80023ea:	001a      	movs	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	18d3      	adds	r3, r2, r3
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	08003b28 	.word	0x08003b28
 8002404:	fffffcff 	.word	0xfffffcff

08002408 <LL_DMA_SetMemorySize>:
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3b01      	subs	r3, #1
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <LL_DMA_SetMemorySize+0x40>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	001a      	movs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	18d3      	adds	r3, r2, r3
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a09      	ldr	r2, [pc, #36]	; (800244c <LL_DMA_SetMemorySize+0x44>)
 8002426:	4013      	ands	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3b01      	subs	r3, #1
 800242e:	4a06      	ldr	r2, [pc, #24]	; (8002448 <LL_DMA_SetMemorySize+0x40>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	001a      	movs	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	18d3      	adds	r3, r2, r3
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b004      	add	sp, #16
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	08003b28 	.word	0x08003b28
 800244c:	fffff3ff 	.word	0xfffff3ff

08002450 <LL_DMA_SetChannelPriorityLevel>:
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	3b01      	subs	r3, #1
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	001a      	movs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	18d3      	adds	r3, r2, r3
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a09      	ldr	r2, [pc, #36]	; (8002494 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800246e:	4013      	ands	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3b01      	subs	r3, #1
 8002476:	4a06      	ldr	r2, [pc, #24]	; (8002490 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	001a      	movs	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	18d3      	adds	r3, r2, r3
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]
}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b004      	add	sp, #16
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	08003b28 	.word	0x08003b28
 8002494:	ffffcfff 	.word	0xffffcfff

08002498 <LL_DMA_SetDataLength>:
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <LL_DMA_SetDataLength+0x3c>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	001a      	movs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	18d3      	adds	r3, r2, r3
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	0419      	lsls	r1, r3, #16
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <LL_DMA_SetDataLength+0x3c>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	001a      	movs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	18d3      	adds	r3, r2, r3
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b004      	add	sp, #16
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	08003b28 	.word	0x08003b28

080024d8 <LL_DMA_ConfigAddresses>:
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d112      	bne.n	8002512 <LL_DMA_ConfigAddresses+0x3a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	4a13      	ldr	r2, [pc, #76]	; (8002540 <LL_DMA_ConfigAddresses+0x68>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	001a      	movs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	18d3      	adds	r3, r2, r3
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3b01      	subs	r3, #1
 8002502:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <LL_DMA_ConfigAddresses+0x68>)
 8002504:	5cd3      	ldrb	r3, [r2, r3]
 8002506:	001a      	movs	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	18d3      	adds	r3, r2, r3
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	e011      	b.n	8002536 <LL_DMA_ConfigAddresses+0x5e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3b01      	subs	r3, #1
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <LL_DMA_ConfigAddresses+0x68>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	001a      	movs	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	18d3      	adds	r3, r2, r3
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3b01      	subs	r3, #1
 8002528:	4a05      	ldr	r2, [pc, #20]	; (8002540 <LL_DMA_ConfigAddresses+0x68>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	001a      	movs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	18d3      	adds	r3, r2, r3
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	60da      	str	r2, [r3, #12]
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b004      	add	sp, #16
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	08003b28 	.word	0x08003b28

08002544 <LL_AHB1_GRP1_EnableClock>:
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <LL_AHB1_GRP1_EnableClock+0x28>)
 800254e:	6959      	ldr	r1, [r3, #20]
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <LL_AHB1_GRP1_EnableClock+0x28>)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	430a      	orrs	r2, r1
 8002556:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <LL_AHB1_GRP1_EnableClock+0x28>)
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4013      	ands	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b004      	add	sp, #16
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000

08002570 <LL_APB1_GRP2_EnableClock>:
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <LL_APB1_GRP2_EnableClock+0x28>)
 800257a:	6999      	ldr	r1, [r3, #24]
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <LL_APB1_GRP2_EnableClock+0x28>)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	430a      	orrs	r2, r1
 8002582:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <LL_APB1_GRP2_EnableClock+0x28>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4013      	ands	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800258e:	68fb      	ldr	r3, [r7, #12]
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b004      	add	sp, #16
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000

0800259c <LL_USART_Enable>:
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2201      	movs	r2, #1
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	601a      	str	r2, [r3, #0]
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <LL_USART_ConfigAsyncMode>:
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <LL_USART_ConfigAsyncMode+0x2c>)
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	222a      	movs	r2, #42	; 0x2a
 80025d2:	4393      	bics	r3, r2
 80025d4:	001a      	movs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	609a      	str	r2, [r3, #8]
}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b002      	add	sp, #8
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	ffffb7ff 	.word	0xffffb7ff

080025e8 <LL_USART_EnableIT_RXNE>:
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2220      	movs	r2, #32
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	601a      	str	r2, [r3, #0]
}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b002      	add	sp, #8
 8002602:	bd80      	pop	{r7, pc}

08002604 <LL_USART_DisableIT_CTS>:
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a03      	ldr	r2, [pc, #12]	; (8002620 <LL_USART_DisableIT_CTS+0x1c>)
 8002612:	401a      	ands	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}
 8002620:	fffffbff 	.word	0xfffffbff

08002624 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3328      	adds	r3, #40	; 0x28
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e002      	b.n	8002642 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3324      	adds	r3, #36	; 0x24
 8002640:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}

0800264c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b08f      	sub	sp, #60	; 0x3c
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002652:	241c      	movs	r4, #28
 8002654:	193b      	adds	r3, r7, r4
 8002656:	0018      	movs	r0, r3
 8002658:	231c      	movs	r3, #28
 800265a:	001a      	movs	r2, r3
 800265c:	2100      	movs	r1, #0
 800265e:	f001 f9fa 	bl	8003a56 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	0018      	movs	r0, r3
 8002666:	2318      	movs	r3, #24
 8002668:	001a      	movs	r2, r3
 800266a:	2100      	movs	r1, #0
 800266c:	f001 f9f3 	bl	8003a56 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	01db      	lsls	r3, r3, #7
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff ff7b 	bl	8002570 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	0018      	movs	r0, r3
 8002680:	f7ff ff60 	bl	8002544 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	0092      	lsls	r2, r2, #2
 800268a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2202      	movs	r2, #2
 8002690:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	2203      	movs	r2, #3
 8002696:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2201      	movs	r2, #1
 80026a8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	1d3a      	adds	r2, r7, #4
 80026ac:	2390      	movs	r3, #144	; 0x90
 80026ae:	05db      	lsls	r3, r3, #23
 80026b0:	0011      	movs	r1, r2
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 fb5c 	bl	8002d70 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	00d2      	lsls	r2, r2, #3
 80026be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	2202      	movs	r2, #2
 80026c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2203      	movs	r2, #3
 80026ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	2201      	movs	r2, #1
 80026dc:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026de:	1d3a      	adds	r2, r7, #4
 80026e0:	2390      	movs	r3, #144	; 0x90
 80026e2:	05db      	lsls	r3, r3, #23
 80026e4:	0011      	movs	r1, r2
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 fb42 	bl	8002d70 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80026ec:	4b46      	ldr	r3, [pc, #280]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	2103      	movs	r1, #3
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7ff fdc2 	bl	800227c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 80026f8:	4b43      	ldr	r3, [pc, #268]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	2103      	movs	r1, #3
 80026fe:	0018      	movs	r0, r3
 8002700:	f7ff fea6 	bl	8002450 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8002704:	4b40      	ldr	r3, [pc, #256]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 8002706:	2200      	movs	r2, #0
 8002708:	2103      	movs	r1, #3
 800270a:	0018      	movs	r0, r3
 800270c:	f7ff fdf2 	bl	80022f4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8002710:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 8002712:	2200      	movs	r2, #0
 8002714:	2103      	movs	r1, #3
 8002716:	0018      	movs	r0, r3
 8002718:	f7ff fe0e 	bl	8002338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	2103      	movs	r1, #3
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff fe2a 	bl	800237c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8002728:	4b37      	ldr	r3, [pc, #220]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 800272a:	2200      	movs	r2, #0
 800272c:	2103      	movs	r1, #3
 800272e:	0018      	movs	r0, r3
 8002730:	f7ff fe46 	bl	80023c0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 8002736:	2200      	movs	r2, #0
 8002738:	2103      	movs	r1, #3
 800273a:	0018      	movs	r0, r3
 800273c:	f7ff fe64 	bl	8002408 <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002740:	4b31      	ldr	r3, [pc, #196]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 8002742:	2210      	movs	r2, #16
 8002744:	2102      	movs	r1, #2
 8002746:	0018      	movs	r0, r3
 8002748:	f7ff fd98 	bl	800227c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 800274c:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 800274e:	2200      	movs	r2, #0
 8002750:	2102      	movs	r1, #2
 8002752:	0018      	movs	r0, r3
 8002754:	f7ff fe7c 	bl	8002450 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8002758:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 800275a:	2200      	movs	r2, #0
 800275c:	2102      	movs	r1, #2
 800275e:	0018      	movs	r0, r3
 8002760:	f7ff fdc8 	bl	80022f4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8002764:	4b28      	ldr	r3, [pc, #160]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 8002766:	2200      	movs	r2, #0
 8002768:	2102      	movs	r1, #2
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fde4 	bl	8002338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	2102      	movs	r1, #2
 8002776:	0018      	movs	r0, r3
 8002778:	f7ff fe00 	bl	800237c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 800277e:	2200      	movs	r2, #0
 8002780:	2102      	movs	r1, #2
 8002782:	0018      	movs	r0, r3
 8002784:	f7ff fe1c 	bl	80023c0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <MX_USART1_UART_Init+0x1bc>)
 800278a:	2200      	movs	r2, #0
 800278c:	2102      	movs	r1, #2
 800278e:	0018      	movs	r0, r3
 8002790:	f7ff fe3a 	bl	8002408 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN USART1_Init 1 */
  NVIC_SetPriority(USART1_IRQn, 2);
 8002794:	2102      	movs	r1, #2
 8002796:	201b      	movs	r0, #27
 8002798:	f7ff fcc6 	bl	8002128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800279c:	201b      	movs	r0, #27
 800279e:	f7ff fca9 	bl	80020f4 <__NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	22e1      	movs	r2, #225	; 0xe1
 80027a6:	0252      	lsls	r2, r2, #9
 80027a8:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80027aa:	0021      	movs	r1, r4
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	220c      	movs	r2, #12
 80027c2:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	4a0e      	ldr	r2, [pc, #56]	; (800280c <MX_USART1_UART_Init+0x1c0>)
 80027d4:	0019      	movs	r1, r3
 80027d6:	0010      	movs	r0, r2
 80027d8:	f001 f848 	bl	800386c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <MX_USART1_UART_Init+0x1c0>)
 80027de:	0018      	movs	r0, r3
 80027e0:	f7ff ff10 	bl	8002604 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <MX_USART1_UART_Init+0x1c0>)
 80027e6:	0018      	movs	r0, r3
 80027e8:	f7ff fee6 	bl	80025b8 <LL_USART_ConfigAsyncMode>

  LL_USART_EnableIT_RXNE(USART1);
 80027ec:	4b07      	ldr	r3, [pc, #28]	; (800280c <MX_USART1_UART_Init+0x1c0>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff fefa 	bl	80025e8 <LL_USART_EnableIT_RXNE>

  LL_USART_Enable(USART1);
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <MX_USART1_UART_Init+0x1c0>)
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7ff fed0 	bl	800259c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  MX_DMA_Init();
 80027fc:	f7fe fbee 	bl	8000fdc <MX_DMA_Init>

  /* USER CODE END USART1_Init 2 */

}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b00f      	add	sp, #60	; 0x3c
 8002806:	bd90      	pop	{r4, r7, pc}
 8002808:	40020000 	.word	0x40020000
 800280c:	40013800 	.word	0x40013800

08002810 <DMA1_RecieveComplete>:

/* USER CODE BEFIN 1 */
uint8_t fl_rx=0, fl_tx=0;

void DMA1_RecieveComplete(void) {
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  fl_rx = 1;
 8002814:	4b02      	ldr	r3, [pc, #8]	; (8002820 <DMA1_RecieveComplete+0x10>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	200000f5 	.word	0x200000f5

08002824 <DMA1_TransmitComplete>:
//-----------------------------------------
void DMA1_TransmitComplete(void) {
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  fl_tx = 1;
 8002828:	4b02      	ldr	r3, [pc, #8]	; (8002834 <DMA1_TransmitComplete+0x10>)
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200000f6 	.word	0x200000f6

08002838 <UART_TX>:

/* USER CODE BEGIN 2 */
uint8_t tx_buff[TX_BUFF_SIZE] = "hello";
uint8_t rx_buff[RX_BUFF_SIZE] = {0,0,0};

void UART_TX (uint8_t* source, uint16_t len) {
 8002838:	b5b0      	push	{r4, r5, r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af02      	add	r7, sp, #8
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	000a      	movs	r2, r1
 8002842:	1cbb      	adds	r3, r7, #2
 8002844:	801a      	strh	r2, [r3, #0]
  LL_DMA_DisableChannel(DMA1, UART_DMA_TX);
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <UART_TX+0x70>)
 8002848:	2102      	movs	r1, #2
 800284a:	0018      	movs	r0, r3
 800284c:	f7ff fcf8 	bl	8002240 <LL_DMA_DisableChannel>
	LL_DMA_ConfigAddresses(DMA1, UART_DMA_TX, (uint32_t)source, LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT),
 8002850:	687c      	ldr	r4, [r7, #4]
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <UART_TX+0x74>)
 8002854:	2100      	movs	r1, #0
 8002856:	0018      	movs	r0, r3
 8002858:	f7ff fee4 	bl	8002624 <LL_USART_DMA_GetRegAddr>
 800285c:	0005      	movs	r5, r0
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <UART_TX+0x70>)
 8002860:	2102      	movs	r1, #2
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff fd2e 	bl	80022c4 <LL_DMA_GetDataTransferDirection>
 8002868:	0003      	movs	r3, r0
 800286a:	480f      	ldr	r0, [pc, #60]	; (80028a8 <UART_TX+0x70>)
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	002b      	movs	r3, r5
 8002870:	0022      	movs	r2, r4
 8002872:	2102      	movs	r1, #2
 8002874:	f7ff fe30 	bl	80024d8 <LL_DMA_ConfigAddresses>
												 LL_DMA_GetDataTransferDirection(DMA1, UART_DMA_TX));
  LL_DMA_SetDataLength(DMA1, UART_DMA_TX, len);
 8002878:	1cbb      	adds	r3, r7, #2
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	480a      	ldr	r0, [pc, #40]	; (80028a8 <UART_TX+0x70>)
 800287e:	001a      	movs	r2, r3
 8002880:	2102      	movs	r1, #2
 8002882:	f7ff fe09 	bl	8002498 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, UART_DMA_TX);
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <UART_TX+0x70>)
 8002888:	2102      	movs	r1, #2
 800288a:	0018      	movs	r0, r3
 800288c:	f7ff fcba 	bl	8002204 <LL_DMA_EnableChannel>
  while (!fl_tx) {}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <UART_TX+0x78>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0fb      	beq.n	8002892 <UART_TX+0x5a>
  fl_tx=0;
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <UART_TX+0x78>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b002      	add	sp, #8
 80028a6:	bdb0      	pop	{r4, r5, r7, pc}
 80028a8:	40020000 	.word	0x40020000
 80028ac:	40013800 	.word	0x40013800
 80028b0:	200000f6 	.word	0x200000f6

080028b4 <UART_RX>:
//--------------------------------------------------------
void UART_RX (uint8_t* dest, uint16_t len) {
 80028b4:	b5b0      	push	{r4, r5, r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	000a      	movs	r2, r1
 80028be:	1cbb      	adds	r3, r7, #2
 80028c0:	801a      	strh	r2, [r3, #0]
  LL_DMA_DisableChannel(DMA1, UART_DMA_RX);
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <UART_RX+0x70>)
 80028c4:	2103      	movs	r1, #3
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7ff fcba 	bl	8002240 <LL_DMA_DisableChannel>
	LL_DMA_ConfigAddresses(DMA1, UART_DMA_RX, LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE),
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <UART_RX+0x74>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7ff fea7 	bl	8002624 <LL_USART_DMA_GetRegAddr>
 80028d6:	0005      	movs	r5, r0
 80028d8:	687c      	ldr	r4, [r7, #4]
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <UART_RX+0x70>)
 80028dc:	2103      	movs	r1, #3
 80028de:	0018      	movs	r0, r3
 80028e0:	f7ff fcf0 	bl	80022c4 <LL_DMA_GetDataTransferDirection>
 80028e4:	0003      	movs	r3, r0
 80028e6:	480f      	ldr	r0, [pc, #60]	; (8002924 <UART_RX+0x70>)
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	0023      	movs	r3, r4
 80028ec:	002a      	movs	r2, r5
 80028ee:	2103      	movs	r1, #3
 80028f0:	f7ff fdf2 	bl	80024d8 <LL_DMA_ConfigAddresses>
												 (uint32_t)dest, LL_DMA_GetDataTransferDirection(DMA1, UART_DMA_RX));
  LL_DMA_SetDataLength(DMA1, UART_DMA_RX, len);
 80028f4:	1cbb      	adds	r3, r7, #2
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	480a      	ldr	r0, [pc, #40]	; (8002924 <UART_RX+0x70>)
 80028fa:	001a      	movs	r2, r3
 80028fc:	2103      	movs	r1, #3
 80028fe:	f7ff fdcb 	bl	8002498 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, UART_DMA_RX);
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <UART_RX+0x70>)
 8002904:	2103      	movs	r1, #3
 8002906:	0018      	movs	r0, r3
 8002908:	f7ff fc7c 	bl	8002204 <LL_DMA_EnableChannel>
  while (!fl_rx) {}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <UART_RX+0x78>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0fb      	beq.n	800290e <UART_RX+0x5a>
  fl_rx=0;
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <UART_RX+0x78>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bdb0      	pop	{r4, r5, r7, pc}
 8002924:	40020000 	.word	0x40020000
 8002928:	40013800 	.word	0x40013800
 800292c:	200000f5 	.word	0x200000f5

08002930 <UART_RX_Handler>:
//--------------------------------------------------------
void UART_RX_Handler (uint8_t* dest, uint16_t len) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	000a      	movs	r2, r1
 800293a:	1cbb      	adds	r3, r7, #2
 800293c:	801a      	strh	r2, [r3, #0]
	uint8_t motor_number = dest[0];
 800293e:	210f      	movs	r1, #15
 8002940:	187b      	adds	r3, r7, r1
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	701a      	strb	r2, [r3, #0]
	int urad = (int32_t)((((uint32_t)rx_buff[1]) << 24) | (((uint32_t)rx_buff[2]) << 16) | (((uint32_t)rx_buff[3]) << 8) | ((uint32_t)rx_buff[4]));
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <UART_RX_Handler+0x50>)
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	061a      	lsls	r2, r3, #24
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <UART_RX_Handler+0x50>)
 8002950:	789b      	ldrb	r3, [r3, #2]
 8002952:	041b      	lsls	r3, r3, #16
 8002954:	431a      	orrs	r2, r3
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <UART_RX_Handler+0x50>)
 8002958:	78db      	ldrb	r3, [r3, #3]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	4313      	orrs	r3, r2
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <UART_RX_Handler+0x50>)
 8002960:	7912      	ldrb	r2, [r2, #4]
 8002962:	4313      	orrs	r3, r2
 8002964:	60bb      	str	r3, [r7, #8]
	AxisRotate(motor_number, urad, 1000 * 1000);
 8002966:	187b      	adds	r3, r7, r1
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	4a05      	ldr	r2, [pc, #20]	; (8002984 <UART_RX_Handler+0x54>)
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	0018      	movs	r0, r3
 8002972:	f7fe f98b 	bl	8000c8c <AxisRotate>
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	46bd      	mov	sp, r7
 800297a:	b004      	add	sp, #16
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	200000f8 	.word	0x200000f8
 8002984:	000f4240 	.word	0x000f4240

08002988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800298a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800298c:	480d      	ldr	r0, [pc, #52]	; (80029c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800298e:	490e      	ldr	r1, [pc, #56]	; (80029c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002990:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <LoopForever+0xe>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002994:	e002      	b.n	800299c <LoopCopyDataInit>

08002996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299a:	3304      	adds	r3, #4

0800299c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800299c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a0:	d3f9      	bcc.n	8002996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029a4:	4c0b      	ldr	r4, [pc, #44]	; (80029d4 <LoopForever+0x16>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a8:	e001      	b.n	80029ae <LoopFillZerobss>

080029aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ac:	3204      	adds	r2, #4

080029ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b0:	d3fb      	bcc.n	80029aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80029b2:	f7ff f893 	bl	8001adc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80029b6:	f001 f821 	bl	80039fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ba:	f7fe fea5 	bl	8001708 <main>

080029be <LoopForever>:

LoopForever:
    b LoopForever
 80029be:	e7fe      	b.n	80029be <LoopForever>
  ldr   r0, =_estack
 80029c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80029cc:	08003b38 	.word	0x08003b38
  ldr r2, =_sbss
 80029d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80029d4:	20000100 	.word	0x20000100

080029d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC1_COMP_IRQHandler>
	...

080029dc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <LL_EXTI_EnableIT_0_31+0x1c>)
 80029e6:	6819      	ldr	r1, [r3, #0]
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <LL_EXTI_EnableIT_0_31+0x1c>)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40010400 	.word	0x40010400

080029fc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <LL_EXTI_DisableIT_0_31+0x20>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <LL_EXTI_DisableIT_0_31+0x20>)
 8002a0e:	400a      	ands	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b002      	add	sp, #8
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40010400 	.word	0x40010400

08002a20 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	605a      	str	r2, [r3, #4]

}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40010400 	.word	0x40010400

08002a40 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	43d9      	mvns	r1, r3
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002a52:	400a      	ands	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	40010400 	.word	0x40010400

08002a64 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]

}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40010400 	.word	0x40010400

08002a84 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	43d9      	mvns	r1, r3
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002a96:	400a      	ands	r2, r1
 8002a98:	609a      	str	r2, [r3, #8]

}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b002      	add	sp, #8
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	40010400 	.word	0x40010400

08002aa8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002ab2:	68d9      	ldr	r1, [r3, #12]
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	43d9      	mvns	r1, r3
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002ada:	400a      	ands	r2, r1
 8002adc:	60da      	str	r2, [r3, #12]
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b002      	add	sp, #8
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40010400 	.word	0x40010400

08002aec <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002af4:	230f      	movs	r3, #15
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	791b      	ldrb	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d100      	bne.n	8002b06 <LL_EXTI_Init+0x1a>
 8002b04:	e068      	b.n	8002bd8 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d100      	bne.n	8002b10 <LL_EXTI_Init+0x24>
 8002b0e:	e06e      	b.n	8002bee <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	795b      	ldrb	r3, [r3, #5]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d01b      	beq.n	8002b50 <LL_EXTI_Init+0x64>
 8002b18:	dc25      	bgt.n	8002b66 <LL_EXTI_Init+0x7a>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <LL_EXTI_Init+0x38>
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d00b      	beq.n	8002b3a <LL_EXTI_Init+0x4e>
 8002b22:	e020      	b.n	8002b66 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7ff ff89 	bl	8002a40 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0018      	movs	r0, r3
 8002b34:	f7ff ff52 	bl	80029dc <LL_EXTI_EnableIT_0_31>
          break;
 8002b38:	e01a      	b.n	8002b70 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f7ff ff5c 	bl	80029fc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7ff ff69 	bl	8002a20 <LL_EXTI_EnableEvent_0_31>
          break;
 8002b4e:	e00f      	b.n	8002b70 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7ff ff41 	bl	80029dc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7ff ff5e 	bl	8002a20 <LL_EXTI_EnableEvent_0_31>
          break;
 8002b64:	e004      	b.n	8002b70 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8002b66:	230f      	movs	r3, #15
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
          break;
 8002b6e:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	799b      	ldrb	r3, [r3, #6]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d03a      	beq.n	8002bee <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	799b      	ldrb	r3, [r3, #6]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d01b      	beq.n	8002bb8 <LL_EXTI_Init+0xcc>
 8002b80:	dc25      	bgt.n	8002bce <LL_EXTI_Init+0xe2>
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d002      	beq.n	8002b8c <LL_EXTI_Init+0xa0>
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d00b      	beq.n	8002ba2 <LL_EXTI_Init+0xb6>
 8002b8a:	e020      	b.n	8002bce <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff ff99 	bl	8002ac8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7ff ff62 	bl	8002a64 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002ba0:	e026      	b.n	8002bf0 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7ff ff6c 	bl	8002a84 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7ff ff79 	bl	8002aa8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002bb6:	e01b      	b.n	8002bf0 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7ff ff51 	bl	8002a64 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7ff ff6e 	bl	8002aa8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002bcc:	e010      	b.n	8002bf0 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8002bce:	230f      	movs	r3, #15
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
            break;
 8002bd6:	e00b      	b.n	8002bf0 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff ff0d 	bl	80029fc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff ff2a 	bl	8002a40 <LL_EXTI_DisableEvent_0_31>
 8002bec:	e000      	b.n	8002bf0 <LL_EXTI_Init+0x104>
      }
 8002bee:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8002bf0:	230f      	movs	r3, #15
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	781b      	ldrb	r3, [r3, #0]
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b004      	add	sp, #16
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <LL_GPIO_SetPinMode>:
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	435b      	muls	r3, r3
 8002c12:	001a      	movs	r2, r3
 8002c14:	0013      	movs	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	001a      	movs	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	435b      	muls	r3, r3
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	434b      	muls	r3, r1
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	601a      	str	r2, [r3, #0]
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b004      	add	sp, #16
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <LL_GPIO_SetPinOutputType>:
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	43d2      	mvns	r2, r2
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	434b      	muls	r3, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b004      	add	sp, #16
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <LL_GPIO_SetPinSpeed>:
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6899      	ldr	r1, [r3, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	435b      	muls	r3, r3
 8002c74:	001a      	movs	r2, r3
 8002c76:	0013      	movs	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	189b      	adds	r3, r3, r2
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	400b      	ands	r3, r1
 8002c80:	001a      	movs	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	435b      	muls	r3, r3
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	434b      	muls	r3, r1
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <LL_GPIO_SetPinPull>:
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68d9      	ldr	r1, [r3, #12]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	435b      	muls	r3, r3
 8002cac:	001a      	movs	r2, r3
 8002cae:	0013      	movs	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	001a      	movs	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	435b      	muls	r3, r3
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	434b      	muls	r3, r1
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	60da      	str	r2, [r3, #12]
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b004      	add	sp, #16
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <LL_GPIO_SetAFPin_0_7>:
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a19      	ldr	r1, [r3, #32]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	435b      	muls	r3, r3
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	4353      	muls	r3, r2
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	435a      	muls	r2, r3
 8002cec:	0013      	movs	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	400b      	ands	r3, r1
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	435b      	muls	r3, r3
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	434b      	muls	r3, r1
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	434b      	muls	r3, r1
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	434b      	muls	r3, r1
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b004      	add	sp, #16
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <LL_GPIO_SetAFPin_8_15>:
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	0a12      	lsrs	r2, r2, #8
 8002d2e:	4353      	muls	r3, r2
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	0a12      	lsrs	r2, r2, #8
 8002d34:	4353      	muls	r3, r2
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	0a12      	lsrs	r2, r2, #8
 8002d3a:	435a      	muls	r2, r3
 8002d3c:	0013      	movs	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	43db      	mvns	r3, r3
 8002d44:	400b      	ands	r3, r1
 8002d46:	001a      	movs	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	0a09      	lsrs	r1, r1, #8
 8002d50:	434b      	muls	r3, r1
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	0a09      	lsrs	r1, r1, #8
 8002d56:	434b      	muls	r3, r1
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	0a09      	lsrs	r1, r1, #8
 8002d5c:	434b      	muls	r3, r1
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	434b      	muls	r3, r1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b004      	add	sp, #16
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002d7e:	e048      	b.n	8002e12 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4091      	lsls	r1, r2
 8002d8a:	000a      	movs	r2, r1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03a      	beq.n	8002e0c <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d003      	beq.n	8002da6 <LL_GPIO_Init+0x36>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d10e      	bne.n	8002dc4 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	0018      	movs	r0, r3
 8002db0:	f7ff ff56 	bl	8002c60 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	6819      	ldr	r1, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7ff ff39 	bl	8002c36 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff ff63 	bl	8002c98 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d111      	bne.n	8002dfe <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2bff      	cmp	r3, #255	; 0xff
 8002dde:	d807      	bhi.n	8002df0 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7ff ff71 	bl	8002cd0 <LL_GPIO_SetAFPin_0_7>
 8002dee:	e006      	b.n	8002dfe <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff ff8c 	bl	8002d16 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	0018      	movs	r0, r3
 8002e08:	f7ff fef9 	bl	8002bfe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	40da      	lsrs	r2, r3
 8002e1a:	1e13      	subs	r3, r2, #0
 8002e1c:	d1b0      	bne.n	8002d80 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b004      	add	sp, #16
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <LL_RCC_HSI_IsReady>:
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <LL_RCC_HSI_IsReady+0x1c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2202      	movs	r2, #2
 8002e32:	4013      	ands	r3, r2
 8002e34:	3b02      	subs	r3, #2
 8002e36:	425a      	negs	r2, r3
 8002e38:	4153      	adcs	r3, r2
 8002e3a:	b2db      	uxtb	r3, r3
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	40021000 	.word	0x40021000

08002e48 <LL_RCC_LSE_IsReady>:
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <LL_RCC_LSE_IsReady+0x1c>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	3b02      	subs	r3, #2
 8002e56:	425a      	negs	r2, r3
 8002e58:	4153      	adcs	r3, r2
 8002e5a:	b2db      	uxtb	r3, r3
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	40021000 	.word	0x40021000

08002e68 <LL_RCC_GetSysClkSource>:
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <LL_RCC_GetSysClkSource+0x14>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	220c      	movs	r2, #12
 8002e72:	4013      	ands	r3, r2
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40021000 	.word	0x40021000

08002e80 <LL_RCC_GetAHBPrescaler>:
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <LL_RCC_GetAHBPrescaler+0x14>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	22f0      	movs	r2, #240	; 0xf0
 8002e8a:	4013      	ands	r3, r2
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	40021000 	.word	0x40021000

08002e98 <LL_RCC_GetAPB1Prescaler>:
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <LL_RCC_GetAPB1Prescaler+0x14>)
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	23e0      	movs	r3, #224	; 0xe0
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4013      	ands	r3, r2
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000

08002eb0 <LL_RCC_GetUSARTClockSource>:
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <LL_RCC_GetUSARTClockSource+0x24>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	2103      	movs	r1, #3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4091      	lsls	r1, r2
 8002ec2:	000a      	movs	r2, r1
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	4313      	orrs	r3, r2
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <LL_RCC_PLL_GetMainSource+0x14>)
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	025b      	lsls	r3, r3, #9
 8002ee4:	4013      	ands	r3, r2
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000

08002ef0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	23f0      	movs	r3, #240	; 0xf0
 8002efa:	039b      	lsls	r3, r3, #14
 8002efc:	4013      	ands	r3, r2
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000

08002f08 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <LL_RCC_PLL_GetPrediv+0x14>)
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	220f      	movs	r2, #15
 8002f12:	4013      	ands	r3, r2
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	40021000 	.word	0x40021000

08002f20 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002f28:	f000 f85c 	bl	8002fe4 <RCC_GetSystemClockFreq>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 f87a 	bl	8003030 <RCC_GetHCLKClockFreq>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f888 	bl	800305c <RCC_GetPCLK1ClockFreq>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d12d      	bne.n	8002fca <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff ff9d 	bl	8002eb0 <LL_RCC_GetUSARTClockSource>
 8002f76:	0003      	movs	r3, r0
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d00a      	beq.n	8002f92 <LL_RCC_GetUSARTClockFreq+0x36>
 8002f7c:	d818      	bhi.n	8002fb0 <LL_RCC_GetUSARTClockFreq+0x54>
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d002      	beq.n	8002f88 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d00c      	beq.n	8002fa0 <LL_RCC_GetUSARTClockFreq+0x44>
 8002f86:	e013      	b.n	8002fb0 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002f88:	f000 f82c 	bl	8002fe4 <RCC_GetSystemClockFreq>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	60fb      	str	r3, [r7, #12]
        break;
 8002f90:	e020      	b.n	8002fd4 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002f92:	f7ff ff49 	bl	8002e28 <LL_RCC_HSI_IsReady>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d019      	beq.n	8002fce <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <LL_RCC_GetUSARTClockFreq+0x84>)
 8002f9c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002f9e:	e016      	b.n	8002fce <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002fa0:	f7ff ff52 	bl	8002e48 <LL_RCC_LSE_IsReady>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d014      	beq.n	8002fd2 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002fae:	e010      	b.n	8002fd2 <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002fb0:	f000 f818 	bl	8002fe4 <RCC_GetSystemClockFreq>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 f83a 	bl	8003030 <RCC_GetHCLKClockFreq>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 f84c 	bl	800305c <RCC_GetPCLK1ClockFreq>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	60fb      	str	r3, [r7, #12]
        break;
 8002fc8:	e004      	b.n	8002fd4 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	e002      	b.n	8002fd4 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	e000      	b.n	8002fd4 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002fd2:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b004      	add	sp, #16
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	007a1200 	.word	0x007a1200

08002fe4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002fee:	f7ff ff3b 	bl	8002e68 <LL_RCC_GetSysClkSource>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d00b      	beq.n	8003010 <RCC_GetSystemClockFreq+0x2c>
 8002ff8:	d80f      	bhi.n	800301a <RCC_GetSystemClockFreq+0x36>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <RCC_GetSystemClockFreq+0x20>
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d003      	beq.n	800300a <RCC_GetSystemClockFreq+0x26>
 8003002:	e00a      	b.n	800301a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <RCC_GetSystemClockFreq+0x48>)
 8003006:	607b      	str	r3, [r7, #4]
      break;
 8003008:	e00a      	b.n	8003020 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <RCC_GetSystemClockFreq+0x48>)
 800300c:	607b      	str	r3, [r7, #4]
      break;
 800300e:	e007      	b.n	8003020 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003010:	f000 f838 	bl	8003084 <RCC_PLL_GetFreqDomain_SYS>
 8003014:	0003      	movs	r3, r0
 8003016:	607b      	str	r3, [r7, #4]
      break;
 8003018:	e002      	b.n	8003020 <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <RCC_GetSystemClockFreq+0x48>)
 800301c:	607b      	str	r3, [r7, #4]
      break;
 800301e:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8003020:	687b      	ldr	r3, [r7, #4]
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b002      	add	sp, #8
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	007a1200 	.word	0x007a1200

08003030 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003038:	f7ff ff22 	bl	8002e80 <LL_RCC_GetAHBPrescaler>
 800303c:	0003      	movs	r3, r0
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	220f      	movs	r2, #15
 8003042:	4013      	ands	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <RCC_GetHCLKClockFreq+0x28>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	001a      	movs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	40d3      	lsrs	r3, r2
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b002      	add	sp, #8
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	08003b00 	.word	0x08003b00

0800305c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003064:	f7ff ff18 	bl	8002e98 <LL_RCC_GetAPB1Prescaler>
 8003068:	0003      	movs	r3, r0
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <RCC_GetPCLK1ClockFreq+0x24>)
 800306e:	5cd3      	ldrb	r3, [r2, r3]
 8003070:	001a      	movs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	40d3      	lsrs	r3, r2
}
 8003076:	0018      	movs	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	08003b10 	.word	0x08003b10

08003084 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	2300      	movs	r3, #0
 8003090:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003092:	f7ff ff21 	bl	8002ed8 <LL_RCC_PLL_GetMainSource>
 8003096:	0003      	movs	r3, r0
 8003098:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <RCC_PLL_GetFreqDomain_SYS+0x28>
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	025b      	lsls	r3, r3, #9
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d003      	beq.n	80030b2 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80030aa:	e005      	b.n	80030b8 <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80030ae:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80030b0:	e005      	b.n	80030be <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80030b4:	607b      	str	r3, [r7, #4]
      break;
 80030b6:	e002      	b.n	80030be <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80030ba:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80030bc:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80030be:	f7ff ff23 	bl	8002f08 <LL_RCC_PLL_GetPrediv>
 80030c2:	0003      	movs	r3, r0
 80030c4:	3301      	adds	r3, #1
 80030c6:	0019      	movs	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fd f81d 	bl	8000108 <__udivsi3>
 80030ce:	0003      	movs	r3, r0
 80030d0:	001c      	movs	r4, r3
 80030d2:	f7ff ff0d 	bl	8002ef0 <LL_RCC_PLL_GetMultiplicator>
 80030d6:	0003      	movs	r3, r0
 80030d8:	0c9b      	lsrs	r3, r3, #18
 80030da:	220f      	movs	r2, #15
 80030dc:	4013      	ands	r3, r2
 80030de:	3302      	adds	r3, #2
 80030e0:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b003      	add	sp, #12
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	003d0900 	.word	0x003d0900
 80030f0:	007a1200 	.word	0x007a1200

080030f4 <LL_TIM_SetPrescaler>:
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}

0800310c <LL_TIM_SetAutoReload>:
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <LL_TIM_SetRepetitionCounter>:
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}

0800313c <LL_TIM_OC_SetCompareCH1>:
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}

08003154 <LL_TIM_OC_SetCompareCH2>:
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b002      	add	sp, #8
 800316a:	bd80      	pop	{r7, pc}

0800316c <LL_TIM_OC_SetCompareCH3>:
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}

08003184 <LL_TIM_OC_SetCompareCH4>:
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}

0800319c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	2201      	movs	r2, #1
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	615a      	str	r2, [r3, #20]
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a35      	ldr	r2, [pc, #212]	; (80032a0 <LL_TIM_Init+0xe8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d008      	beq.n	80031e2 <LL_TIM_Init+0x2a>
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	05db      	lsls	r3, r3, #23
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d003      	beq.n	80031e2 <LL_TIM_Init+0x2a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <LL_TIM_Init+0xec>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d107      	bne.n	80031f2 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2270      	movs	r2, #112	; 0x70
 80031e6:	4393      	bics	r3, r2
 80031e8:	001a      	movs	r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2a      	ldr	r2, [pc, #168]	; (80032a0 <LL_TIM_Init+0xe8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <LL_TIM_Init+0x74>
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	05db      	lsls	r3, r3, #23
 8003200:	429a      	cmp	r2, r3
 8003202:	d013      	beq.n	800322c <LL_TIM_Init+0x74>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <LL_TIM_Init+0xec>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00f      	beq.n	800322c <LL_TIM_Init+0x74>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <LL_TIM_Init+0xf0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00b      	beq.n	800322c <LL_TIM_Init+0x74>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a25      	ldr	r2, [pc, #148]	; (80032ac <LL_TIM_Init+0xf4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <LL_TIM_Init+0x74>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <LL_TIM_Init+0xf8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <LL_TIM_Init+0x74>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <LL_TIM_Init+0xfc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d106      	bne.n	800323a <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <LL_TIM_Init+0x100>)
 8003230:	401a      	ands	r2, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	0011      	movs	r1, r2
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff ff5f 	bl	800310c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	001a      	movs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	0011      	movs	r1, r2
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff ff4b 	bl	80030f4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <LL_TIM_Init+0xe8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00b      	beq.n	800327e <LL_TIM_Init+0xc6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a10      	ldr	r2, [pc, #64]	; (80032ac <LL_TIM_Init+0xf4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <LL_TIM_Init+0xc6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <LL_TIM_Init+0xf8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d003      	beq.n	800327e <LL_TIM_Init+0xc6>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a0e      	ldr	r2, [pc, #56]	; (80032b4 <LL_TIM_Init+0xfc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d106      	bne.n	800328c <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f7ff ff4c 	bl	8003124 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff ff84 	bl	800319c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003294:	2300      	movs	r3, #0
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b004      	add	sp, #16
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40002000 	.word	0x40002000
 80032ac:	40014000 	.word	0x40014000
 80032b0:	40014400 	.word	0x40014400
 80032b4:	40014800 	.word	0x40014800
 80032b8:	fffffcff 	.word	0xfffffcff

080032bc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80032c8:	2317      	movs	r3, #23
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	015b      	lsls	r3, r3, #5
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d036      	beq.n	8003348 <LL_TIM_OC_Init+0x8c>
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	015b      	lsls	r3, r3, #5
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d83c      	bhi.n	800335e <LL_TIM_OC_Init+0xa2>
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d021      	beq.n	8003332 <LL_TIM_OC_Init+0x76>
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d832      	bhi.n	800335e <LL_TIM_OC_Init+0xa2>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d003      	beq.n	8003306 <LL_TIM_OC_Init+0x4a>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b10      	cmp	r3, #16
 8003302:	d00b      	beq.n	800331c <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003304:	e02b      	b.n	800335e <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003306:	2317      	movs	r3, #23
 8003308:	18fc      	adds	r4, r7, r3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	0011      	movs	r1, r2
 8003310:	0018      	movs	r0, r3
 8003312:	f000 f82d 	bl	8003370 <OC1Config>
 8003316:	0003      	movs	r3, r0
 8003318:	7023      	strb	r3, [r4, #0]
      break;
 800331a:	e021      	b.n	8003360 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800331c:	2317      	movs	r3, #23
 800331e:	18fc      	adds	r4, r7, r3
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	0011      	movs	r1, r2
 8003326:	0018      	movs	r0, r3
 8003328:	f000 f8a6 	bl	8003478 <OC2Config>
 800332c:	0003      	movs	r3, r0
 800332e:	7023      	strb	r3, [r4, #0]
      break;
 8003330:	e016      	b.n	8003360 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003332:	2317      	movs	r3, #23
 8003334:	18fc      	adds	r4, r7, r3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f000 f925 	bl	800358c <OC3Config>
 8003342:	0003      	movs	r3, r0
 8003344:	7023      	strb	r3, [r4, #0]
      break;
 8003346:	e00b      	b.n	8003360 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003348:	2317      	movs	r3, #23
 800334a:	18fc      	adds	r4, r7, r3
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	0011      	movs	r1, r2
 8003352:	0018      	movs	r0, r3
 8003354:	f000 f9a4 	bl	80036a0 <OC4Config>
 8003358:	0003      	movs	r3, r0
 800335a:	7023      	strb	r3, [r4, #0]
      break;
 800335c:	e000      	b.n	8003360 <LL_TIM_OC_Init+0xa4>
      break;
 800335e:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8003360:	2317      	movs	r3, #23
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
}
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b007      	add	sp, #28
 800336c:	bd90      	pop	{r4, r7, pc}
	...

08003370 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	2201      	movs	r2, #1
 8003380:	4393      	bics	r3, r2
 8003382:	001a      	movs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2203      	movs	r2, #3
 800339e:	4393      	bics	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2270      	movs	r2, #112	; 0x70
 80033a6:	4393      	bics	r3, r2
 80033a8:	001a      	movs	r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2202      	movs	r2, #2
 80033b6:	4393      	bics	r3, r2
 80033b8:	001a      	movs	r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2201      	movs	r2, #1
 80033c6:	4393      	bics	r3, r2
 80033c8:	001a      	movs	r2, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a22      	ldr	r2, [pc, #136]	; (8003460 <OC1Config+0xf0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <OC1Config+0x82>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a21      	ldr	r2, [pc, #132]	; (8003464 <OC1Config+0xf4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <OC1Config+0x82>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a20      	ldr	r2, [pc, #128]	; (8003468 <OC1Config+0xf8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d003      	beq.n	80033f2 <OC1Config+0x82>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1f      	ldr	r2, [pc, #124]	; (800346c <OC1Config+0xfc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d120      	bne.n	8003434 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2208      	movs	r2, #8
 80033f6:	4393      	bics	r3, r2
 80033f8:	001a      	movs	r2, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2204      	movs	r2, #4
 8003408:	4393      	bics	r3, r2
 800340a:	001a      	movs	r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4a15      	ldr	r2, [pc, #84]	; (8003470 <OC1Config+0x100>)
 800341a:	401a      	ands	r2, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4a13      	ldr	r2, [pc, #76]	; (8003474 <OC1Config+0x104>)
 8003428:	401a      	ands	r2, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	0011      	movs	r1, r2
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff fe77 	bl	800313c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003454:	2300      	movs	r3, #0
}
 8003456:	0018      	movs	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	b006      	add	sp, #24
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800
 8003470:	fffffeff 	.word	0xfffffeff
 8003474:	fffffdff 	.word	0xfffffdff

08003478 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	2210      	movs	r2, #16
 8003488:	4393      	bics	r3, r2
 800348a:	001a      	movs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a31      	ldr	r2, [pc, #196]	; (800356c <OC2Config+0xf4>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a30      	ldr	r2, [pc, #192]	; (8003570 <OC2Config+0xf8>)
 80034ae:	401a      	ands	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2220      	movs	r2, #32
 80034be:	4393      	bics	r3, r2
 80034c0:	001a      	movs	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2210      	movs	r2, #16
 80034d0:	4393      	bics	r3, r2
 80034d2:	001a      	movs	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a24      	ldr	r2, [pc, #144]	; (8003574 <OC2Config+0xfc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00b      	beq.n	80034fe <OC2Config+0x86>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a23      	ldr	r2, [pc, #140]	; (8003578 <OC2Config+0x100>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <OC2Config+0x86>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a22      	ldr	r2, [pc, #136]	; (800357c <OC2Config+0x104>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <OC2Config+0x86>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a21      	ldr	r2, [pc, #132]	; (8003580 <OC2Config+0x108>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d121      	bne.n	8003542 <OC2Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	4393      	bics	r3, r2
 8003504:	001a      	movs	r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	019b      	lsls	r3, r3, #6
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2240      	movs	r2, #64	; 0x40
 8003514:	4393      	bics	r3, r2
 8003516:	001a      	movs	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	019b      	lsls	r3, r3, #6
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4a17      	ldr	r2, [pc, #92]	; (8003584 <OC2Config+0x10c>)
 8003526:	401a      	ands	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <OC2Config+0x110>)
 8003536:	401a      	ands	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	0011      	movs	r1, r2
 8003556:	0018      	movs	r0, r3
 8003558:	f7ff fdfc 	bl	8003154 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003562:	2300      	movs	r3, #0
}
 8003564:	0018      	movs	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	b006      	add	sp, #24
 800356a:	bd80      	pop	{r7, pc}
 800356c:	fffffcff 	.word	0xfffffcff
 8003570:	ffff8fff 	.word	0xffff8fff
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40014000 	.word	0x40014000
 800357c:	40014400 	.word	0x40014400
 8003580:	40014800 	.word	0x40014800
 8003584:	fffffbff 	.word	0xfffffbff
 8003588:	fffff7ff 	.word	0xfffff7ff

0800358c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a37      	ldr	r2, [pc, #220]	; (8003678 <OC3Config+0xec>)
 800359c:	401a      	ands	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2203      	movs	r2, #3
 80035b8:	4393      	bics	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2270      	movs	r2, #112	; 0x70
 80035c0:	4393      	bics	r3, r2
 80035c2:	001a      	movs	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	4a2b      	ldr	r2, [pc, #172]	; (800367c <OC3Config+0xf0>)
 80035d0:	401a      	ands	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	4a26      	ldr	r2, [pc, #152]	; (8003678 <OC3Config+0xec>)
 80035e0:	401a      	ands	r2, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a24      	ldr	r2, [pc, #144]	; (8003680 <OC3Config+0xf4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00b      	beq.n	800360c <OC3Config+0x80>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a23      	ldr	r2, [pc, #140]	; (8003684 <OC3Config+0xf8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <OC3Config+0x80>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a22      	ldr	r2, [pc, #136]	; (8003688 <OC3Config+0xfc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <OC3Config+0x80>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a21      	ldr	r2, [pc, #132]	; (800368c <OC3Config+0x100>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d11f      	bne.n	800364c <OC3Config+0xc0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	4a20      	ldr	r2, [pc, #128]	; (8003690 <OC3Config+0x104>)
 8003610:	401a      	ands	r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	029b      	lsls	r3, r3, #10
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <OC3Config+0x108>)
 8003620:	401a      	ands	r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	029b      	lsls	r3, r3, #10
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <OC3Config+0x10c>)
 8003630:	401a      	ands	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4a17      	ldr	r2, [pc, #92]	; (800369c <OC3Config+0x110>)
 8003640:	401a      	ands	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	015b      	lsls	r3, r3, #5
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	0011      	movs	r1, r2
 8003660:	0018      	movs	r0, r3
 8003662:	f7ff fd83 	bl	800316c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800366c:	2300      	movs	r3, #0
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b006      	add	sp, #24
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	fffffeff 	.word	0xfffffeff
 800367c:	fffffdff 	.word	0xfffffdff
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40014000 	.word	0x40014000
 8003688:	40014400 	.word	0x40014400
 800368c:	40014800 	.word	0x40014800
 8003690:	fffff7ff 	.word	0xfffff7ff
 8003694:	fffffbff 	.word	0xfffffbff
 8003698:	ffffefff 	.word	0xffffefff
 800369c:	ffffdfff 	.word	0xffffdfff

080036a0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4a2b      	ldr	r2, [pc, #172]	; (800375c <OC4Config+0xbc>)
 80036b0:	401a      	ands	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a25      	ldr	r2, [pc, #148]	; (8003760 <OC4Config+0xc0>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a24      	ldr	r2, [pc, #144]	; (8003764 <OC4Config+0xc4>)
 80036d4:	401a      	ands	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4a21      	ldr	r2, [pc, #132]	; (8003768 <OC4Config+0xc8>)
 80036e4:	401a      	ands	r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	031b      	lsls	r3, r3, #12
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4a1a      	ldr	r2, [pc, #104]	; (800375c <OC4Config+0xbc>)
 80036f4:	401a      	ands	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	031b      	lsls	r3, r3, #12
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a1a      	ldr	r2, [pc, #104]	; (800376c <OC4Config+0xcc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00b      	beq.n	8003720 <OC4Config+0x80>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a19      	ldr	r2, [pc, #100]	; (8003770 <OC4Config+0xd0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <OC4Config+0x80>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <OC4Config+0xd4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <OC4Config+0x80>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <OC4Config+0xd8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d107      	bne.n	8003730 <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	4a16      	ldr	r2, [pc, #88]	; (800377c <OC4Config+0xdc>)
 8003724:	401a      	ands	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	019b      	lsls	r3, r3, #6
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	0011      	movs	r1, r2
 8003744:	0018      	movs	r0, r3
 8003746:	f7ff fd1d 	bl	8003184 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003750:	2300      	movs	r3, #0
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b006      	add	sp, #24
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	ffffefff 	.word	0xffffefff
 8003760:	fffffcff 	.word	0xfffffcff
 8003764:	ffff8fff 	.word	0xffff8fff
 8003768:	ffffdfff 	.word	0xffffdfff
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40014000 	.word	0x40014000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800
 800377c:	ffffbfff 	.word	0xffffbfff

08003780 <LL_USART_IsEnabled>:
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2201      	movs	r2, #1
 800378e:	4013      	ands	r3, r2
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <LL_USART_IsEnabled+0x18>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <LL_USART_IsEnabled+0x1a>
 8003798:	2300      	movs	r3, #0
}
 800379a:	0018      	movs	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	b002      	add	sp, #8
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <LL_USART_SetStopBitsLength>:
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <LL_USART_SetStopBitsLength+0x24>)
 80037b4:	401a      	ands	r2, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	605a      	str	r2, [r3, #4]
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	ffffcfff 	.word	0xffffcfff

080037cc <LL_USART_SetHWFlowCtrl>:
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <LL_USART_SetHWFlowCtrl+0x24>)
 80037dc:	401a      	ands	r2, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	609a      	str	r2, [r3, #8]
}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b002      	add	sp, #8
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	fffffcff 	.word	0xfffffcff

080037f4 <LL_USART_SetBaudRate>:
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	429a      	cmp	r2, r3
 800380a:	d11c      	bne.n	8003846 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	005a      	lsls	r2, r3, #1
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	18d3      	adds	r3, r2, r3
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	0018      	movs	r0, r3
 800381a:	f7fc fc75 	bl	8000108 <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	b29b      	uxth	r3, r3
 8003822:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	4a10      	ldr	r2, [pc, #64]	; (8003868 <LL_USART_SetBaudRate+0x74>)
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	b29b      	uxth	r3, r3
 8003832:	001a      	movs	r2, r3
 8003834:	2307      	movs	r3, #7
 8003836:	4013      	ands	r3, r2
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	60da      	str	r2, [r3, #12]
}
 8003844:	e00c      	b.n	8003860 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	085a      	lsrs	r2, r3, #1
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	18d3      	adds	r3, r2, r3
 800384e:	6839      	ldr	r1, [r7, #0]
 8003850:	0018      	movs	r0, r3
 8003852:	f7fc fc59 	bl	8000108 <__udivsi3>
 8003856:	0003      	movs	r3, r0
 8003858:	b29b      	uxth	r3, r3
 800385a:	001a      	movs	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	60da      	str	r2, [r3, #12]
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b006      	add	sp, #24
 8003866:	bd80      	pop	{r7, pc}
 8003868:	0000fff0 	.word	0x0000fff0

0800386c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b089      	sub	sp, #36	; 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003876:	231f      	movs	r3, #31
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0018      	movs	r0, r3
 8003886:	f7ff ff7b 	bl	8003780 <LL_USART_IsEnabled>
 800388a:	1e03      	subs	r3, r0, #0
 800388c:	d148      	bne.n	8003920 <LL_USART_Init+0xb4>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a27      	ldr	r2, [pc, #156]	; (8003930 <LL_USART_Init+0xc4>)
 8003894:	401a      	ands	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	4319      	orrs	r1, r3
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	4319      	orrs	r1, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	430b      	orrs	r3, r1
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	0011      	movs	r1, r2
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7ff ff72 	bl	80037a4 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	0011      	movs	r1, r2
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7ff ff7f 	bl	80037cc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a18      	ldr	r2, [pc, #96]	; (8003934 <LL_USART_Init+0xc8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d105      	bne.n	80038e2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80038d6:	2000      	movs	r0, #0
 80038d8:	f7ff fb40 	bl	8002f5c <LL_RCC_GetUSARTClockFreq>
 80038dc:	0003      	movs	r3, r0
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	e00b      	b.n	80038fa <LL_USART_Init+0x8e>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a14      	ldr	r2, [pc, #80]	; (8003938 <LL_USART_Init+0xcc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d107      	bne.n	80038fa <LL_USART_Init+0x8e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80038ea:	240c      	movs	r4, #12
 80038ec:	193b      	adds	r3, r7, r4
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7ff fb16 	bl	8002f20 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80038f4:	193b      	adds	r3, r7, r4
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00f      	beq.n	8003920 <LL_USART_Init+0xb4>
        && (USART_InitStruct->BaudRate != 0U))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00b      	beq.n	8003920 <LL_USART_Init+0xb4>
    {
      status = SUCCESS;
 8003908:	231f      	movs	r3, #31
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	699a      	ldr	r2, [r3, #24]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69b9      	ldr	r1, [r7, #24]
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff6a 	bl	80037f4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003920:	231f      	movs	r3, #31
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	781b      	ldrb	r3, [r3, #0]
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b009      	add	sp, #36	; 0x24
 800392c:	bd90      	pop	{r4, r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	ffff69f3 	.word	0xffff69f3
 8003934:	40013800 	.word	0x40013800
 8003938:	40004400 	.word	0x40004400

0800393c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003946:	6839      	ldr	r1, [r7, #0]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7fc fbdd 	bl	8000108 <__udivsi3>
 800394e:	0003      	movs	r3, r0
 8003950:	001a      	movs	r2, r3
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <LL_InitTick+0x30>)
 8003954:	3a01      	subs	r2, #1
 8003956:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <LL_InitTick+0x30>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395e:	4b03      	ldr	r3, [pc, #12]	; (800396c <LL_InitTick+0x30>)
 8003960:	2205      	movs	r2, #5
 8003962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}
 800396c:	e000e010 	.word	0xe000e010

08003970 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003978:	23fa      	movs	r3, #250	; 0xfa
 800397a:	009a      	lsls	r2, r3, #2
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	0011      	movs	r1, r2
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff ffdb 	bl	800393c <LL_InitTick>
}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003998:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <LL_mDelay+0x40>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800399e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3301      	adds	r3, #1
 80039a4:	d00c      	beq.n	80039c0 <LL_mDelay+0x30>
  {
    Delay++;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3301      	adds	r3, #1
 80039aa:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80039ac:	e008      	b.n	80039c0 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <LL_mDelay+0x40>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	025b      	lsls	r3, r3, #9
 80039b6:	4013      	ands	r3, r2
 80039b8:	d002      	beq.n	80039c0 <LL_mDelay+0x30>
    {
      Delay--;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3b01      	subs	r3, #1
 80039be:	607b      	str	r3, [r7, #4]
  while (Delay)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f3      	bne.n	80039ae <LL_mDelay+0x1e>
    }
  }
}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b004      	add	sp, #16
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	e000e010 	.word	0xe000e010

080039d4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <LL_SetSystemCoreClock+0x18>)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b002      	add	sp, #8
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	20000000 	.word	0x20000000

080039f0 <__errno>:
 80039f0:	4b01      	ldr	r3, [pc, #4]	; (80039f8 <__errno+0x8>)
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	4770      	bx	lr
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	2000000c 	.word	0x2000000c

080039fc <__libc_init_array>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	2600      	movs	r6, #0
 8003a00:	4d0c      	ldr	r5, [pc, #48]	; (8003a34 <__libc_init_array+0x38>)
 8003a02:	4c0d      	ldr	r4, [pc, #52]	; (8003a38 <__libc_init_array+0x3c>)
 8003a04:	1b64      	subs	r4, r4, r5
 8003a06:	10a4      	asrs	r4, r4, #2
 8003a08:	42a6      	cmp	r6, r4
 8003a0a:	d109      	bne.n	8003a20 <__libc_init_array+0x24>
 8003a0c:	2600      	movs	r6, #0
 8003a0e:	f000 f82b 	bl	8003a68 <_init>
 8003a12:	4d0a      	ldr	r5, [pc, #40]	; (8003a3c <__libc_init_array+0x40>)
 8003a14:	4c0a      	ldr	r4, [pc, #40]	; (8003a40 <__libc_init_array+0x44>)
 8003a16:	1b64      	subs	r4, r4, r5
 8003a18:	10a4      	asrs	r4, r4, #2
 8003a1a:	42a6      	cmp	r6, r4
 8003a1c:	d105      	bne.n	8003a2a <__libc_init_array+0x2e>
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	00b3      	lsls	r3, r6, #2
 8003a22:	58eb      	ldr	r3, [r5, r3]
 8003a24:	4798      	blx	r3
 8003a26:	3601      	adds	r6, #1
 8003a28:	e7ee      	b.n	8003a08 <__libc_init_array+0xc>
 8003a2a:	00b3      	lsls	r3, r6, #2
 8003a2c:	58eb      	ldr	r3, [r5, r3]
 8003a2e:	4798      	blx	r3
 8003a30:	3601      	adds	r6, #1
 8003a32:	e7f2      	b.n	8003a1a <__libc_init_array+0x1e>
 8003a34:	08003b30 	.word	0x08003b30
 8003a38:	08003b30 	.word	0x08003b30
 8003a3c:	08003b30 	.word	0x08003b30
 8003a40:	08003b34 	.word	0x08003b34

08003a44 <memcpy>:
 8003a44:	2300      	movs	r3, #0
 8003a46:	b510      	push	{r4, lr}
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d100      	bne.n	8003a4e <memcpy+0xa>
 8003a4c:	bd10      	pop	{r4, pc}
 8003a4e:	5ccc      	ldrb	r4, [r1, r3]
 8003a50:	54c4      	strb	r4, [r0, r3]
 8003a52:	3301      	adds	r3, #1
 8003a54:	e7f8      	b.n	8003a48 <memcpy+0x4>

08003a56 <memset>:
 8003a56:	0003      	movs	r3, r0
 8003a58:	1882      	adds	r2, r0, r2
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d100      	bne.n	8003a60 <memset+0xa>
 8003a5e:	4770      	bx	lr
 8003a60:	7019      	strb	r1, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	e7f9      	b.n	8003a5a <memset+0x4>
	...

08003a68 <_init>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6e:	bc08      	pop	{r3}
 8003a70:	469e      	mov	lr, r3
 8003a72:	4770      	bx	lr

08003a74 <_fini>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr
