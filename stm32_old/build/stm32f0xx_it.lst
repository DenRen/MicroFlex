ARM GAS  /tmp/ccjoSfar.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	NMI_Handler
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB529:
  26              		.file 1 "Core/Src/stm32f0xx_it.c"
   1:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f0xx_it.c **** /**
   3:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f0xx_it.c ****   * @file    stm32f0xx_it.c
   5:Core/Src/stm32f0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f0xx_it.c ****   * @attention
   8:Core/Src/stm32f0xx_it.c ****   *
   9:Core/Src/stm32f0xx_it.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/stm32f0xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f0xx_it.c ****   *
  12:Core/Src/stm32f0xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32f0xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32f0xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32f0xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32f0xx_it.c ****   *
  17:Core/Src/stm32f0xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f0xx_it.c ****   */
  19:Core/Src/stm32f0xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f0xx_it.c **** 
  21:Core/Src/stm32f0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f0xx_it.c **** #include "main.h"
  23:Core/Src/stm32f0xx_it.c **** #include "stm32f0xx_it.h"
  24:Core/Src/stm32f0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32f0xx_it.c **** 
  27:Core/Src/stm32f0xx_it.c **** #include "StepMotorLib.h"
  28:Core/Src/stm32f0xx_it.c **** #include  "StepMotorParams.h"
  29:Core/Src/stm32f0xx_it.c **** 
  30:Core/Src/stm32f0xx_it.c **** /* USER CODE END Includes */
  31:Core/Src/stm32f0xx_it.c **** 
  32:Core/Src/stm32f0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccjoSfar.s 			page 2


  33:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN TD */
  34:Core/Src/stm32f0xx_it.c **** 
  35:Core/Src/stm32f0xx_it.c **** /* USER CODE END TD */
  36:Core/Src/stm32f0xx_it.c **** 
  37:Core/Src/stm32f0xx_it.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PD */
  39:Core/Src/stm32f0xx_it.c **** 
  40:Core/Src/stm32f0xx_it.c **** /* USER CODE END PD */
  41:Core/Src/stm32f0xx_it.c **** 
  42:Core/Src/stm32f0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PM */
  44:Core/Src/stm32f0xx_it.c **** 
  45:Core/Src/stm32f0xx_it.c **** /* USER CODE END PM */
  46:Core/Src/stm32f0xx_it.c **** 
  47:Core/Src/stm32f0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PV */
  49:Core/Src/stm32f0xx_it.c **** 
  50:Core/Src/stm32f0xx_it.c **** /* USER CODE END PV */
  51:Core/Src/stm32f0xx_it.c **** 
  52:Core/Src/stm32f0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN PFP */
  54:Core/Src/stm32f0xx_it.c **** 
  55:Core/Src/stm32f0xx_it.c **** /* USER CODE END PFP */
  56:Core/Src/stm32f0xx_it.c **** 
  57:Core/Src/stm32f0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  58:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN 0 */
  59:Core/Src/stm32f0xx_it.c **** 
  60:Core/Src/stm32f0xx_it.c **** /* USER CODE END 0 */
  61:Core/Src/stm32f0xx_it.c **** 
  62:Core/Src/stm32f0xx_it.c **** /* External variables --------------------------------------------------------*/
  63:Core/Src/stm32f0xx_it.c **** 
  64:Core/Src/stm32f0xx_it.c **** /* USER CODE BEGIN EV */
  65:Core/Src/stm32f0xx_it.c **** 
  66:Core/Src/stm32f0xx_it.c **** /* USER CODE END EV */
  67:Core/Src/stm32f0xx_it.c **** 
  68:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
  69:Core/Src/stm32f0xx_it.c **** /*           Cortex-M0 Processor Interruption and Exception Handlers          */
  70:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
  71:Core/Src/stm32f0xx_it.c **** /**
  72:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  73:Core/Src/stm32f0xx_it.c ****   */
  74:Core/Src/stm32f0xx_it.c **** void NMI_Handler(void)
  75:Core/Src/stm32f0xx_it.c **** {
  27              		.loc 1 75 0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  34 0000 FEE7     		b	.L2
  35              		.cfi_endproc
  36              	.LFE529:
  38 0002 C046     		.section	.text.HardFault_Handler,"ax",%progbits
  39              		.align	1
  40              		.p2align 2,,3
  41              		.global	HardFault_Handler
ARM GAS  /tmp/ccjoSfar.s 			page 3


  42              		.syntax unified
  43              		.code	16
  44              		.thumb_func
  45              		.fpu softvfp
  47              	HardFault_Handler:
  48              	.LFB530:
  76:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  77:Core/Src/stm32f0xx_it.c **** 
  78:Core/Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  79:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  80:Core/Src/stm32f0xx_it.c ****   while (1)
  81:Core/Src/stm32f0xx_it.c ****   {
  82:Core/Src/stm32f0xx_it.c ****   }
  83:Core/Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  84:Core/Src/stm32f0xx_it.c **** }
  85:Core/Src/stm32f0xx_it.c **** 
  86:Core/Src/stm32f0xx_it.c **** /**
  87:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  88:Core/Src/stm32f0xx_it.c ****   */
  89:Core/Src/stm32f0xx_it.c **** void HardFault_Handler(void)
  90:Core/Src/stm32f0xx_it.c **** {
  49              		.loc 1 90 0
  50              		.cfi_startproc
  51              		@ Volatile: function does not return.
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55              	.L4:
  56 0000 FEE7     		b	.L4
  57              		.cfi_endproc
  58              	.LFE530:
  60 0002 C046     		.section	.text.SVC_Handler,"ax",%progbits
  61              		.align	1
  62              		.p2align 2,,3
  63              		.global	SVC_Handler
  64              		.syntax unified
  65              		.code	16
  66              		.thumb_func
  67              		.fpu softvfp
  69              	SVC_Handler:
  70              	.LFB538:
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75              		@ sp needed
  76 0000 7047     		bx	lr
  77              		.cfi_endproc
  78              	.LFE538:
  80 0002 C046     		.section	.text.PendSV_Handler,"ax",%progbits
  81              		.align	1
  82              		.p2align 2,,3
  83              		.global	PendSV_Handler
  84              		.syntax unified
  85              		.code	16
  86              		.thumb_func
  87              		.fpu softvfp
ARM GAS  /tmp/ccjoSfar.s 			page 4


  89              	PendSV_Handler:
  90              	.LFB536:
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95              		@ sp needed
  96 0000 7047     		bx	lr
  97              		.cfi_endproc
  98              	.LFE536:
 100 0002 C046     		.section	.text.SysTick_Handler,"ax",%progbits
 101              		.align	1
 102              		.p2align 2,,3
 103              		.global	SysTick_Handler
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 107              		.fpu softvfp
 109              	SysTick_Handler:
 110              	.LFB533:
  91:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  92:Core/Src/stm32f0xx_it.c **** 
  93:Core/Src/stm32f0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  94:Core/Src/stm32f0xx_it.c ****   while (1)
  95:Core/Src/stm32f0xx_it.c ****   {
  96:Core/Src/stm32f0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  97:Core/Src/stm32f0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  98:Core/Src/stm32f0xx_it.c ****   }
  99:Core/Src/stm32f0xx_it.c **** }
 100:Core/Src/stm32f0xx_it.c **** 
 101:Core/Src/stm32f0xx_it.c **** /**
 102:Core/Src/stm32f0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 103:Core/Src/stm32f0xx_it.c ****   */
 104:Core/Src/stm32f0xx_it.c **** void SVC_Handler(void)
 105:Core/Src/stm32f0xx_it.c **** {
 106:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 107:Core/Src/stm32f0xx_it.c **** 
 108:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 109:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 110:Core/Src/stm32f0xx_it.c **** 
 111:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 112:Core/Src/stm32f0xx_it.c **** }
 113:Core/Src/stm32f0xx_it.c **** 
 114:Core/Src/stm32f0xx_it.c **** /**
 115:Core/Src/stm32f0xx_it.c ****   * @brief This function handles Pendable request for system service.
 116:Core/Src/stm32f0xx_it.c ****   */
 117:Core/Src/stm32f0xx_it.c **** void PendSV_Handler(void)
 118:Core/Src/stm32f0xx_it.c **** {
 119:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 120:Core/Src/stm32f0xx_it.c **** 
 121:Core/Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 122:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 123:Core/Src/stm32f0xx_it.c **** 
 124:Core/Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 125:Core/Src/stm32f0xx_it.c **** }
 126:Core/Src/stm32f0xx_it.c **** 
 127:Core/Src/stm32f0xx_it.c **** /**
ARM GAS  /tmp/ccjoSfar.s 			page 5


 128:Core/Src/stm32f0xx_it.c ****   * @brief This function handles System tick timer.
 129:Core/Src/stm32f0xx_it.c ****   */
 130:Core/Src/stm32f0xx_it.c **** void SysTick_Handler(void)
 131:Core/Src/stm32f0xx_it.c **** {
 111              		.loc 1 131 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 132:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 133:Core/Src/stm32f0xx_it.c **** 
 134:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 135:Core/Src/stm32f0xx_it.c **** 
 136:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 137:Core/Src/stm32f0xx_it.c **** 
 138:Core/Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 139:Core/Src/stm32f0xx_it.c **** }
 116              		.loc 1 139 0
 117              		@ sp needed
 118 0000 7047     		bx	lr
 119              		.cfi_endproc
 120              	.LFE533:
 122 0002 C046     		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 123              		.align	1
 124              		.p2align 2,,3
 125              		.global	TIM6_DAC_IRQHandler
 126              		.syntax unified
 127              		.code	16
 128              		.thumb_func
 129              		.fpu softvfp
 131              	TIM6_DAC_IRQHandler:
 132              	.LFB534:
 140:Core/Src/stm32f0xx_it.c **** 
 141:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 142:Core/Src/stm32f0xx_it.c **** /* STM32F0xx Peripheral Interrupt Handlers                                    */
 143:Core/Src/stm32f0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 144:Core/Src/stm32f0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 145:Core/Src/stm32f0xx_it.c **** /* please refer to the startup file (startup_stm32f0xx.s).                    */
 146:Core/Src/stm32f0xx_it.c **** /******************************************************************************/
 147:Core/Src/stm32f0xx_it.c **** 
 148:Core/Src/stm32f0xx_it.c **** /**
 149:Core/Src/stm32f0xx_it.c ****   * @brief This function handles TIM6 global and DAC underrun error interrupts.
 150:Core/Src/stm32f0xx_it.c ****   */
 151:Core/Src/stm32f0xx_it.c **** void TIM6_DAC_IRQHandler(void)
 152:Core/Src/stm32f0xx_it.c **** {
 133              		.loc 1 152 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              	.LVL0:
 138              	.LBB7:
 139              	.LBB8:
 140              		.file 2 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h"
   1:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @file    stm32f0xx_ll_tim.h
   4:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @author  MCD Application Team
ARM GAS  /tmp/ccjoSfar.s 			page 6


   5:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief   Header file of TIM LL module.
   6:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ******************************************************************************
   7:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @attention
   8:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
   9:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
  12:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
  17:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ******************************************************************************
  18:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  19:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  20:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #ifndef __STM32F0xx_LL_TIM_H
  22:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __STM32F0xx_LL_TIM_H
  23:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  24:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #ifdef __cplusplus
  25:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** extern "C" {
  26:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif
  27:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  28:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #include "stm32f0xx.h"
  30:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  31:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @addtogroup STM32F0xx_LL_Driver
  32:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
  33:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  34:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  35:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined (TIM1) || defined (TIM2) || defined (TIM3) || defined (TIM14) || defined (TIM15) || def
  36:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  37:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL TIM
  38:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
  39:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  40:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  41:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Variables TIM Private Variables
  44:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
  45:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
  46:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t OFFSET_TAB_CCMRx[] =
  47:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  48:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 0: TIMx_CH1  */
  49:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 1: TIMx_CH1N */
  50:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 2: TIMx_CH2  */
  51:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x00U,   /* 3: TIMx_CH2N */
  52:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x04U,   /* 4: TIMx_CH3  */
  53:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x04U,   /* 5: TIMx_CH3N */
  54:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0x04U    /* 6: TIMx_CH4  */
  55:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  56:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  57:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OCxx[] =
  58:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  59:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: OC1M, OC1FE, OC1PE */
  60:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 1: - NA */
  61:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U,            /* 2: OC2M, OC2FE, OC2PE */
ARM GAS  /tmp/ccjoSfar.s 			page 7


  62:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 3: - NA */
  63:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 4: OC3M, OC3FE, OC3PE */
  64:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 5: - NA */
  65:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U             /* 6: OC4M, OC4FE, OC4PE */
  66:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  67:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  68:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_ICxx[] =
  69:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  70:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: CC1S, IC1PSC, IC1F */
  71:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 1: - NA */
  72:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U,            /* 2: CC2S, IC2PSC, IC2F */
  73:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 3: - NA */
  74:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 4: CC3S, IC3PSC, IC3F */
  75:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 5: - NA */
  76:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U             /* 6: CC4S, IC4PSC, IC4F */
  77:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  78:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  79:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_CCxP[] =
  80:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  81:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: CC1P */
  82:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   2U,            /* 1: CC1NP */
  83:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   4U,            /* 2: CC2P */
  84:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   6U,            /* 3: CC2NP */
  85:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   8U,            /* 4: CC3P */
  86:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   10U,           /* 5: CC3NP */
  87:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   12U            /* 6: CC4P */
  88:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
  89:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
  90:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OISx[] =
  91:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
  92:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   0U,            /* 0: OIS1 */
  93:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   1U,            /* 1: OIS1N */
  94:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   2U,            /* 2: OIS2 */
  95:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   3U,            /* 3: OIS2N */
  96:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   4U,            /* 4: OIS3 */
  97:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   5U,            /* 5: OIS3N */
  98:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   6U             /* 6: OIS4 */
  99:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** };
 100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private constants ---------------------------------------------------------*/
 105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Constants TIM Private Constants
 106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIMx_OR_RMP_SHIFT  16U
 111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIMx_OR_RMP_MASK   0x0000FFFFU
 112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIM14_OR_RMP_MASK  (TIM14_OR_TI1_RMP << TIMx_OR_RMP_SHIFT)
 113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Mask used to set the TDG[x:0] of the DTG bits of the TIMx_BDTR register */
 115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_1 ((uint8_t)0x7F)
 116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_2 ((uint8_t)0x3F)
 117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_3 ((uint8_t)0x1F)
 118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_DELAY_4 ((uint8_t)0x1F)
ARM GAS  /tmp/ccjoSfar.s 			page 8


 119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Mask used to set the DTG[7:5] bits of the DTG bits of the TIMx_BDTR register */
 121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_1 ((uint8_t)0x00)
 122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_2 ((uint8_t)0x80)
 123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_3 ((uint8_t)0xC0)
 124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define DT_RANGE_4 ((uint8_t)0xE0)
 125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Private macros ------------------------------------------------------------*/
 132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Macros TIM Private Macros
 133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @brief  Convert channel id into channel index.
 136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
 138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
 139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
 140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
 141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
 142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
 143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
 144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval none
 145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIM_GET_CHANNEL_INDEX( __CHANNEL__) \
 147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (((__CHANNEL__) == LL_TIM_CHANNEL_CH1) ? 0U :\
 148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH1N) ? 1U :\
 149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH2) ? 2U :\
 150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH2N) ? 3U :\
 151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH3) ? 4U :\
 152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH3N) ? 5U : 6U)
 153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @brief  Calculate the deadtime sampling period(in ps).
 155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz).
 156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CKD__ This parameter can be one of the following values:
 157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
 158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
 159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
 160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval none
 161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define TIM_CALC_DTS(__TIMCLK__, __CKD__)                                                        \
 163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (((__CKD__) == LL_TIM_CLOCKDIVISION_DIV1) ? ((uint64_t)1000000000000U/(__TIMCLK__))         : \
 164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((__CKD__) == LL_TIM_CLOCKDIVISION_DIV2) ? ((uint64_t)1000000000000U/((__TIMCLK__) >> 1U)) : \
 165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****    ((uint64_t)1000000000000U/((__TIMCLK__) >> 2U)))
 166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported types ------------------------------------------------------------*/
 172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_ES_INIT TIM Exported Init structure
 174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  /tmp/ccjoSfar.s 			page 9


 176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Time Base configuration structure definition.
 179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint16_t Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
 183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter can be a number between Min_Data=0x0000 and Max_D
 184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function @
 186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t CounterMode;       /*!< Specifies the counter mode.
 188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_COUNTERMODE.
 189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function @
 191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t Autoreload;        /*!< Specifies the auto reload value to be loaded into the active
 193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Auto-Reload Register at the next update event.
 194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter must be a number between Min_Data=0x0000 and Max_
 195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Some timer instances may support 32 bits counters. In that case 
 196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function @
 198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ClockDivision;     /*!< Specifies the clock division.
 200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_CLOCKDIVISION.
 201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function @
 203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t RepetitionCounter;  /*!< Specifies the repetition counter value. Each time the RCR downc
 205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    reaches zero, an update event is generated and counting restarts
 206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    from the RCR value (N).
 207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This means in PWM mode that (N+1) corresponds to:
 208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       - the number of PWM periods in edge-aligned mode
 209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       - the number of half PWM period in center-aligned mode
 210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    GP timers: this parameter must be a number between Min_Data = 0x
 211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    Advanced timers: this parameter must be a number between Min_Dat
 212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function @
 214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_InitTypeDef;
 215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Output Compare configuration structure definition.
 218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCMode;        /*!< Specifies the output mode.
 222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCMODE.
 223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCState;       /*!< Specifies the TIM Output Compare state.
 227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
 228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions @ref
 230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCNState;      /*!< Specifies the TIM complementary Output Compare state.
 232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
ARM GAS  /tmp/ccjoSfar.s 			page 10


 233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions @ref
 235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t CompareValue;  /*!< Specifies the Compare value to be loaded into the Capture Compare Re
 237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a number between Min_Data=0x0000 and Max_Data=
 238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function LL_TI
 240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCPolarity;    /*!< Specifies the output polarity.
 242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCNPolarity;   /*!< Specifies the complementary output polarity.
 247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCIdleState;   /*!< Specifies the TIM Output Compare pin state during Idle state.
 253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCIDLESTATE.
 254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OCNIdleState;  /*!< Specifies the TIM Output Compare pin state during Idle state.
 258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCIDLESTATE.
 259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_OC_InitTypeDef;
 262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Input Capture configuration structure definition.
 265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICPolarity;    /*!< Specifies the active edge of the input signal.
 271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICActiveInput; /*!< Specifies the input.
 276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICPrescaler;   /*!< Specifies the Input Capture Prescaler.
 281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t ICFilter;      /*!< Specifies the input capture filter.
 286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function @ref 
 289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_IC_InitTypeDef;
ARM GAS  /tmp/ccjoSfar.s 			page 11


 290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Encoder interface configuration structure definition.
 294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t EncoderMode;     /*!< Specifies the encoder resolution (x2 or x4).
 298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ENCODERMODE.
 299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Polarity;     /*!< Specifies the active edge of TI1 input.
 303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1ActiveInput;  /*!< Specifies the TI1 input source
 308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Prescaler;    /*!< Specifies the TI1 input prescaler value.
 313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Filter;       /*!< Specifies the TI1 input filter.
 318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2Polarity;      /*!< Specifies the active edge of TI2 input.
 323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2ActiveInput;  /*!< Specifies the TI2 input source
 328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2Prescaler;    /*!< Specifies the TI2 input prescaler value.
 333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC2Filter;       /*!< Specifies the TI2 input filter.
 338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function @re
 341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_ENCODER_InitTypeDef;
 343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  TIM Hall sensor interface configuration structure definition.
 346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  /tmp/ccjoSfar.s 			page 12


 347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Polarity;        /*!< Specifies the active edge of TI1 input.
 351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function 
 354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Prescaler;       /*!< Specifies the TI1 input prescaler value.
 356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     Prescaler must be set to get a maximum counter period longer th
 357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     time interval between 2 consecutive changes on the Hall inputs.
 358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function 
 361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t IC1Filter;          /*!< Specifies the TI1 input filter.
 363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function 
 366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t CommutationDelay;   /*!< Specifies the compare value to be loaded into the Capture Compa
 368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     A positive pulse (TRGO event) is generated with a programmable 
 369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     a change occurs on the Hall inputs.
 370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This parameter can be a number between Min_Data = 0x0000 and Ma
 371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function 
 373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_HALLSENSOR_InitTypeDef;
 374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  BDTR (Break and Dead Time) structure definition
 377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** typedef struct
 379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
 380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OSSRState;            /*!< Specifies the Off-State selection used in Run mode.
 381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_OSSR
 382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field cannot be modified as long as LOCK level
 386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t OSSIState;            /*!< Specifies the Off-State used in Idle state.
 388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_OSSI
 389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field cannot be modified as long as LOCK level
 393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t LockLevel;            /*!< Specifies the LOCK level parameters.
 395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_LOCKLEVEL
 396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note The LOCK bits can be written only once after the reset.
 398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                             has been written, their content is frozen until the nex
 399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t DeadTime;              /*!< Specifies the delay time between the switching-off and the
 401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       switching-on of the outputs.
 402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a number between Min_Data = 0x00 and Ma
 403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  /tmp/ccjoSfar.s 			page 13


 404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint16_t BreakState;           /*!< Specifies whether the TIM Break input is enabled or not.
 409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_ENABLE
 410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t BreakPolarity;        /*!< Specifies the TIM Break Input pin polarity.
 416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_POLARIT
 417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t AutomaticOutput;      /*!< Specifies whether the TIM Automatic Output feature is enabled
 423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_AUTOMATICOUTP
 424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** } LL_TIM_BDTR_InitTypeDef;
 429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported constants --------------------------------------------------------*/
 436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Constants TIM Exported Constants
 437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_GET_FLAG Get Flags Defines
 441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief    Flags defines which can be used with LL_TIM_ReadReg function.
 442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_UIF                          TIM_SR_UIF           /*!< Update interrupt flag */
 445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC1IF                        TIM_SR_CC1IF         /*!< Capture/compare 1 interrup
 446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC2IF                        TIM_SR_CC2IF         /*!< Capture/compare 2 interrup
 447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC3IF                        TIM_SR_CC3IF         /*!< Capture/compare 3 interrup
 448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC4IF                        TIM_SR_CC4IF         /*!< Capture/compare 4 interrup
 449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_COMIF                        TIM_SR_COMIF         /*!< COM interrupt flag */
 450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_TIF                          TIM_SR_TIF           /*!< Trigger interrupt flag */
 451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_BIF                          TIM_SR_BIF           /*!< Break interrupt flag */
 452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC1OF                        TIM_SR_CC1OF         /*!< Capture/Compare 1 overcapt
 453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC2OF                        TIM_SR_CC2OF         /*!< Capture/Compare 2 overcapt
 454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC3OF                        TIM_SR_CC3OF         /*!< Capture/Compare 3 overcapt
 455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SR_CC4OF                        TIM_SR_CC4OF         /*!< Capture/Compare 4 overcapt
 456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
ARM GAS  /tmp/ccjoSfar.s 			page 14


 461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_ENABLE Break Enable
 462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_DISABLE            0x00000000U             /*!< Break function disabled */
 465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_ENABLE             TIM_BDTR_BKE            /*!< Break function enabled */
 466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_AUTOMATICOUTPUT_ENABLE Automatic output enable
 471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_AUTOMATICOUTPUT_DISABLE         0x00000000U             /*!< MOE can be set only by 
 474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_AUTOMATICOUTPUT_ENABLE          TIM_BDTR_AOE            /*!< MOE can be set by softw
 475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IT IT Defines
 481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief    IT defines which can be used with LL_TIM_ReadReg and  LL_TIM_WriteReg functions.
 482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_UIE                        TIM_DIER_UIE         /*!< Update interrupt enable */
 485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC1IE                      TIM_DIER_CC1IE       /*!< Capture/compare 1 interrup
 486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC2IE                      TIM_DIER_CC2IE       /*!< Capture/compare 2 interrup
 487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC3IE                      TIM_DIER_CC3IE       /*!< Capture/compare 3 interrup
 488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_CC4IE                      TIM_DIER_CC4IE       /*!< Capture/compare 4 interrup
 489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_COMIE                      TIM_DIER_COMIE       /*!< COM interrupt enable */
 490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_TIE                        TIM_DIER_TIE         /*!< Trigger interrupt enable *
 491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DIER_BIE                        TIM_DIER_BIE         /*!< Break interrupt enable */
 492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_UPDATESOURCE Update Source
 497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_REGULAR            0x00000000U          /*!< Counter overflow/underflow
 500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_COUNTER            TIM_CR1_URS          /*!< Only counter overflow/unde
 501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ONEPULSEMODE One Pulse Mode
 506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_SINGLE             TIM_CR1_OPM          /*!< Counter is not stopped at 
 509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_REPETITIVE         0x00000000U          /*!< Counter stops counting at 
 510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERMODE Counter Mode
 515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_UP                  0x00000000U          /*!<Counter used as upcounter *
ARM GAS  /tmp/ccjoSfar.s 			page 15


 518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_DOWN                TIM_CR1_DIR          /*!< Counter used as downcounte
 519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_DOWN         TIM_CR1_CMS_0        /*!< The counter counts up and 
 520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP           TIM_CR1_CMS_1        /*!<The counter counts up and d
 521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP_DOWN      TIM_CR1_CMS          /*!< The counter counts up and 
 522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKDIVISION Clock Division
 527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV1              0x00000000U          /*!< tDTS=tCK_INT */
 530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV2              TIM_CR1_CKD_0        /*!< tDTS=2*tCK_INT */
 531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV4              TIM_CR1_CKD_1        /*!< tDTS=4*tCK_INT */
 532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERDIRECTION Counter Direction
 537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_UP             0x00000000U          /*!< Timer counter counts up */
 540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_DOWN           TIM_CR1_DIR          /*!< Timer counter counts down 
 541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCUPDATESOURCE Capture Compare  Update Source
 546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCUPDATESOURCE_COMG_ONLY        0x00000000U          /*!< Capture/compare control bi
 549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI    TIM_CR2_CCUS         /*!< Capture/compare control bi
 550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCDMAREQUEST Capture Compare DMA Request
 555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_CC                 0x00000000U          /*!< CCx DMA request sent when 
 558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_UPDATE             TIM_CR2_CCDS         /*!< CCx DMA requests sent when
 559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_LOCKLEVEL Lock Level
 564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_OFF                   0x00000000U          /*!< LOCK OFF - No bit is write
 567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_1                     TIM_BDTR_LOCK_0      /*!< LOCK Level 1 */
 568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_2                     TIM_BDTR_LOCK_1      /*!< LOCK Level 2 */
 569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_3                     TIM_BDTR_LOCK        /*!< LOCK Level 3 */
 570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CHANNEL Channel
ARM GAS  /tmp/ccjoSfar.s 			page 16


 575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1                     TIM_CCER_CC1E     /*!< Timer input/output channel 1 
 578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1N                    TIM_CCER_CC1NE    /*!< Timer complementary output ch
 579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2                     TIM_CCER_CC2E     /*!< Timer input/output channel 2 
 580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2N                    TIM_CCER_CC2NE    /*!< Timer complementary output ch
 581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3                     TIM_CCER_CC3E     /*!< Timer input/output channel 3 
 582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3N                    TIM_CCER_CC3NE    /*!< Timer complementary output ch
 583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH4                     TIM_CCER_CC4E     /*!< Timer input/output channel 4 
 584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCSTATE Output Configuration State
 590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCSTATE_DISABLE                 0x00000000U             /*!< OCx is not active */
 593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCSTATE_ENABLE                  TIM_CCER_CC1E           /*!< OCx signal is output on
 594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCMODE Output Configuration Mode
 600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_FROZEN                   0x00000000U                                         
 603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_ACTIVE                   TIM_CCMR1_OC1M_0                                    
 604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_INACTIVE                 TIM_CCMR1_OC1M_1                                    
 605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_TOGGLE                   (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)               
 606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_INACTIVE          TIM_CCMR1_OC1M_2                                    
 607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_ACTIVE            (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_0)               
 608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM1                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1)               
 609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM2                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1
 610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCPOLARITY Output Configuration Polarity
 615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_HIGH                 0x00000000U                 /*!< OCxactive high*/
 618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_LOW                  TIM_CCER_CC1P               /*!< OCxactive low*/
 619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCIDLESTATE Output Configuration Idle State
 624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCIDLESTATE_LOW                 0x00000000U             /*!<OCx=0 (after a dead-time
 627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCIDLESTATE_HIGH                TIM_CR2_OIS1            /*!<OCx=1 (after a dead-time
 628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  /tmp/ccjoSfar.s 			page 17


 632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ACTIVEINPUT Active Input Selection
 634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_DIRECTTI            (TIM_CCMR1_CC1S_0 << 16U) /*!< ICx is mapped on TIx 
 637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_INDIRECTTI          (TIM_CCMR1_CC1S_1 << 16U) /*!< ICx is mapped on TIy 
 638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_TRC                 (TIM_CCMR1_CC1S << 16U)   /*!< ICx is mapped on TRC 
 639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ICPSC Input Configuration Prescaler
 644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV1                      0x00000000U                    /*!< No prescaler, ca
 647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV2                      (TIM_CCMR1_IC1PSC_0 << 16U)    /*!< Capture is done 
 648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV4                      (TIM_CCMR1_IC1PSC_1 << 16U)    /*!< Capture is done 
 649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV8                      (TIM_CCMR1_IC1PSC << 16U)      /*!< Capture is done 
 650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_FILTER Input Configuration Filter
 655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1                 0x00000000U                                         
 658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N2              (TIM_CCMR1_IC1F_0 << 16U)                           
 659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N4              (TIM_CCMR1_IC1F_1 << 16U)                           
 660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N8              ((TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)      
 661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N6              (TIM_CCMR1_IC1F_2 << 16U)                           
 662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_0) << 16U)      
 663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N6              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1) << 16U)      
 664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N6              (TIM_CCMR1_IC1F_3 << 16U)                           
 666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N8              ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_0) << 16U)      
 667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1) << 16U)      
 668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N8             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2) << 16U)      
 670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N8             (TIM_CCMR1_IC1F << 16U)                             
 673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_POLARITY Input Configuration Polarity
 678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_RISING              0x00000000U                      /*!< The circuit is
 681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_FALLING             TIM_CCER_CC1P                    /*!< The circuit is
 682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_BOTHEDGE            (TIM_CCER_CC1P | TIM_CCER_CC1NP) /*!< The circuit is
 683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKSOURCE Clock Source
 688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
ARM GAS  /tmp/ccjoSfar.s 			page 18


 689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_INTERNAL            0x00000000U                                         
 691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE1           (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)  
 692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE2           TIM_SMCR_ECE                                        
 693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ENCODERMODE Encoder Mode
 698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI1                     TIM_SMCR_SMS_0                               
 701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI2                     TIM_SMCR_SMS_1                               
 702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X4_TI12                   (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)             
 703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TRGO Trigger Output
 708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_RESET                      0x00000000U                                     /*!<
 711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_ENABLE                     TIM_CR2_MMS_0                                   /*!<
 712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_UPDATE                     TIM_CR2_MMS_1                                   /*!<
 713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_CC1IF                      (TIM_CR2_MMS_1 | TIM_CR2_MMS_0)                 /*!<
 714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC1REF                     TIM_CR2_MMS_2                                   /*!<
 715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC2REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_0)                 /*!<
 716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC3REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1)                 /*!<
 717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TRGO_OC4REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0) /*!<
 718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_SLAVEMODE Slave Mode
 724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_DISABLED              0x00000000U                         /*!< Slave mode 
 727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_RESET                 TIM_SMCR_SMS_2                      /*!< Reset Mode 
 728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_GATED                 (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0)   /*!< Gated Mode 
 729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_TRIGGER               (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1)   /*!< Trigger Mod
 730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TS Trigger Selection
 735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR0                         0x00000000U                                         
 738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR1                         TIM_SMCR_TS_0                                       
 739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR2                         TIM_SMCR_TS_1                                       
 740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ITR3                         (TIM_SMCR_TS_0 | TIM_SMCR_TS_1)                     
 741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_TI1F_ED                      TIM_SMCR_TS_2                                       
 742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_TI1FP1                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_0)                     
 743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_TI2FP2                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_1)                     
 744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TS_ETRF                         (TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0)     
 745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  /tmp/ccjoSfar.s 			page 19


 746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_POLARITY External Trigger Polarity
 750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_NONINVERTED        0x00000000U             /*!< ETR is non-inverted, ac
 753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_INVERTED           TIM_SMCR_ETP            /*!< ETR is inverted, active
 754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_PRESCALER External Trigger Prescaler
 759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV1              0x00000000U             /*!< ETR prescaler OFF */
 762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV2              TIM_SMCR_ETPS_0         /*!< ETR frequency is divide
 763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV4              TIM_SMCR_ETPS_1         /*!< ETR frequency is divide
 764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV8              TIM_SMCR_ETPS           /*!< ETR frequency is divide
 765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_FILTER External Trigger Filter
 770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1                0x00000000U                                         
 773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N2             TIM_SMCR_ETF_0                                      
 774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N4             TIM_SMCR_ETF_1                                      
 775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N8             (TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)                   
 776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N6             TIM_SMCR_ETF_2                                      
 777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)                   
 778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N6             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)                   
 779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N6             TIM_SMCR_ETF_3                                      
 781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N8             (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_0)                   
 782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1)                   
 783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N8            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2)                   
 785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)  
 786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)  
 787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N8            TIM_SMCR_ETF                                        
 788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_POLARITY break polarity
 794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_POLARITY_LOW              0x00000000U               /*!< Break input BRK is ac
 797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_BREAK_POLARITY_HIGH             TIM_BDTR_BKP              /*!< Break input BRK is ac
 798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  /tmp/ccjoSfar.s 			page 20


 803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OSSI OSSI
 806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSI_DISABLE                    0x00000000U             /*!< When inactive, OCx/OCxN
 809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSI_ENABLE                     TIM_BDTR_OSSI           /*!< When inactive, OxC/OCxN
 810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OSSR OSSR
 815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSR_DISABLE                    0x00000000U             /*!< When inactive, OCx/OCxN
 818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OSSR_ENABLE                     TIM_BDTR_OSSR           /*!< When inactive, OC/OCN o
 819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_BASEADDR DMA Burst Base Address
 825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR1           0x00000000U                                         
 828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR2           TIM_DCR_DBA_0                                       
 829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SMCR          TIM_DCR_DBA_1                                       
 830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_DIER          (TIM_DCR_DBA_1 |  TIM_DCR_DBA_0)                    
 831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SR            TIM_DCR_DBA_2                                       
 832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_EGR           (TIM_DCR_DBA_2 | TIM_DCR_DBA_0)                     
 833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR1         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1)                     
 834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR2         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
 835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCER          TIM_DCR_DBA_3                                       
 836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CNT           (TIM_DCR_DBA_3 | TIM_DCR_DBA_0)                     
 837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_PSC           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1)                     
 838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_ARR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
 839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_RCR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_2)                     
 840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR1          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_0)     
 841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR2          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1)     
 842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR3          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM
 843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR4          TIM_DCR_DBA_4                                       
 844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_BDTR          (TIM_DCR_DBA_4 | TIM_DCR_DBA_0)                     
 845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_LENGTH DMA Burst Length
 850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_1TRANSFER       0x00000000U                                         
 853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_2TRANSFERS      TIM_DCR_DBL_0                                       
 854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_3TRANSFERS      TIM_DCR_DBL_1                                       
 855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_4TRANSFERS      (TIM_DCR_DBL_1 |  TIM_DCR_DBL_0)                    
 856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_5TRANSFERS      TIM_DCR_DBL_2                                       
 857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_6TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_0)                     
 858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_7TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1)                     
 859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_8TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
ARM GAS  /tmp/ccjoSfar.s 			page 21


 860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_9TRANSFERS      TIM_DCR_DBL_3                                       
 861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_10TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_0)                     
 862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_11TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1)                     
 863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_12TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
 864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_13TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2)                     
 865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_14TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_0)     
 866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_15TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1)     
 867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_16TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM
 868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_17TRANSFERS     TIM_DCR_DBL_4                                       
 869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_18TRANSFERS     (TIM_DCR_DBL_4 |  TIM_DCR_DBL_0)                    
 870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_GPIO     TIM14_OR_RMP_MASK                                            
 876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_RTC_CLK  (TIM14_OR_TI1_RMP_0  | TIM14_OR_RMP_MASK)                    
 877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_HSE      (TIM14_OR_TI1_RMP_1  | TIM14_OR_RMP_MASK)                    
 878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_TIM14_TI1_RMP_MCO      (TIM14_OR_TI1_RMP_0  | TIM14_OR_TI1_RMP_1  | TIM14_OR_RMP_MAS
 879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCREF_CLR_INT OCREF clear input selection
 882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCREF_CLR_INT_OCREF_CLR     0x00000000U         /*!< OCREF_CLR_INT is connected to t
 885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_OCREF_CLR_INT_ETR           TIM_SMCR_OCCS       /*!< OCREF_CLR_INT is connected to E
 886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported macro ------------------------------------------------------------*/
 895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Macros TIM Exported Macros
 896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EM_WRITE_READ Common Write and read registers Macros
 900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Write a value in TIM register.
 904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
 905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __REG__ Register to be written
 906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __VALUE__ Value to be written in the register
 907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
 908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG((__INSTANCE__)->__REG__, (__VAL
 910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Read a value in TIM register.
 913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
 914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __REG__ Register to be read
 915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Register value
 916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  /tmp/ccjoSfar.s 			page 22


 917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define LL_TIM_ReadReg(__INSTANCE__, __REG__) READ_REG((__INSTANCE__)->__REG__)
 918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
 920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EM_Exported_Macros Exported_Macros
 923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
 924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating DTG[0:7] in the TIMx_BDTR register to achieve the requested de
 928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DEADTIME (80000000, @ref LL_TIM_GetClockDivision (), 120);
 929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CKD__ This parameter can be one of the following values:
 931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
 932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
 933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
 934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __DT__ deadtime duration (in ns)
 935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval DTG[0:7]
 936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_DEADTIME(__TIMCLK__, __CKD__, __DT__)  \
 938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ( (((uint64_t)((__DT__)*1000U)) < ((DT_DELAY_1+1U) * TIM_CALC_DTS((__TIMCLK__), (__CKD__))))    ?
 939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((64U + (DT_DELAY_2+1U)) * 2U * TIM_CALC_DTS((__TIMCLK__), (__C
 940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((32U + (DT_DELAY_3+1U)) * 8U * TIM_CALC_DTS((__TIMCLK__), (__C
 941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((32U + (DT_DELAY_4+1U)) * 16U * TIM_CALC_DTS((__TIMCLK__), (__
 942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     0U)
 943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the prescaler value to achieve the required counter clock freq
 946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PSC (80000000, 1000000);
 947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __CNTCLK__ counter clock frequency (in Hz)
 949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Prescaler value  (between Min_Data=0 and Max_Data=65535)
 950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_PSC(__TIMCLK__, __CNTCLK__)   \
 952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (((__TIMCLK__) >= (__CNTCLK__)) ? (uint32_t)(((__TIMCLK__)/(__CNTCLK__)) - 1U) : 0U)
 953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required output signal fr
 956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_ARR (1000000, @ref LL_TIM_GetPrescaler (), 10000);
 957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PSC__ prescaler
 959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __FREQ__ output signal frequency (in Hz)
 960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval  Auto-reload value  (between Min_Data=0 and Max_Data=65535)
 961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_ARR(__TIMCLK__, __PSC__, __FREQ__) \
 963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((((__TIMCLK__)/((__PSC__) + 1U)) >= (__FREQ__)) ? (((__TIMCLK__)/((__FREQ__) * ((__PSC__) + 1U))
 964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the compare value required to achieve the required timer outpu
 967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DELAY (1000000, @ref LL_TIM_GetPrescaler (), 10);
 968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PSC__ prescaler
 970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
 971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Compare value  (between Min_Data=0 and Max_Data=65535)
 972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_DELAY(__TIMCLK__, __PSC__, __DELAY__)  \
ARM GAS  /tmp/ccjoSfar.s 			page 23


 974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((uint32_t)(((uint64_t)(__TIMCLK__) * (uint64_t)(__DELAY__)) \
 975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****               / ((uint64_t)1000000U * (uint64_t)((__PSC__) + 1U))))
 976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required pulse duration (
 979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PULSE (1000000, @ref LL_TIM_GetPrescaler (), 10, 20);
 980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PSC__ prescaler
 982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
 983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __PULSE__ pulse duration (in us)
 984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Auto-reload value  (between Min_Data=0 and Max_Data=65535)
 985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
 986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_CALC_PULSE(__TIMCLK__, __PSC__, __DELAY__, __PULSE__)  \
 987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((uint32_t)(__LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__PULSE__)) \
 988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****               + __LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__DELAY__))))
 989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
 990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
 991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  HELPER macro retrieving the ratio of the input capture prescaler
 992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_GET_ICPSC_RATIO (@ref LL_TIM_IC_GetPrescaler ());
 993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  __ICPSC__ This parameter can be one of the following values:
 994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
 995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
 996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
 997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
 998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Input capture prescaler ratio (1, 2, 4 or 8)
 999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** #define __LL_TIM_GET_ICPSC_RATIO(__ICPSC__)  \
1001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   ((uint32_t)(0x01U << (((__ICPSC__) >> 16U) >> TIM_CCMR1_IC1PSC_Pos)))
1002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /* Exported functions --------------------------------------------------------*/
1014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Functions TIM Exported Functions
1015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Time_Base Time Base configuration
1019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable timer counter.
1023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_EnableCounter
1024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
1028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_CEN);
1030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
ARM GAS  /tmp/ccjoSfar.s 			page 24


1031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable timer counter.
1034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_DisableCounter
1035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
1039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
1041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether the timer counter is enabled.
1045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
1046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
1050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
1052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable update event generation.
1056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_EnableUpdateEvent
1057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
1061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
1063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable update event generation.
1067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_DisableUpdateEvent
1068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
1072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_UDIS);
1074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether update event generation is enabled.
1078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_IsEnabledUpdateEvent
1079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Inverted state of bit (0 or 1).
1081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledUpdateEvent(TIM_TypeDef *TIMx)
1083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (uint32_t)RESET) ? 1UL : 0UL);
1085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  /tmp/ccjoSfar.s 			page 25


1088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set update event source
1089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_REGULAR: any of the following events
1090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       generate an update interrupt or DMA request if enabled:
1091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *        - Counter overflow/underflow
1092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *        - Setting the UG bit
1093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *        - Update generation through the slave mode controller
1094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_COUNTER: only counter
1095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       overflow/underflow generates an update interrupt or DMA request if enabled.
1096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_SetUpdateSource
1097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  UpdateSource This parameter can be one of the following values:
1099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
1100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
1101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
1104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
1106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual event update source
1110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_GetUpdateSource
1111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
1114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
1115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetUpdateSource(TIM_TypeDef *TIMx)
1117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_URS));
1119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set one pulse mode (one shot v.s. repetitive).
1123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_SetOnePulseMode
1124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OnePulseMode This parameter can be one of the following values:
1126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
1131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
1133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual one pulse mode.
1137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_GetOnePulseMode
1138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetOnePulseMode(TIM_TypeDef *TIMx)
1144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
ARM GAS  /tmp/ccjoSfar.s 			page 26


1145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_OPM));
1146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the timer counter counting mode.
1150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       by a timer instance.
1153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Switching from Center Aligned counter mode to Edge counter mode (or reverse)
1154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       requires a timer reset to avoid unexpected direction
1155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       due to DIR bit readonly in center aligned mode.
1156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_SetCounterMode\n
1157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_SetCounterMode
1158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CounterMode This parameter can be one of the following values:
1160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
1168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
1170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual counter mode.
1174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       by a timer instance.
1177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetCounterMode\n
1178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_GetCounterMode
1179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounterMode(TIM_TypeDef *TIMx)
1188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t counter_mode;
1190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
1192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   if (counter_mode == 0U)
1194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   {
1195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****     counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
1196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   }
1197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return counter_mode;
1199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  /tmp/ccjoSfar.s 			page 27


1202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable auto-reload (ARR) preload.
1203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
1204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
1208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
1210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable auto-reload (ARR) preload.
1214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
1215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
1219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
1221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether auto-reload (ARR) preload is enabled.
1225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
1226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
1230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE)) ? 1UL : 0UL);
1232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead
1236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       instance.
1239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
1240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ClockDivision This parameter can be one of the following values:
1242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
1248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
1250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by t
1254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       instance.
1257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
1258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
ARM GAS  /tmp/ccjoSfar.s 			page 28


1259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
1265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
1267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the counter value.
1271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_SetCounter
1274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
1276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
1279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CNT, Counter);
1281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the counter value.
1285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_GetCounter
1288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
1290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
1292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CNT));
1294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current direction of the counter
1298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetDirection
1299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
1302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
1303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
1305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
1307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the prescaler value.
1311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
1312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The prescaler can be changed on the fly as this control register is buffered. The new
1313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       prescaler ratio is taken into account at the next update event.
1314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
1315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
ARM GAS  /tmp/ccjoSfar.s 			page 29


1316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Prescaler between Min_Data=0 and Max_Data=65535
1318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
1321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->PSC, Prescaler);
1323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the prescaler value.
1327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
1328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
1330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
1332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->PSC));
1334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the auto-reload value.
1338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The counter is blocked while the auto-reload value is null.
1339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
1342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
1343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  AutoReload between Min_Data=0 and Max_Data=65535
1345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
1348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->ARR, AutoReload);
1350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the auto-reload value.
1354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
1355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
1356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
1357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Auto-reload value
1359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
1361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->ARR));
1363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the repetition counter value.
1367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
1368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a repetition counter.
1369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
1370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
1372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
ARM GAS  /tmp/ccjoSfar.s 			page 30


1373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
1375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->RCR, RepetitionCounter);
1377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the repetition counter value.
1381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
1382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a repetition counter.
1383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
1384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Repetition counter value
1386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
1388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->RCR));
1390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
1397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
1401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
1402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       they are updated only when a commutation event (COM) occurs.
1403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Only on channels that have a complementary output.
1404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
1407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
1411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
1413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
1417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
1420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
1424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
1426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
ARM GAS  /tmp/ccjoSfar.s 			page 31


1430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
1433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CCUpdateSource This parameter can be one of the following values:
1435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
1436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
1437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
1440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
1442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the trigger of the capture/compare DMA request.
1446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
1447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DMAReqTrigger This parameter can be one of the following values:
1449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
1454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
1456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get actual trigger of the capture/compare DMA request.
1460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
1461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
1467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
1469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the lock level to freeze the
1473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         configuration of several capture/compare parameters.
1474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
1475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       the lock mechanism is supported by a timer instance.
1476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
1477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  LockLevel This parameter can be one of the following values:
1479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_OFF
1480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_1
1481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_2
1482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_3
1483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
1486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
ARM GAS  /tmp/ccjoSfar.s 			page 32


1487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
1488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable capture/compare channels.
1492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
1493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
1494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
1495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
1496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
1497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
1498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_EnableChannel
1499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CCER, Channels);
1513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable capture/compare channels.
1517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
1518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
1519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
1520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
1521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
1522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
1523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_DisableChannel
1524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CCER, Channels);
1538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether channel(s) is(are) enabled.
1542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
1543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
ARM GAS  /tmp/ccjoSfar.s 			page 33


1544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
1545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
1546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
1547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
1548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
1549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
1563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
1567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
1570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
1571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure an output channel.
1574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
1575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
1576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
1577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
1578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
1579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
1580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
1581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
1582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
1583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
1584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
1585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2          OIS4          LL_TIM_OC_ConfigOutput
1586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
1593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
1594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
1595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configura
1598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
ARM GAS  /tmp/ccjoSfar.s 			page 34


1601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
1602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
1603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
1604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
1605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
1606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Define the behavior of the output reference signal OCxREF from which
1610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         OCx and OCxN (when relevant) are derived.
1611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
1612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
1613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
1614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_SetMode
1615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Mode This parameter can be one of the following values:
1622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
1623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
1624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
1625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
1626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
1627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
1628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
1629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
1630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
1633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIF
1637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the output compare mode of an output channel.
1641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
1642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
1643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
1644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_GetMode
1645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
1653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
1654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
1655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
1656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
1657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
ARM GAS  /tmp/ccjoSfar.s 			page 35


1658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
1659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
1660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
1662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIF
1666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the polarity of an output channel.
1670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
1671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
1672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
1673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
1674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
1675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
1676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_SetPolarity
1677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Polarity This parameter can be one of the following values:
1687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
1688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
1689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
1692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[i
1695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the polarity of an output channel.
1699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
1700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
1701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
1702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
1703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
1704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
1705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_GetPolarity
1706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
ARM GAS  /tmp/ccjoSfar.s 			page 36


1715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
1717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
1718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
1720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChan
1723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the IDLE state of an output channel
1727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function is significant only for the timer instances
1728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       supporting the break feature. Macro IS_TIM_BREAK_INSTANCE(TIMx)
1729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       can be used to check whether or not a timer instance provides
1730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a break input.
1731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
1732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS1N         LL_TIM_OC_SetIdleState\n
1733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
1734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
1735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
1736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
1737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS4          LL_TIM_OC_SetIdleState
1738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  IdleState This parameter can be one of the following values:
1748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW
1749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
1750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState
1753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iC
1756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the IDLE state of an output channel
1760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
1761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS1N         LL_TIM_OC_GetIdleState\n
1762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
1763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
1764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
1765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
1766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CR2         OIS4          LL_TIM_OC_GetIdleState
1767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
ARM GAS  /tmp/ccjoSfar.s 			page 37


1772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW
1778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
1779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
1781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChanne
1784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable fast mode for the output channel.
1788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
1789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
1790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
1791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
1792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
1793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
1802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
1806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable fast mode for the output channel.
1811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
1812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
1813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
1814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
1815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
1824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
1828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  /tmp/ccjoSfar.s 			page 38


1829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether fast mode is enabled for the output channel.
1833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
1834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
1835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
1836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
1837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
1846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
1850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
1855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
1856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
1857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
1858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
1859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
1868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
1872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
1876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
1877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
1878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
1879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
1880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
ARM GAS  /tmp/ccjoSfar.s 			page 39


1886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
1889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
1893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channe
1897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
1898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
1899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
1900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
1901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
1910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
1914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable clearing the output channel on an external event.
1919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
1920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
1921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
1923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
1924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
1925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
1926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
1935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
1939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable clearing the output channel on an external event.
ARM GAS  /tmp/ccjoSfar.s 			page 40


1943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
1944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
1946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
1947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
1948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
1949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
1958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
1962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates clearing the output channel on an external event is enabled for the output ch
1966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function enables clearing the output channel on an external event.
1967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
1968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
1969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
1971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
1972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
1973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
1974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
1982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
1983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
1984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
1987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
1989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
1990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
1991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal an
1992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
1993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       dead-time insertion feature is supported by a timer instance.
1994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
1995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
1996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
1997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DeadTime between Min_Data=0 and Max_Data=255
1998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
1999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
ARM GAS  /tmp/ccjoSfar.s 			page 41


2000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
2001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
2003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 1 (TIMx_CCR1).
2007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
2012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
2013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
2018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR1, CompareValue);
2020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 2 (TIMx_CCR2).
2024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
2029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
2030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
2035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR2, CompareValue);
2037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 3 (TIMx_CCR3).
2041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel is supported by a timer instance.
2046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
2047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
2052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR3, CompareValue);
2054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  /tmp/ccjoSfar.s 			page 42


2057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set compare value for output channel 4 (TIMx_CCR4).
2058:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations compare value can be between 0x00000000 and 0xFFFFFFFF.
2059:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2060:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2061:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2062:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 4 is supported by a timer instance.
2063:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
2064:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2065:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2066:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2067:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2068:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
2069:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2070:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->CCR4, CompareValue);
2071:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2072:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2073:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2074:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
2075:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2076:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2077:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2078:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2079:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
2080:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
2081:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2082:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2083:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2084:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
2085:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2086:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR1));
2087:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2088:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2089:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2090:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
2091:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2092:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2093:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2094:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2095:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
2096:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
2097:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2098:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2099:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2100:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
2101:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2102:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR2));
2103:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2104:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2105:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2106:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
2107:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2108:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2109:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2110:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2111:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 3 is supported by a timer instance.
2112:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
2113:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
ARM GAS  /tmp/ccjoSfar.s 			page 43


2114:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2115:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2116:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
2117:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2118:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR3));
2119:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2120:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2121:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2122:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
2123:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned compare value can be between 0x00000000 and 0xFF
2124:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2125:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2126:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2127:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       output channel 4 is supported by a timer instance.
2128:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
2129:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2130:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2131:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2132:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
2133:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2134:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR4));
2135:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2136:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2137:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2138:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2139:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2140:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2141:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
2142:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2143:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2144:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2145:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure input channel.
2146:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
2147:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
2148:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC1F          LL_TIM_IC_Config\n
2149:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_Config\n
2150:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
2151:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_Config\n
2152:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_Config\n
2153:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
2154:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_Config\n
2155:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_Config\n
2156:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
2157:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_Config\n
2158:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_IC_Config\n
2159:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_Config\n
2160:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_Config\n
2161:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_Config\n
2162:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_Config\n
2163:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_Config\n
2164:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_Config\n
2165:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_Config
2166:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2167:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2168:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2169:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2170:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
ARM GAS  /tmp/ccjoSfar.s 			page 44


2171:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2172:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
2173:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_
2174:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
2175:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
2176:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING or @ref LL_TIM_I
2177:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2178:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2179:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
2180:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2181:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2182:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2183:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChanne
2184:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))  << SH
2185:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
2186:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
2187:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2188:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2189:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2190:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the active input.
2191:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
2192:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
2193:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
2194:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
2195:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2196:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2197:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2198:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2199:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2200:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2201:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICActiveInput This parameter can be one of the following values:
2202:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
2203:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
2204:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
2205:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2206:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2207:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiv
2208:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2209:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2210:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2211:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT
2212:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2213:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2214:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2215:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current active input.
2216:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
2217:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
2218:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
2219:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
2220:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2221:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2222:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2223:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2224:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2225:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2226:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2227:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
ARM GAS  /tmp/ccjoSfar.s 			page 45


2228:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
2229:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
2230:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2231:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
2232:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2233:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2234:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2235:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChann
2236:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2237:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2238:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2239:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the prescaler of input channel.
2240:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
2241:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
2242:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
2243:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
2244:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2245:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2246:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2247:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2248:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2249:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2250:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICPrescaler This parameter can be one of the following values:
2251:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
2252:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
2253:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
2254:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
2255:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2256:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2257:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescal
2258:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2259:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2260:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2261:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT
2262:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2263:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2264:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2265:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current prescaler value acting on an  input channel.
2266:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
2267:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
2268:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
2269:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
2270:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2271:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2272:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2273:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2274:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2275:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2276:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2277:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
2278:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
2279:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
2280:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
2281:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2282:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
2283:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2284:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
ARM GAS  /tmp/ccjoSfar.s 			page 46


2285:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2286:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iCha
2287:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2288:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2289:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2290:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the input filter duration.
2291:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
2292:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
2293:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
2294:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_SetFilter
2295:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2296:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2297:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2298:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2299:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2300:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2301:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICFilter This parameter can be one of the following values:
2302:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1
2303:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
2304:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
2305:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
2306:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
2307:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
2308:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
2309:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
2310:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
2311:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
2312:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
2313:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
2314:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
2315:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
2316:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
2317:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
2318:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2319:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2320:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
2321:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2322:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2323:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2324:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_
2325:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2326:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2327:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2328:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the input filter duration.
2329:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
2330:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
2331:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
2332:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_GetFilter
2333:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2334:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2335:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2336:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2337:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2338:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2339:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2340:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1
2341:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
ARM GAS  /tmp/ccjoSfar.s 			page 47


2342:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
2343:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
2344:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
2345:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
2346:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
2347:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
2348:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
2349:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
2350:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
2351:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
2352:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
2353:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
2354:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
2355:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
2356:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2357:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
2358:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2359:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2360:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2361:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChann
2362:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2363:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2364:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2365:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the input channel polarity.
2366:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
2367:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
2368:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
2369:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
2370:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
2371:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
2372:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
2373:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_SetPolarity
2374:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2375:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2376:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2377:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2378:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2379:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2380:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ICPolarity This parameter can be one of the following values:
2381:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING
2382:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_FALLING
2383:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
2384:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2385:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2386:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity
2387:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2388:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2389:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
2390:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****              ICPolarity << SHIFT_TAB_CCxP[iChannel]);
2391:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2392:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2393:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2394:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get the current input channel polarity.
2395:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
2396:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
2397:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
2398:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
ARM GAS  /tmp/ccjoSfar.s 			page 48


2399:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
2400:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
2401:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
2402:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         CCER         CC4NP         LL_TIM_IC_GetPolarity
2403:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2404:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2405:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2406:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2407:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2408:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2409:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2410:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING
2411:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_FALLING
2412:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
2413:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2414:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
2415:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2416:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2417:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
2418:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****           SHIFT_TAB_CCxP[iChannel]);
2419:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2420:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2421:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2422:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
2423:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2424:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides an XOR input.
2425:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
2426:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2427:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2428:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2429:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
2430:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2431:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
2432:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2433:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2434:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2435:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
2436:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2437:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides an XOR input.
2438:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
2439:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2440:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2441:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2442:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
2443:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2444:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
2445:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2446:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2447:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2448:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
2449:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2450:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * a timer instance provides an XOR input.
2451:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
2452:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2453:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2454:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2455:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
ARM GAS  /tmp/ccjoSfar.s 			page 49


2456:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2457:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S)) ? 1UL : 0UL);
2458:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2459:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2460:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2461:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 1.
2462:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2463:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2464:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2465:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2466:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 1 is supported by a timer instance.
2467:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
2468:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2469:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2470:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2471:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
2472:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2473:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR1));
2474:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2475:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2476:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2477:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 2.
2478:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2479:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2480:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2481:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2482:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 2 is supported by a timer instance.
2483:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
2484:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2485:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2486:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2487:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
2488:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2489:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR2));
2490:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2491:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2492:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2493:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 3.
2494:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2495:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2496:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
2497:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2498:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 3 is supported by a timer instance.
2499:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
2500:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2501:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2502:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2503:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
2504:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2505:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR3));
2506:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2507:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2508:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2509:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Get captured value for input channel 4.
2510:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note In 32-bit timer implementations returned captured value can be between 0x00000000 and 0xF
2511:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_32B_COUNTER_INSTANCE(TIMx) can be used to check
2512:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports a 32 bits counter.
ARM GAS  /tmp/ccjoSfar.s 			page 50


2513:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2514:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       input channel 4 is supported by a timer instance.
2515:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
2516:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2517:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2518:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2519:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
2520:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2521:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR4));
2522:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2523:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2524:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2525:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2526:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2527:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2528:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
2529:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2530:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2531:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2532:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable external clock mode 2.
2533:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ET
2534:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2535:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2536:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
2537:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2538:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2539:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2540:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
2541:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2542:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
2543:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2544:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2545:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2546:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable external clock mode 2.
2547:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2548:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2549:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
2550:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2551:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2552:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2553:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
2554:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2555:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
2556:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2557:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2558:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2559:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether external clock mode 2 is enabled.
2560:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2561:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2562:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
2563:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2564:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2565:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2566:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
2567:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2568:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE)) ? 1UL : 0UL);
2569:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
ARM GAS  /tmp/ccjoSfar.s 			page 51


2570:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2571:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2572:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the clock source of the counter clock.
2573:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note when selected clock source is external clock mode 1, the timer input
2574:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
2575:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       function. This timer input must be configured by calling
2576:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       the @ref LL_TIM_IC_Config() function.
2577:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
2578:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode1.
2579:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2580:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2581:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
2582:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         SMCR         ECE           LL_TIM_SetClockSource
2583:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2584:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ClockSource This parameter can be one of the following values:
2585:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
2586:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
2587:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
2588:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2589:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2590:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
2591:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2592:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
2593:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2594:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2595:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2596:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the encoder interface mode.
2597:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
2598:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance supports the encoder mode.
2599:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
2600:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2601:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  EncoderMode This parameter can be one of the following values:
2602:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
2603:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
2604:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
2605:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2606:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2607:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
2608:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2609:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
2610:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2611:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2612:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2613:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2614:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2615:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2616:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
2617:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2618:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2619:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2620:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the trigger output (TRGO) used for timer synchronization .
2621:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
2622:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       whether or not a timer instance can operate as a master timer.
2623:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
2624:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2625:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TimerSynchronization This parameter can be one of the following values:
2626:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_RESET
ARM GAS  /tmp/ccjoSfar.s 			page 52


2627:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_ENABLE
2628:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_UPDATE
2629:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_CC1IF
2630:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC1REF
2631:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC2REF
2632:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC3REF
2633:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC4REF
2634:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2635:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2636:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
2637:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2638:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
2639:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2640:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2641:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2642:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the synchronization mode of a slave timer.
2643:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2644:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2645:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
2646:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2647:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  SlaveMode This parameter can be one of the following values:
2648:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
2649:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_RESET
2650:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_GATED
2651:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
2652:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2653:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2654:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
2655:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2656:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
2657:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2658:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2659:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2660:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the selects the trigger input to be used to synchronize the counter.
2661:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2662:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2663:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
2664:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2665:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TriggerInput This parameter can be one of the following values:
2666:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR0
2667:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR1
2668:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR2
2669:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR3
2670:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI1F_ED
2671:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI1FP1
2672:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI2FP2
2673:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ETRF
2674:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2675:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2676:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
2677:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2678:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
2679:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2680:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2681:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2682:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable the Master/Slave mode.
2683:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
ARM GAS  /tmp/ccjoSfar.s 			page 53


2684:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2685:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
2686:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2687:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2688:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2689:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
2690:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2691:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
2692:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2693:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2694:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2695:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable the Master/Slave mode.
2696:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2697:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2698:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
2699:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2700:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2701:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2702:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
2703:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2704:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
2705:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2706:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2707:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2708:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief Indicates whether the Master/Slave mode is enabled.
2709:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2710:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * a timer instance can operate as a slave timer.
2711:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_IsEnabledMasterSlaveMode
2712:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2713:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2714:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2715:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledMasterSlaveMode(TIM_TypeDef *TIMx)
2716:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2717:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SMCR, TIM_SMCR_MSM) == (TIM_SMCR_MSM)) ? 1UL : 0UL);
2718:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2719:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2720:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2721:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure the external trigger (ETR) input.
2722:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_ETR_INSTANCE(TIMx) can be used to check whether or not
2723:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides an external trigger input.
2724:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR         ETP           LL_TIM_ConfigETR\n
2725:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         SMCR         ETPS          LL_TIM_ConfigETR\n
2726:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         SMCR         ETF           LL_TIM_ConfigETR
2727:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2728:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ETRPolarity This parameter can be one of the following values:
2729:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_POLARITY_NONINVERTED
2730:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_POLARITY_INVERTED
2731:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ETRPrescaler This parameter can be one of the following values:
2732:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV1
2733:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV2
2734:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV4
2735:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV8
2736:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  ETRFilter This parameter can be one of the following values:
2737:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1
2738:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N2
2739:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N4
2740:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N8
ARM GAS  /tmp/ccjoSfar.s 			page 54


2741:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N6
2742:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N8
2743:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N6
2744:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N8
2745:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N6
2746:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N8
2747:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N5
2748:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N6
2749:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N8
2750:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N5
2751:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N6
2752:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
2753:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2754:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2755:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescale
2756:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****                                       uint32_t ETRFilter)
2757:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2758:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | 
2759:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2760:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2761:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2762:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2763:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2764:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2765:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Break_Function Break function configuration
2766:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2767:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2768:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2769:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable the break function.
2770:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2771:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2772:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         BKE           LL_TIM_EnableBRK
2773:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2774:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2775:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2776:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableBRK(TIM_TypeDef *TIMx)
2777:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2778:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t tmpreg;
2779:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_BKE);
2780:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   /* Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. 
2781:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2782:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (void)(tmpreg);
2783:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2784:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2785:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2786:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable the break function.
2787:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         BKE           LL_TIM_DisableBRK
2788:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2789:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2790:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2791:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2792:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2793:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableBRK(TIM_TypeDef *TIMx)
2794:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2795:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t tmpreg;
2796:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_BKE);
2797:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   /* Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. 
ARM GAS  /tmp/ccjoSfar.s 			page 55


2798:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2799:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (void)(tmpreg);
2800:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2801:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2802:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2803:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configure the break input.
2804:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2805:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2806:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         BKP           LL_TIM_ConfigBRK
2807:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2808:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  BreakPolarity This parameter can be one of the following values:
2809:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_BREAK_POLARITY_LOW
2810:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_BREAK_POLARITY_HIGH
2811:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2812:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2813:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigBRK(TIM_TypeDef *TIMx, uint32_t BreakPolarity)
2814:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2815:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   __IO uint32_t tmpreg;
2816:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_BKP, BreakPolarity);
2817:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   /* Note: Any write operation to BKP bit takes a delay of 1 APB clock cycle to become effective. *
2818:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2819:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   (void)(tmpreg);
2820:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2821:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2822:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2823:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Select the outputs off state (enabled v.s. disabled) in Idle and Run modes.
2824:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2825:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2826:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         OSSI          LL_TIM_SetOffStates\n
2827:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         BDTR         OSSR          LL_TIM_SetOffStates
2828:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2829:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OffStateIdle This parameter can be one of the following values:
2830:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSI_DISABLE
2831:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSI_ENABLE
2832:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OffStateRun This parameter can be one of the following values:
2833:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSR_DISABLE
2834:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSR_ENABLE
2835:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2836:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2837:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOffStates(TIM_TypeDef *TIMx, uint32_t OffStateIdle, uint32_t OffStat
2838:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2839:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_OSSI | TIM_BDTR_OSSR, OffStateIdle | OffStateRun);
2840:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2841:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2842:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2843:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable automatic output (MOE can be set by software or automatically when a break input
2844:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2845:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2846:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_EnableAutomaticOutput
2847:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2848:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2849:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2850:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableAutomaticOutput(TIM_TypeDef *TIMx)
2851:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2852:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
2853:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2854:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
ARM GAS  /tmp/ccjoSfar.s 			page 56


2855:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2856:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable automatic output (MOE can be set only by software).
2857:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2858:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2859:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_DisableAutomaticOutput
2860:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2861:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2862:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2863:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableAutomaticOutput(TIM_TypeDef *TIMx)
2864:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2865:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_AOE);
2866:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2867:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2868:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2869:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether automatic output is enabled.
2870:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2871:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2872:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_IsEnabledAutomaticOutput
2873:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2874:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2875:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2876:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledAutomaticOutput(TIM_TypeDef *TIMx)
2877:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2878:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->BDTR, TIM_BDTR_AOE) == (TIM_BDTR_AOE)) ? 1UL : 0UL);
2879:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2880:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2881:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2882:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Enable the outputs (set the MOE bit in TIMx_BDTR register).
2883:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
2884:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       software and is reset in case of break or break2 event
2885:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2886:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2887:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
2888:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2889:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2890:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2891:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
2892:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2893:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
2894:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2895:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2896:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2897:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Disable the outputs (reset the MOE bit in TIMx_BDTR register).
2898:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
2899:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       software and is reset in case of break or break2 event.
2900:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2901:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2902:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
2903:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2904:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2905:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2906:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
2907:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2908:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
2909:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2910:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2911:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
ARM GAS  /tmp/ccjoSfar.s 			page 57


2912:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicates whether outputs are enabled.
2913:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2914:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a timer instance provides a break input.
2915:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_IsEnabledAllOutputs
2916:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2917:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2918:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2919:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledAllOutputs(TIM_TypeDef *TIMx)
2920:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2921:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->BDTR, TIM_BDTR_MOE) == (TIM_BDTR_MOE)) ? 1UL : 0UL);
2922:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2923:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2924:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2925:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2926:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2927:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2928:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_DMA_Burst_Mode DMA burst mode configuration
2929:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2930:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2931:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2932:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Configures the timer DMA burst feature.
2933:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_DMABURST_INSTANCE(TIMx) can be used to check whether or
2934:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       not a timer instance supports the DMA burst mode.
2935:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll DCR          DBL           LL_TIM_ConfigDMABurst\n
2936:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         DCR          DBA           LL_TIM_ConfigDMABurst
2937:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2938:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DMABurstBaseAddress This parameter can be one of the following values:
2939:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR1
2940:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR2
2941:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_SMCR
2942:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_DIER
2943:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_SR
2944:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_EGR
2945:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR1
2946:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR2
2947:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCER
2948:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CNT
2949:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_PSC
2950:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_ARR
2951:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_RCR
2952:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR1
2953:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR2
2954:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR3
2955:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR4
2956:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_BDTR
2957:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  DMABurstLength This parameter can be one of the following values:
2958:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_1TRANSFER
2959:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_2TRANSFERS
2960:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_3TRANSFERS
2961:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_4TRANSFERS
2962:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_5TRANSFERS
2963:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_6TRANSFERS
2964:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_7TRANSFERS
2965:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_8TRANSFERS
2966:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_9TRANSFERS
2967:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_10TRANSFERS
2968:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_11TRANSFERS
ARM GAS  /tmp/ccjoSfar.s 			page 58


2969:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_12TRANSFERS
2970:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_13TRANSFERS
2971:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_14TRANSFERS
2972:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_15TRANSFERS
2973:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_16TRANSFERS
2974:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_17TRANSFERS
2975:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_18TRANSFERS
2976:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
2977:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2978:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigDMABurst(TIM_TypeDef *TIMx, uint32_t DMABurstBaseAddress, uint32_
2979:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
2980:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
2981:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
2982:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2983:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2984:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
2985:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2986:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
2987:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Timer_Inputs_Remapping Timer input remapping
2988:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
2989:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
2990:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
2991:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Remap TIM inputs (input channel, internal/external triggers).
2992:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note Macro IS_TIM_REMAP_INSTANCE(TIMx) can be used to check whether or not
2993:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *       a some timer inputs can be remapped.
2994:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll TIM14_OR    TI1_RMP           LL_TIM_SetRemap
2995:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
2996:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  Remap This parameter can be one of the following values:
2997:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_GPIO
2998:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_RTC_CLK
2999:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_HSE
3000:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *            @arg @ref LL_TIM_TIM14_TI1_RMP_MCO
3001:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *
3002:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3003:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3004:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetRemap(TIM_TypeDef *TIMx, uint32_t Remap)
3005:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3006:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->OR, (Remap >> TIMx_OR_RMP_SHIFT), (Remap & TIMx_OR_RMP_MASK));
3007:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3008:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3009:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3010:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
3011:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3012:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3013:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_OCREF_Clear OCREF_Clear_Management
3014:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
3015:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3016:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3017:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Set the OCREF clear input source
3018:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note The OCxREF signal of a given channel can be cleared when a high level is applied on the O
3019:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes.
3020:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SMCR          OCCS                LL_TIM_SetOCRefClearInputSource
3021:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3022:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  OCRefClearInputSource This parameter can be one of the following values:
3023:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCREF_CLR_INT_OCREF_CLR
3024:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
3025:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
ARM GAS  /tmp/ccjoSfar.s 			page 59


3026:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3027:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSou
3028:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3029:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
3030:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3031:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3032:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @}
3033:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3034:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3035:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /** @defgroup TIM_LL_EF_FLAG_Management FLAG-Management
3036:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @{
3037:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3038:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3039:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Clear the update interrupt flag (UIF).
3040:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
3041:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3042:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval None
3043:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3044:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
3045:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
3047:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
3048:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** 
3049:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** /**
3050:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @brief  Indicate whether update interrupt flag (UIF) is set (update interrupt is pending).
3051:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
3052:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @param  TIMx Timer instance
3053:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   * @retval State of bit (1 or 0).
3054:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   */
3055:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
3056:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** {
3057:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 141              		.loc 2 3057 0
 142 0000 054B     		ldr	r3, .L12
 143              	.LBE8:
 144              	.LBE7:
 145              		.loc 1 152 0
 146 0002 10B5     		push	{r4, lr}
 147              	.LCFI0:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 4, -8
 150              		.cfi_offset 14, -4
 151              	.LBB10:
 152              	.LBB9:
 153              		.loc 2 3057 0
 154 0004 1A69     		ldr	r2, [r3, #16]
 155 0006 D207     		lsls	r2, r2, #31
 156 0008 04D5     		bpl	.L8
 157              	.LVL1:
 158              	.LBE9:
 159              	.LBE10:
 160              	.LBB11:
 161              	.LBB12:
 162              	.LBB13:
3046:Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_tim.h **** }
 163              		.loc 2 3046 0
 164 000a 0222     		movs	r2, #2
ARM GAS  /tmp/ccjoSfar.s 			page 60


 165 000c 5242     		rsbs	r2, r2, #0
 166 000e 1A61     		str	r2, [r3, #16]
 167              	.LVL2:
 168              	.LBE13:
 169              	.LBE12:
 153:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
 154:Core/Src/stm32f0xx_it.c ****   
 155:Core/Src/stm32f0xx_it.c ****   if (LL_TIM_IsActiveFlag_UPDATE (SM_DRIVER_TIMER)) {
 156:Core/Src/stm32f0xx_it.c ****     LL_TIM_ClearFlag_UPDATE (SM_DRIVER_TIMER);
 157:Core/Src/stm32f0xx_it.c **** 
 158:Core/Src/stm32f0xx_it.c ****     SM_Step_Driver ();
 170              		.loc 1 158 0
 171 0010 FFF7FEFF 		bl	SM_Step_Driver
 172              	.LVL3:
 173              	.L8:
 174              	.LBE11:
 159:Core/Src/stm32f0xx_it.c ****   }
 160:Core/Src/stm32f0xx_it.c ****   
 161:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 0 */
 162:Core/Src/stm32f0xx_it.c **** 
 163:Core/Src/stm32f0xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
 164:Core/Src/stm32f0xx_it.c **** 
 165:Core/Src/stm32f0xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 1 */
 166:Core/Src/stm32f0xx_it.c **** }
 175              		.loc 1 166 0
 176              		@ sp needed
 177 0014 10BD     		pop	{r4, pc}
 178              	.L13:
 179 0016 C046     		.align	2
 180              	.L12:
 181 0018 00100040 		.word	1073745920
 182              		.cfi_endproc
 183              	.LFE534:
 185              		.text
 186              	.Letext0:
 187              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 188              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 189              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 190              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 191              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_dma.h"
 192              		.file 8 "/usr/include/newlib/sys/lock.h"
 193              		.file 9 "/usr/include/newlib/sys/_types.h"
 194              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 195              		.file 11 "/usr/include/newlib/sys/reent.h"
 196              		.file 12 "/usr/include/newlib/stdlib.h"
ARM GAS  /tmp/ccjoSfar.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_it.c
     /tmp/ccjoSfar.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccjoSfar.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccjoSfar.s:39     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccjoSfar.s:47     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccjoSfar.s:61     .text.SVC_Handler:0000000000000000 $t
     /tmp/ccjoSfar.s:69     .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccjoSfar.s:81     .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccjoSfar.s:89     .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccjoSfar.s:101    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccjoSfar.s:109    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccjoSfar.s:123    .text.TIM6_DAC_IRQHandler:0000000000000000 $t
     /tmp/ccjoSfar.s:131    .text.TIM6_DAC_IRQHandler:0000000000000000 TIM6_DAC_IRQHandler
     /tmp/ccjoSfar.s:181    .text.TIM6_DAC_IRQHandler:0000000000000018 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SM_Step_Driver
